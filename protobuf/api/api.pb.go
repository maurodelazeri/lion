// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api.proto

package api

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Venue int32

const (
	Venue_DARKPOOL    Venue = 0
	Venue_COINBASEPRO Venue = 1
	Venue_BINANCE     Venue = 2
	Venue_BITFINEX    Venue = 3
	Venue_BITMEX      Venue = 4
	Venue_GEMINI      Venue = 5
)

var Venue_name = map[int32]string{
	0: "DARKPOOL",
	1: "COINBASEPRO",
	2: "BINANCE",
	3: "BITFINEX",
	4: "BITMEX",
	5: "GEMINI",
}
var Venue_value = map[string]int32{
	"DARKPOOL":    0,
	"COINBASEPRO": 1,
	"BINANCE":     2,
	"BITFINEX":    3,
	"BITMEX":      4,
	"GEMINI":      5,
}

func (x Venue) String() string {
	return proto.EnumName(Venue_name, int32(x))
}
func (Venue) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_api_891a1f6542f25431, []int{0}
}

type VenueType int32

const (
	VenueType_SPOT    VenueType = 0
	VenueType_FUTURES VenueType = 1
)

var VenueType_name = map[int32]string{
	0: "SPOT",
	1: "FUTURES",
}
var VenueType_value = map[string]int32{
	"SPOT":    0,
	"FUTURES": 1,
}

func (x VenueType) String() string {
	return proto.EnumName(VenueType_name, int32(x))
}
func (VenueType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_api_891a1f6542f25431, []int{1}
}

type Symbol int32

const (
	Symbol_USD Symbol = 0
	Symbol_BTC Symbol = 1
	Symbol_ETH Symbol = 2
	Symbol_BCH Symbol = 3
	Symbol_LTC Symbol = 4
	Symbol_ETC Symbol = 5
)

var Symbol_name = map[int32]string{
	0: "USD",
	1: "BTC",
	2: "ETH",
	3: "BCH",
	4: "LTC",
	5: "ETC",
}
var Symbol_value = map[string]int32{
	"USD": 0,
	"BTC": 1,
	"ETH": 2,
	"BCH": 3,
	"LTC": 4,
	"ETC": 5,
}

func (x Symbol) String() string {
	return proto.EnumName(Symbol_name, int32(x))
}
func (Symbol) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_api_891a1f6542f25431, []int{2}
}

type Product int32

const (
	Product_BTC_USD Product = 0
	Product_ETH_USD Product = 1
	Product_ETH_BTC Product = 2
	Product_LTC_USD Product = 3
	Product_LTC_BTC Product = 4
	Product_BCH_USD Product = 5
	Product_BCH_BTC Product = 6
	Product_ETC_USD Product = 7
	Product_ETC_BTC Product = 8
)

var Product_name = map[int32]string{
	0: "BTC_USD",
	1: "ETH_USD",
	2: "ETH_BTC",
	3: "LTC_USD",
	4: "LTC_BTC",
	5: "BCH_USD",
	6: "BCH_BTC",
	7: "ETC_USD",
	8: "ETC_BTC",
}
var Product_value = map[string]int32{
	"BTC_USD": 0,
	"ETH_USD": 1,
	"ETH_BTC": 2,
	"LTC_USD": 3,
	"LTC_BTC": 4,
	"BCH_USD": 5,
	"BCH_BTC": 6,
	"ETC_USD": 7,
	"ETC_BTC": 8,
}

func (x Product) String() string {
	return proto.EnumName(Product_name, int32(x))
}
func (Product) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_api_891a1f6542f25431, []int{3}
}

type AccountType int32

const (
	AccountType_LIVE AccountType = 0
	AccountType_DEMO AccountType = 1
)

var AccountType_name = map[int32]string{
	0: "LIVE",
	1: "DEMO",
}
var AccountType_value = map[string]int32{
	"LIVE": 0,
	"DEMO": 1,
}

func (x AccountType) String() string {
	return proto.EnumName(AccountType_name, int32(x))
}
func (AccountType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_api_891a1f6542f25431, []int{4}
}

type OrderSide int32

const (
	OrderSide_BUY  OrderSide = 0
	OrderSide_SELL OrderSide = 1
)

var OrderSide_name = map[int32]string{
	0: "BUY",
	1: "SELL",
}
var OrderSide_value = map[string]int32{
	"BUY":  0,
	"SELL": 1,
}

func (x OrderSide) String() string {
	return proto.EnumName(OrderSide_name, int32(x))
}
func (OrderSide) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_api_891a1f6542f25431, []int{5}
}

type OrderType int32

const (
	OrderType_MARKET    OrderType = 0
	OrderType_LIMIT     OrderType = 1
	OrderType_STOP      OrderType = 2
	OrderType_STOPLIMIT OrderType = 3
	OrderType_TRAILING  OrderType = 4
)

var OrderType_name = map[int32]string{
	0: "MARKET",
	1: "LIMIT",
	2: "STOP",
	3: "STOPLIMIT",
	4: "TRAILING",
}
var OrderType_value = map[string]int32{
	"MARKET":    0,
	"LIMIT":     1,
	"STOP":      2,
	"STOPLIMIT": 3,
	"TRAILING":  4,
}

func (x OrderType) String() string {
	return proto.EnumName(OrderType_name, int32(x))
}
func (OrderType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_api_891a1f6542f25431, []int{6}
}

type OrderStatus int32

const (
	OrderStatus_RECEIVED         OrderStatus = 0
	OrderStatus_ACCEPTED         OrderStatus = 1
	OrderStatus_REJECTED         OrderStatus = 2
	OrderStatus_WORKING          OrderStatus = 3
	OrderStatus_PLACED           OrderStatus = 4
	OrderStatus_FILLED           OrderStatus = 5
	OrderStatus_PARTIALLY_FILLED OrderStatus = 6
	OrderStatus_CANCELLED        OrderStatus = 7
	OrderStatus_CHANGED          OrderStatus = 8
)

var OrderStatus_name = map[int32]string{
	0: "RECEIVED",
	1: "ACCEPTED",
	2: "REJECTED",
	3: "WORKING",
	4: "PLACED",
	5: "FILLED",
	6: "PARTIALLY_FILLED",
	7: "CANCELLED",
	8: "CHANGED",
}
var OrderStatus_value = map[string]int32{
	"RECEIVED":         0,
	"ACCEPTED":         1,
	"REJECTED":         2,
	"WORKING":          3,
	"PLACED":           4,
	"FILLED":           5,
	"PARTIALLY_FILLED": 6,
	"CANCELLED":        7,
	"CHANGED":          8,
}

func (x OrderStatus) String() string {
	return proto.EnumName(OrderStatus_name, int32(x))
}
func (OrderStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_api_891a1f6542f25431, []int{7}
}

type User struct {
	Id                   string     `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Accounts             []*Account `protobuf:"bytes,2,rep,name=accounts,proto3" json:"accounts,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *User) Reset()         { *m = User{} }
func (m *User) String() string { return proto.CompactTextString(m) }
func (*User) ProtoMessage()    {}
func (*User) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_891a1f6542f25431, []int{0}
}
func (m *User) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_User.Unmarshal(m, b)
}
func (m *User) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_User.Marshal(b, m, deterministic)
}
func (dst *User) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User.Merge(dst, src)
}
func (m *User) XXX_Size() int {
	return xxx_messageInfo_User.Size(m)
}
func (m *User) XXX_DiscardUnknown() {
	xxx_messageInfo_User.DiscardUnknown(m)
}

var xxx_messageInfo_User proto.InternalMessageInfo

func (m *User) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *User) GetAccounts() []*Account {
	if m != nil {
		return m.Accounts
	}
	return nil
}

type Account struct {
	Id                   string              `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	User                 string              `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
	Venue                Venue               `protobuf:"varint,3,opt,name=venue,proto3,enum=api.Venue" json:"venue,omitempty"`
	AccountType          AccountType         `protobuf:"varint,4,opt,name=accountType,proto3,enum=api.AccountType" json:"accountType,omitempty"`
	Balances             map[string]*Balance `protobuf:"bytes,5,rep,name=balances,proto3" json:"balances,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Active               bool                `protobuf:"varint,6,opt,name=active,proto3" json:"active,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *Account) Reset()         { *m = Account{} }
func (m *Account) String() string { return proto.CompactTextString(m) }
func (*Account) ProtoMessage()    {}
func (*Account) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_891a1f6542f25431, []int{1}
}
func (m *Account) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Account.Unmarshal(m, b)
}
func (m *Account) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Account.Marshal(b, m, deterministic)
}
func (dst *Account) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Account.Merge(dst, src)
}
func (m *Account) XXX_Size() int {
	return xxx_messageInfo_Account.Size(m)
}
func (m *Account) XXX_DiscardUnknown() {
	xxx_messageInfo_Account.DiscardUnknown(m)
}

var xxx_messageInfo_Account proto.InternalMessageInfo

func (m *Account) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Account) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func (m *Account) GetVenue() Venue {
	if m != nil {
		return m.Venue
	}
	return Venue_DARKPOOL
}

func (m *Account) GetAccountType() AccountType {
	if m != nil {
		return m.AccountType
	}
	return AccountType_LIVE
}

func (m *Account) GetBalances() map[string]*Balance {
	if m != nil {
		return m.Balances
	}
	return nil
}

func (m *Account) GetActive() bool {
	if m != nil {
		return m.Active
	}
	return false
}

type Balance struct {
	Id                   float64  `protobuf:"fixed64,1,opt,name=id,proto3" json:"id,omitempty"`
	Available            float64  `protobuf:"fixed64,2,opt,name=available,proto3" json:"available,omitempty"`
	Hold                 float64  `protobuf:"fixed64,3,opt,name=hold,proto3" json:"hold,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Balance) Reset()         { *m = Balance{} }
func (m *Balance) String() string { return proto.CompactTextString(m) }
func (*Balance) ProtoMessage()    {}
func (*Balance) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_891a1f6542f25431, []int{2}
}
func (m *Balance) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Balance.Unmarshal(m, b)
}
func (m *Balance) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Balance.Marshal(b, m, deterministic)
}
func (dst *Balance) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Balance.Merge(dst, src)
}
func (m *Balance) XXX_Size() int {
	return xxx_messageInfo_Balance.Size(m)
}
func (m *Balance) XXX_DiscardUnknown() {
	xxx_messageInfo_Balance.DiscardUnknown(m)
}

var xxx_messageInfo_Balance proto.InternalMessageInfo

func (m *Balance) GetId() float64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Balance) GetAvailable() float64 {
	if m != nil {
		return m.Available
	}
	return 0
}

func (m *Balance) GetHold() float64 {
	if m != nil {
		return m.Hold
	}
	return 0
}

type AccountFilter struct {
	Account              string      `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
	Active               string      `protobuf:"bytes,2,opt,name=active,proto3" json:"active,omitempty"`
	AccountType          AccountType `protobuf:"varint,3,opt,name=accountType,proto3,enum=api.AccountType" json:"accountType,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *AccountFilter) Reset()         { *m = AccountFilter{} }
func (m *AccountFilter) String() string { return proto.CompactTextString(m) }
func (*AccountFilter) ProtoMessage()    {}
func (*AccountFilter) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_891a1f6542f25431, []int{3}
}
func (m *AccountFilter) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AccountFilter.Unmarshal(m, b)
}
func (m *AccountFilter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AccountFilter.Marshal(b, m, deterministic)
}
func (dst *AccountFilter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccountFilter.Merge(dst, src)
}
func (m *AccountFilter) XXX_Size() int {
	return xxx_messageInfo_AccountFilter.Size(m)
}
func (m *AccountFilter) XXX_DiscardUnknown() {
	xxx_messageInfo_AccountFilter.DiscardUnknown(m)
}

var xxx_messageInfo_AccountFilter proto.InternalMessageInfo

func (m *AccountFilter) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *AccountFilter) GetActive() string {
	if m != nil {
		return m.Active
	}
	return ""
}

func (m *AccountFilter) GetAccountType() AccountType {
	if m != nil {
		return m.AccountType
	}
	return AccountType_LIVE
}

type OrderMarket struct {
	Venue                Venue     `protobuf:"varint,1,opt,name=venue,proto3,enum=api.Venue" json:"venue,omitempty"`
	Product              Product   `protobuf:"varint,2,opt,name=product,proto3,enum=api.Product" json:"product,omitempty"`
	Amount               float64   `protobuf:"fixed64,3,opt,name=amount,proto3" json:"amount,omitempty"`
	Side                 OrderSide `protobuf:"varint,4,opt,name=side,proto3,enum=api.OrderSide" json:"side,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *OrderMarket) Reset()         { *m = OrderMarket{} }
func (m *OrderMarket) String() string { return proto.CompactTextString(m) }
func (*OrderMarket) ProtoMessage()    {}
func (*OrderMarket) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_891a1f6542f25431, []int{4}
}
func (m *OrderMarket) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OrderMarket.Unmarshal(m, b)
}
func (m *OrderMarket) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OrderMarket.Marshal(b, m, deterministic)
}
func (dst *OrderMarket) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrderMarket.Merge(dst, src)
}
func (m *OrderMarket) XXX_Size() int {
	return xxx_messageInfo_OrderMarket.Size(m)
}
func (m *OrderMarket) XXX_DiscardUnknown() {
	xxx_messageInfo_OrderMarket.DiscardUnknown(m)
}

var xxx_messageInfo_OrderMarket proto.InternalMessageInfo

func (m *OrderMarket) GetVenue() Venue {
	if m != nil {
		return m.Venue
	}
	return Venue_DARKPOOL
}

func (m *OrderMarket) GetProduct() Product {
	if m != nil {
		return m.Product
	}
	return Product_BTC_USD
}

func (m *OrderMarket) GetAmount() float64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *OrderMarket) GetSide() OrderSide {
	if m != nil {
		return m.Side
	}
	return OrderSide_BUY
}

type OrderLimit struct {
	Venue                Venue     `protobuf:"varint,1,opt,name=venue,proto3,enum=api.Venue" json:"venue,omitempty"`
	Product              Product   `protobuf:"varint,2,opt,name=product,proto3,enum=api.Product" json:"product,omitempty"`
	Price                float64   `protobuf:"fixed64,3,opt,name=price,proto3" json:"price,omitempty"`
	Amount               float64   `protobuf:"fixed64,4,opt,name=amount,proto3" json:"amount,omitempty"`
	Side                 OrderSide `protobuf:"varint,5,opt,name=side,proto3,enum=api.OrderSide" json:"side,omitempty"`
	CancelAfter          int32     `protobuf:"varint,6,opt,name=cancel_after,json=cancelAfter,proto3" json:"cancel_after,omitempty"`
	PostOnly             bool      `protobuf:"varint,7,opt,name=post_only,json=postOnly,proto3" json:"post_only,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *OrderLimit) Reset()         { *m = OrderLimit{} }
func (m *OrderLimit) String() string { return proto.CompactTextString(m) }
func (*OrderLimit) ProtoMessage()    {}
func (*OrderLimit) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_891a1f6542f25431, []int{5}
}
func (m *OrderLimit) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OrderLimit.Unmarshal(m, b)
}
func (m *OrderLimit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OrderLimit.Marshal(b, m, deterministic)
}
func (dst *OrderLimit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrderLimit.Merge(dst, src)
}
func (m *OrderLimit) XXX_Size() int {
	return xxx_messageInfo_OrderLimit.Size(m)
}
func (m *OrderLimit) XXX_DiscardUnknown() {
	xxx_messageInfo_OrderLimit.DiscardUnknown(m)
}

var xxx_messageInfo_OrderLimit proto.InternalMessageInfo

func (m *OrderLimit) GetVenue() Venue {
	if m != nil {
		return m.Venue
	}
	return Venue_DARKPOOL
}

func (m *OrderLimit) GetProduct() Product {
	if m != nil {
		return m.Product
	}
	return Product_BTC_USD
}

func (m *OrderLimit) GetPrice() float64 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *OrderLimit) GetAmount() float64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *OrderLimit) GetSide() OrderSide {
	if m != nil {
		return m.Side
	}
	return OrderSide_BUY
}

func (m *OrderLimit) GetCancelAfter() int32 {
	if m != nil {
		return m.CancelAfter
	}
	return 0
}

func (m *OrderLimit) GetPostOnly() bool {
	if m != nil {
		return m.PostOnly
	}
	return false
}

type OrdersCancel struct {
	Orders               []*Order `protobuf:"bytes,1,rep,name=orders,proto3" json:"orders,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OrdersCancel) Reset()         { *m = OrdersCancel{} }
func (m *OrdersCancel) String() string { return proto.CompactTextString(m) }
func (*OrdersCancel) ProtoMessage()    {}
func (*OrdersCancel) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_891a1f6542f25431, []int{6}
}
func (m *OrdersCancel) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OrdersCancel.Unmarshal(m, b)
}
func (m *OrdersCancel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OrdersCancel.Marshal(b, m, deterministic)
}
func (dst *OrdersCancel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrdersCancel.Merge(dst, src)
}
func (m *OrdersCancel) XXX_Size() int {
	return xxx_messageInfo_OrdersCancel.Size(m)
}
func (m *OrdersCancel) XXX_DiscardUnknown() {
	xxx_messageInfo_OrdersCancel.DiscardUnknown(m)
}

var xxx_messageInfo_OrdersCancel proto.InternalMessageInfo

func (m *OrdersCancel) GetOrders() []*Order {
	if m != nil {
		return m.Orders
	}
	return nil
}

type OrderResponse struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Sucess               bool     `protobuf:"varint,2,opt,name=sucess,proto3" json:"sucess,omitempty"`
	Execution            string   `protobuf:"bytes,3,opt,name=execution,proto3" json:"execution,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OrderResponse) Reset()         { *m = OrderResponse{} }
func (m *OrderResponse) String() string { return proto.CompactTextString(m) }
func (*OrderResponse) ProtoMessage()    {}
func (*OrderResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_891a1f6542f25431, []int{7}
}
func (m *OrderResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OrderResponse.Unmarshal(m, b)
}
func (m *OrderResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OrderResponse.Marshal(b, m, deterministic)
}
func (dst *OrderResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrderResponse.Merge(dst, src)
}
func (m *OrderResponse) XXX_Size() int {
	return xxx_messageInfo_OrderResponse.Size(m)
}
func (m *OrderResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_OrderResponse.DiscardUnknown(m)
}

var xxx_messageInfo_OrderResponse proto.InternalMessageInfo

func (m *OrderResponse) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *OrderResponse) GetSucess() bool {
	if m != nil {
		return m.Sucess
	}
	return false
}

func (m *OrderResponse) GetExecution() string {
	if m != nil {
		return m.Execution
	}
	return ""
}

type Order struct {
	Id                   string      `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Venue                Venue       `protobuf:"varint,2,opt,name=venue,proto3,enum=api.Venue" json:"venue,omitempty"`
	Account              string      `protobuf:"bytes,3,opt,name=account,proto3" json:"account,omitempty"`
	Strategy             string      `protobuf:"bytes,4,opt,name=strategy,proto3" json:"strategy,omitempty"`
	Product              Product     `protobuf:"varint,5,opt,name=product,proto3,enum=api.Product" json:"product,omitempty"`
	Amount               float64     `protobuf:"fixed64,6,opt,name=amount,proto3" json:"amount,omitempty"`
	Price                float64     `protobuf:"fixed64,7,opt,name=price,proto3" json:"price,omitempty"`
	Funds                float64     `protobuf:"fixed64,8,opt,name=funds,proto3" json:"funds,omitempty"`
	Side                 OrderSide   `protobuf:"varint,9,opt,name=side,proto3,enum=api.OrderSide" json:"side,omitempty"`
	Type                 OrderType   `protobuf:"varint,10,opt,name=type,proto3,enum=api.OrderType" json:"type,omitempty"`
	ParentOrder          string      `protobuf:"bytes,11,opt,name=parent_order,json=parentOrder,proto3" json:"parent_order,omitempty"`
	Expepiration         int32       `protobuf:"varint,12,opt,name=expepiration,proto3" json:"expepiration,omitempty"`
	Status               OrderStatus `protobuf:"varint,13,opt,name=status,proto3,enum=api.OrderStatus" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *Order) Reset()         { *m = Order{} }
func (m *Order) String() string { return proto.CompactTextString(m) }
func (*Order) ProtoMessage()    {}
func (*Order) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_891a1f6542f25431, []int{8}
}
func (m *Order) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Order.Unmarshal(m, b)
}
func (m *Order) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Order.Marshal(b, m, deterministic)
}
func (dst *Order) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Order.Merge(dst, src)
}
func (m *Order) XXX_Size() int {
	return xxx_messageInfo_Order.Size(m)
}
func (m *Order) XXX_DiscardUnknown() {
	xxx_messageInfo_Order.DiscardUnknown(m)
}

var xxx_messageInfo_Order proto.InternalMessageInfo

func (m *Order) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Order) GetVenue() Venue {
	if m != nil {
		return m.Venue
	}
	return Venue_DARKPOOL
}

func (m *Order) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *Order) GetStrategy() string {
	if m != nil {
		return m.Strategy
	}
	return ""
}

func (m *Order) GetProduct() Product {
	if m != nil {
		return m.Product
	}
	return Product_BTC_USD
}

func (m *Order) GetAmount() float64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *Order) GetPrice() float64 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *Order) GetFunds() float64 {
	if m != nil {
		return m.Funds
	}
	return 0
}

func (m *Order) GetSide() OrderSide {
	if m != nil {
		return m.Side
	}
	return OrderSide_BUY
}

func (m *Order) GetType() OrderType {
	if m != nil {
		return m.Type
	}
	return OrderType_MARKET
}

func (m *Order) GetParentOrder() string {
	if m != nil {
		return m.ParentOrder
	}
	return ""
}

func (m *Order) GetExpepiration() int32 {
	if m != nil {
		return m.Expepiration
	}
	return 0
}

func (m *Order) GetStatus() OrderStatus {
	if m != nil {
		return m.Status
	}
	return OrderStatus_RECEIVED
}

type OrderFilter struct {
	Id                   string      `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Account              string      `protobuf:"bytes,2,opt,name=account,proto3" json:"account,omitempty"`
	Status               OrderStatus `protobuf:"varint,3,opt,name=status,proto3,enum=api.OrderStatus" json:"status,omitempty"`
	Type                 OrderType   `protobuf:"varint,4,opt,name=type,proto3,enum=api.OrderType" json:"type,omitempty"`
	Side                 OrderSide   `protobuf:"varint,5,opt,name=side,proto3,enum=api.OrderSide" json:"side,omitempty"`
	Venue                Venue       `protobuf:"varint,6,opt,name=venue,proto3,enum=api.Venue" json:"venue,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *OrderFilter) Reset()         { *m = OrderFilter{} }
func (m *OrderFilter) String() string { return proto.CompactTextString(m) }
func (*OrderFilter) ProtoMessage()    {}
func (*OrderFilter) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_891a1f6542f25431, []int{9}
}
func (m *OrderFilter) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OrderFilter.Unmarshal(m, b)
}
func (m *OrderFilter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OrderFilter.Marshal(b, m, deterministic)
}
func (dst *OrderFilter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrderFilter.Merge(dst, src)
}
func (m *OrderFilter) XXX_Size() int {
	return xxx_messageInfo_OrderFilter.Size(m)
}
func (m *OrderFilter) XXX_DiscardUnknown() {
	xxx_messageInfo_OrderFilter.DiscardUnknown(m)
}

var xxx_messageInfo_OrderFilter proto.InternalMessageInfo

func (m *OrderFilter) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *OrderFilter) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *OrderFilter) GetStatus() OrderStatus {
	if m != nil {
		return m.Status
	}
	return OrderStatus_RECEIVED
}

func (m *OrderFilter) GetType() OrderType {
	if m != nil {
		return m.Type
	}
	return OrderType_MARKET
}

func (m *OrderFilter) GetSide() OrderSide {
	if m != nil {
		return m.Side
	}
	return OrderSide_BUY
}

func (m *OrderFilter) GetVenue() Venue {
	if m != nil {
		return m.Venue
	}
	return Venue_DARKPOOL
}

func init() {
	proto.RegisterType((*User)(nil), "api.User")
	proto.RegisterType((*Account)(nil), "api.Account")
	proto.RegisterMapType((map[string]*Balance)(nil), "api.Account.BalancesEntry")
	proto.RegisterType((*Balance)(nil), "api.Balance")
	proto.RegisterType((*AccountFilter)(nil), "api.AccountFilter")
	proto.RegisterType((*OrderMarket)(nil), "api.OrderMarket")
	proto.RegisterType((*OrderLimit)(nil), "api.OrderLimit")
	proto.RegisterType((*OrdersCancel)(nil), "api.OrdersCancel")
	proto.RegisterType((*OrderResponse)(nil), "api.OrderResponse")
	proto.RegisterType((*Order)(nil), "api.Order")
	proto.RegisterType((*OrderFilter)(nil), "api.OrderFilter")
	proto.RegisterEnum("api.Venue", Venue_name, Venue_value)
	proto.RegisterEnum("api.VenueType", VenueType_name, VenueType_value)
	proto.RegisterEnum("api.Symbol", Symbol_name, Symbol_value)
	proto.RegisterEnum("api.Product", Product_name, Product_value)
	proto.RegisterEnum("api.AccountType", AccountType_name, AccountType_value)
	proto.RegisterEnum("api.OrderSide", OrderSide_name, OrderSide_value)
	proto.RegisterEnum("api.OrderType", OrderType_name, OrderType_value)
	proto.RegisterEnum("api.OrderStatus", OrderStatus_name, OrderStatus_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// APIClient is the client API for API service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type APIClient interface {
	// Get all Order for a user with filter - A server-to-client streaming RPC.
	GetOrders(ctx context.Context, in *OrderFilter, opts ...grpc.CallOption) (API_GetOrdersClient, error)
	// Create a new market order - A simple RPC
	CreateMarketOrder(ctx context.Context, in *OrderMarket, opts ...grpc.CallOption) (*OrderResponse, error)
	// Create a new limit order - A simple RPC
	CreateLimitOrder(ctx context.Context, in *OrderLimit, opts ...grpc.CallOption) (*OrderResponse, error)
	// Create a new stop order - A simple RPC
	CreateStopOrder(ctx context.Context, in *OrderLimit, opts ...grpc.CallOption) (*OrderResponse, error)
	// Cancel one or many orders by array of ids - A simple RPC
	CancelOrders(ctx context.Context, in *OrdersCancel, opts ...grpc.CallOption) (*OrderResponse, error)
	// Get all Accounts with filter - A simple RPC
	GetAccounts(ctx context.Context, in *AccountFilter, opts ...grpc.CallOption) (API_GetAccountsClient, error)
}

type aPIClient struct {
	cc *grpc.ClientConn
}

func NewAPIClient(cc *grpc.ClientConn) APIClient {
	return &aPIClient{cc}
}

func (c *aPIClient) GetOrders(ctx context.Context, in *OrderFilter, opts ...grpc.CallOption) (API_GetOrdersClient, error) {
	stream, err := c.cc.NewStream(ctx, &_API_serviceDesc.Streams[0], "/api.API/GetOrders", opts...)
	if err != nil {
		return nil, err
	}
	x := &aPIGetOrdersClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type API_GetOrdersClient interface {
	Recv() (*Order, error)
	grpc.ClientStream
}

type aPIGetOrdersClient struct {
	grpc.ClientStream
}

func (x *aPIGetOrdersClient) Recv() (*Order, error) {
	m := new(Order)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *aPIClient) CreateMarketOrder(ctx context.Context, in *OrderMarket, opts ...grpc.CallOption) (*OrderResponse, error) {
	out := new(OrderResponse)
	err := c.cc.Invoke(ctx, "/api.API/CreateMarketOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) CreateLimitOrder(ctx context.Context, in *OrderLimit, opts ...grpc.CallOption) (*OrderResponse, error) {
	out := new(OrderResponse)
	err := c.cc.Invoke(ctx, "/api.API/CreateLimitOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) CreateStopOrder(ctx context.Context, in *OrderLimit, opts ...grpc.CallOption) (*OrderResponse, error) {
	out := new(OrderResponse)
	err := c.cc.Invoke(ctx, "/api.API/CreateStopOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) CancelOrders(ctx context.Context, in *OrdersCancel, opts ...grpc.CallOption) (*OrderResponse, error) {
	out := new(OrderResponse)
	err := c.cc.Invoke(ctx, "/api.API/CancelOrders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) GetAccounts(ctx context.Context, in *AccountFilter, opts ...grpc.CallOption) (API_GetAccountsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_API_serviceDesc.Streams[1], "/api.API/GetAccounts", opts...)
	if err != nil {
		return nil, err
	}
	x := &aPIGetAccountsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type API_GetAccountsClient interface {
	Recv() (*Account, error)
	grpc.ClientStream
}

type aPIGetAccountsClient struct {
	grpc.ClientStream
}

func (x *aPIGetAccountsClient) Recv() (*Account, error) {
	m := new(Account)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// APIServer is the server API for API service.
type APIServer interface {
	// Get all Order for a user with filter - A server-to-client streaming RPC.
	GetOrders(*OrderFilter, API_GetOrdersServer) error
	// Create a new market order - A simple RPC
	CreateMarketOrder(context.Context, *OrderMarket) (*OrderResponse, error)
	// Create a new limit order - A simple RPC
	CreateLimitOrder(context.Context, *OrderLimit) (*OrderResponse, error)
	// Create a new stop order - A simple RPC
	CreateStopOrder(context.Context, *OrderLimit) (*OrderResponse, error)
	// Cancel one or many orders by array of ids - A simple RPC
	CancelOrders(context.Context, *OrdersCancel) (*OrderResponse, error)
	// Get all Accounts with filter - A simple RPC
	GetAccounts(*AccountFilter, API_GetAccountsServer) error
}

func RegisterAPIServer(s *grpc.Server, srv APIServer) {
	s.RegisterService(&_API_serviceDesc, srv)
}

func _API_GetOrders_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(OrderFilter)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(APIServer).GetOrders(m, &aPIGetOrdersServer{stream})
}

type API_GetOrdersServer interface {
	Send(*Order) error
	grpc.ServerStream
}

type aPIGetOrdersServer struct {
	grpc.ServerStream
}

func (x *aPIGetOrdersServer) Send(m *Order) error {
	return x.ServerStream.SendMsg(m)
}

func _API_CreateMarketOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderMarket)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).CreateMarketOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.API/CreateMarketOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).CreateMarketOrder(ctx, req.(*OrderMarket))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_CreateLimitOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderLimit)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).CreateLimitOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.API/CreateLimitOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).CreateLimitOrder(ctx, req.(*OrderLimit))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_CreateStopOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderLimit)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).CreateStopOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.API/CreateStopOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).CreateStopOrder(ctx, req.(*OrderLimit))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_CancelOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrdersCancel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).CancelOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.API/CancelOrders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).CancelOrders(ctx, req.(*OrdersCancel))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_GetAccounts_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(AccountFilter)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(APIServer).GetAccounts(m, &aPIGetAccountsServer{stream})
}

type API_GetAccountsServer interface {
	Send(*Account) error
	grpc.ServerStream
}

type aPIGetAccountsServer struct {
	grpc.ServerStream
}

func (x *aPIGetAccountsServer) Send(m *Account) error {
	return x.ServerStream.SendMsg(m)
}

var _API_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.API",
	HandlerType: (*APIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateMarketOrder",
			Handler:    _API_CreateMarketOrder_Handler,
		},
		{
			MethodName: "CreateLimitOrder",
			Handler:    _API_CreateLimitOrder_Handler,
		},
		{
			MethodName: "CreateStopOrder",
			Handler:    _API_CreateStopOrder_Handler,
		},
		{
			MethodName: "CancelOrders",
			Handler:    _API_CancelOrders_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetOrders",
			Handler:       _API_GetOrders_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetAccounts",
			Handler:       _API_GetAccounts_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api.proto",
}

func init() { proto.RegisterFile("api.proto", fileDescriptor_api_891a1f6542f25431) }

var fileDescriptor_api_891a1f6542f25431 = []byte{
	// 1147 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x56, 0xc1, 0x6e, 0xdb, 0x46,
	0x13, 0x36, 0x49, 0x91, 0x22, 0x47, 0xb2, 0xb3, 0x59, 0x04, 0x01, 0xe1, 0xff, 0x47, 0xe1, 0xf0,
	0x50, 0x18, 0x02, 0x1a, 0x14, 0x0e, 0xd0, 0xa6, 0x2d, 0x50, 0x94, 0xa2, 0x69, 0x9b, 0x35, 0x2d,
	0x09, 0x2b, 0x3a, 0x4d, 0x4e, 0x06, 0x2d, 0x6d, 0x5a, 0x22, 0x8a, 0x48, 0x90, 0x94, 0x11, 0x5d,
	0xfa, 0x08, 0xbd, 0xb4, 0xe7, 0xbe, 0x50, 0xaf, 0x7d, 0x88, 0x3e, 0x46, 0xb1, 0xb3, 0x2b, 0x89,
	0x4a, 0xaa, 0xc0, 0x05, 0x7a, 0xdb, 0xf9, 0x66, 0x67, 0x38, 0xf3, 0x7d, 0xb3, 0xbb, 0x04, 0x27,
	0x2d, 0xb2, 0xa7, 0x45, 0x99, 0xd7, 0x39, 0x35, 0xd2, 0x22, 0xf3, 0xbe, 0x83, 0xd6, 0x75, 0xc5,
	0x4b, 0x7a, 0x00, 0x7a, 0x36, 0x75, 0xb5, 0x23, 0xed, 0xd8, 0x61, 0x7a, 0x36, 0xa5, 0xc7, 0x60,
	0xa7, 0x93, 0x49, 0xbe, 0x98, 0xd7, 0x95, 0xab, 0x1f, 0x19, 0xc7, 0x9d, 0x93, 0xee, 0x53, 0x11,
	0xea, 0x4b, 0x90, 0xad, 0xbd, 0xde, 0xef, 0x3a, 0xb4, 0x15, 0xfa, 0x41, 0x16, 0x0a, 0xad, 0x45,
	0xc5, 0x4b, 0x57, 0x47, 0x04, 0xd7, 0xf4, 0x08, 0xcc, 0x3b, 0x3e, 0x5f, 0x70, 0xd7, 0x38, 0xd2,
	0x8e, 0x0f, 0x4e, 0x00, 0xd3, 0xbe, 0x10, 0x08, 0x93, 0x0e, 0x7a, 0x02, 0x1d, 0x95, 0x3d, 0x59,
	0x16, 0xdc, 0x6d, 0xe1, 0x3e, 0xd2, 0xfc, 0xbc, 0xc0, 0x59, 0x73, 0x13, 0xfd, 0x02, 0xec, 0xdb,
	0x74, 0x96, 0xce, 0x27, 0xbc, 0x72, 0x4d, 0xac, 0xf7, 0xb0, 0x19, 0xf0, 0xb4, 0xaf, 0x9c, 0xe1,
	0xbc, 0x2e, 0x97, 0x6c, 0xbd, 0x97, 0x3e, 0x06, 0x2b, 0x9d, 0xd4, 0xd9, 0x1d, 0x77, 0xad, 0x23,
	0xed, 0xd8, 0x66, 0xca, 0x3a, 0x8c, 0x60, 0x7f, 0x2b, 0x84, 0x12, 0x30, 0xde, 0xf0, 0xa5, 0xea,
	0x4d, 0x2c, 0xa9, 0x07, 0xe6, 0x5d, 0x3a, 0x5b, 0x70, 0xec, 0x6e, 0xc5, 0x8f, 0x0a, 0x62, 0xd2,
	0xf5, 0xb5, 0xfe, 0x5c, 0xf3, 0x2e, 0xa1, 0xad, 0xd0, 0x06, 0x3f, 0x1a, 0xf2, 0xf3, 0x7f, 0x70,
	0xd2, 0xbb, 0x34, 0x9b, 0xa5, 0xb7, 0x33, 0x99, 0x46, 0x63, 0x1b, 0x40, 0xb0, 0xf7, 0x53, 0x3e,
	0x9b, 0x22, 0x51, 0x1a, 0xc3, 0xb5, 0xb7, 0x80, 0x7d, 0xd5, 0xd2, 0x59, 0x36, 0xab, 0x79, 0x49,
	0x5d, 0x68, 0x2b, 0x1e, 0x54, 0x6d, 0x2b, 0xb3, 0xd1, 0x9a, 0xa4, 0x5f, 0x59, 0xef, 0xd3, 0x6b,
	0xdc, 0x83, 0x5e, 0xef, 0x57, 0x0d, 0x3a, 0xc3, 0x72, 0xca, 0xcb, 0xab, 0xb4, 0x7c, 0xc3, 0xeb,
	0x8d, 0x88, 0xda, 0x2e, 0x11, 0x3f, 0x85, 0x76, 0x51, 0xe6, 0xd3, 0xc5, 0xa4, 0xc6, 0xcf, 0x1f,
	0x28, 0x7e, 0x46, 0x12, 0x63, 0x2b, 0x27, 0x56, 0xf9, 0x16, 0xcb, 0x97, 0x6d, 0x2a, 0x8b, 0x7a,
	0xd0, 0xaa, 0xb2, 0xe9, 0x4a, 0xfd, 0x03, 0x0c, 0xc6, 0x0a, 0xc6, 0xd9, 0x94, 0x33, 0xf4, 0x79,
	0x7f, 0x69, 0x00, 0x88, 0xc5, 0xd9, 0xdb, 0xec, 0xbf, 0x2c, 0xea, 0x11, 0x98, 0x45, 0x99, 0x4d,
	0xb8, 0xaa, 0x49, 0x1a, 0x8d, 0x52, 0x5b, 0xff, 0x58, 0xaa, 0xb9, 0xbb, 0x54, 0xfa, 0x04, 0xba,
	0x13, 0x31, 0x02, 0xb3, 0x9b, 0xf4, 0x75, 0xcd, 0x4b, 0x9c, 0x36, 0x93, 0x75, 0x24, 0xe6, 0x0b,
	0x88, 0xfe, 0x0f, 0x9c, 0x22, 0xaf, 0xea, 0x9b, 0x7c, 0x3e, 0x5b, 0xba, 0x6d, 0x9c, 0x46, 0x5b,
	0x00, 0xc3, 0xf9, 0x6c, 0xe9, 0x9d, 0x40, 0x17, 0x53, 0x56, 0x01, 0x46, 0x50, 0x0f, 0xac, 0x1c,
	0x6d, 0x57, 0xc3, 0x69, 0x87, 0xcd, 0x57, 0x99, 0xf2, 0x78, 0xd7, 0xb0, 0x2f, 0x01, 0x5e, 0x15,
	0xf9, 0xbc, 0xe2, 0x1f, 0x1c, 0xcf, 0xc7, 0x60, 0x55, 0x8b, 0x09, 0xaf, 0x2a, 0x64, 0xc3, 0x66,
	0xca, 0x12, 0x63, 0xc9, 0xdf, 0xf1, 0xc9, 0xa2, 0xce, 0xf2, 0x39, 0x52, 0xe0, 0xb0, 0x0d, 0xe0,
	0xfd, 0x66, 0x80, 0x89, 0x79, 0x3f, 0xc8, 0xb7, 0x16, 0x40, 0xdf, 0x25, 0x40, 0x63, 0x5a, 0x8d,
	0xed, 0x69, 0x3d, 0x04, 0xbb, 0xaa, 0xcb, 0xb4, 0xe6, 0x3f, 0x2e, 0x91, 0x5e, 0x87, 0xad, 0xed,
	0xa6, 0x6c, 0xe6, 0xfd, 0x66, 0xc9, 0xda, 0x12, 0x68, 0x2d, 0x67, 0xbb, 0x29, 0xe7, 0x23, 0x30,
	0x5f, 0x2f, 0xe6, 0xd3, 0xca, 0xb5, 0x25, 0x8a, 0xc6, 0x5a, 0x4c, 0xe7, 0x23, 0x62, 0x7a, 0xd0,
	0xaa, 0xc5, 0xd1, 0x81, 0xf7, 0xf7, 0xe0, 0xc1, 0x41, 0x9f, 0x10, 0xbc, 0x48, 0x4b, 0x3e, 0xaf,
	0x6f, 0x50, 0x0d, 0xb7, 0x83, 0x3d, 0x75, 0x24, 0x26, 0xe9, 0xf3, 0xa0, 0xcb, 0xdf, 0x15, 0xbc,
	0xc8, 0xca, 0x14, 0x99, 0xee, 0xe2, 0x4c, 0x6c, 0x61, 0xf4, 0x18, 0xac, 0xaa, 0x4e, 0xeb, 0x45,
	0xe5, 0xee, 0x37, 0xce, 0xa9, 0x2c, 0x08, 0x71, 0xa6, 0xfc, 0xde, 0x1f, 0xab, 0x23, 0xaa, 0x2e,
	0x86, 0xf7, 0xc5, 0x69, 0x50, 0xaf, 0x6f, 0x53, 0xbf, 0xf9, 0x86, 0xf1, 0xf1, 0x6f, 0xac, 0x1b,
	0x6f, 0x7d, 0xa4, 0xf1, 0xfb, 0x9c, 0x86, 0xf5, 0xa0, 0x58, 0x3b, 0x06, 0xa5, 0xf7, 0x0a, 0x4c,
	0xb4, 0x69, 0x17, 0xec, 0x53, 0x9f, 0x5d, 0x8e, 0x86, 0xc3, 0x98, 0xec, 0xd1, 0x07, 0xd0, 0x09,
	0x86, 0xd1, 0xa0, 0xef, 0x8f, 0xc3, 0x11, 0x1b, 0x12, 0x8d, 0x76, 0xa0, 0xdd, 0x8f, 0x06, 0xfe,
	0x20, 0x08, 0x89, 0x2e, 0xf6, 0xf6, 0xa3, 0xe4, 0x2c, 0x1a, 0x84, 0x2f, 0x89, 0x41, 0x01, 0xac,
	0x7e, 0x94, 0x5c, 0x85, 0x2f, 0x49, 0x4b, 0xac, 0xcf, 0xc3, 0xab, 0x68, 0x10, 0x11, 0xb3, 0xe7,
	0x81, 0x83, 0xa9, 0xf1, 0xdd, 0xb0, 0xa1, 0x35, 0x1e, 0x0d, 0x13, 0xb2, 0x27, 0x32, 0x9d, 0x5d,
	0x27, 0xd7, 0x2c, 0x1c, 0x13, 0xad, 0xf7, 0x2d, 0x58, 0xe3, 0xe5, 0xdb, 0xdb, 0x7c, 0x46, 0xdb,
	0x60, 0x5c, 0x8f, 0x4f, 0xc9, 0x9e, 0x58, 0xf4, 0x93, 0x80, 0x68, 0x62, 0x11, 0x26, 0x17, 0x44,
	0x47, 0x24, 0xb8, 0x20, 0x86, 0x58, 0xc4, 0x49, 0x40, 0x5a, 0xd2, 0x15, 0x10, 0xb3, 0xf7, 0x33,
	0xb4, 0xd5, 0x74, 0x62, 0x85, 0x49, 0x70, 0x23, 0x93, 0x74, 0xa0, 0x1d, 0x26, 0x17, 0x68, 0x68,
	0x2b, 0x43, 0x64, 0xd5, 0x85, 0x11, 0xab, 0x6d, 0xc6, 0xca, 0xe8, 0x63, 0x52, 0x91, 0x20, 0x90,
	0x31, 0xe6, 0xca, 0x10, 0x1e, 0x4b, 0x26, 0x90, 0x31, 0xed, 0x95, 0x21, 0x3c, 0x76, 0xef, 0x09,
	0x74, 0x1a, 0x77, 0xb9, 0xe8, 0x32, 0x8e, 0x5e, 0x84, 0x64, 0x4f, 0xac, 0x4e, 0xc3, 0xab, 0x21,
	0xd1, 0x7a, 0x9f, 0x80, 0xb3, 0x96, 0x05, 0x5b, 0xb9, 0x7e, 0x25, 0xfd, 0xe3, 0x30, 0x8e, 0x89,
	0xd6, 0x8b, 0x94, 0x1f, 0x13, 0x00, 0x58, 0x57, 0x3e, 0xbb, 0x0c, 0x05, 0x51, 0x0e, 0x98, 0x71,
	0x74, 0x15, 0x25, 0x44, 0xc3, 0xdd, 0xc9, 0x70, 0x44, 0x74, 0xba, 0x0f, 0x8e, 0x58, 0x49, 0x87,
	0x21, 0x94, 0x48, 0x98, 0x1f, 0xc5, 0xd1, 0xe0, 0x9c, 0xb4, 0x7a, 0xbf, 0xac, 0x46, 0x53, 0x8e,
	0x93, 0xf0, 0xb2, 0x30, 0x08, 0xa3, 0x17, 0xa1, 0xe0, 0xa4, 0x0b, 0xb6, 0x1f, 0x04, 0xe1, 0x28,
	0x09, 0x05, 0x29, 0xe8, 0xfb, 0x3e, 0x0c, 0x84, 0x85, 0xac, 0xfc, 0x30, 0x64, 0x97, 0x22, 0x0d,
	0x0a, 0x3a, 0x8a, 0xfd, 0x20, 0x3c, 0x95, 0x82, 0x9e, 0x45, 0x71, 0x1c, 0x0a, 0x4e, 0x1e, 0x01,
	0x19, 0xf9, 0x2c, 0x89, 0xfc, 0x38, 0x7e, 0x75, 0xa3, 0x50, 0x4b, 0x54, 0x14, 0x88, 0xb9, 0x40,
	0x13, 0xe9, 0x09, 0x2e, 0xfc, 0xc1, 0x79, 0x78, 0x4a, 0xec, 0x93, 0x3f, 0x75, 0x30, 0xfc, 0x51,
	0x44, 0x3f, 0x03, 0xe7, 0x9c, 0xcb, 0xd3, 0x58, 0xd1, 0xc6, 0xd8, 0xcb, 0x23, 0x74, 0xd8, 0xb8,
	0x54, 0xbd, 0xbd, 0xcf, 0x35, 0xfa, 0x0d, 0x3c, 0x0c, 0x4a, 0x9e, 0xd6, 0x5c, 0xbe, 0x82, 0xf2,
	0x14, 0x37, 0xc2, 0x24, 0x7c, 0x48, 0x1b, 0x77, 0xb1, 0xba, 0x7a, 0xbd, 0x3d, 0xfa, 0x15, 0x10,
	0x19, 0x8c, 0x8f, 0x95, 0x8c, 0x7d, 0xb0, 0xd9, 0x89, 0xe8, 0x8e, 0xd0, 0xe7, 0xf0, 0x40, 0x86,
	0x8e, 0xeb, 0xbc, 0xf8, 0x57, 0x91, 0x5f, 0x42, 0x57, 0x3e, 0x18, 0xaa, 0xc7, 0x87, 0x9b, 0x5d,
	0xea, 0x25, 0xd9, 0x11, 0xf8, 0x0c, 0x3a, 0xe7, 0xbc, 0x56, 0x33, 0x54, 0x51, 0xda, 0xfc, 0x3d,
	0x50, 0xec, 0x6c, 0xfd, 0x10, 0x0a, 0x7e, 0x6e, 0x2d, 0xfc, 0xb1, 0x7c, 0xf6, 0x77, 0x00, 0x00,
	0x00, 0xff, 0xff, 0x30, 0x95, 0xec, 0xed, 0x65, 0x0a, 0x00, 0x00,
}
