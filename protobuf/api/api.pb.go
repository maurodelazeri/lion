// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api.proto

package api

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Venue int32

const (
	Venue_DARKPOOL    Venue = 0
	Venue_COINBASEPRO Venue = 1
	Venue_BINANCE     Venue = 2
	Venue_BITFINEX    Venue = 3
	Venue_BITMEX      Venue = 4
	Venue_GEMINI      Venue = 5
)

var Venue_name = map[int32]string{
	0: "DARKPOOL",
	1: "COINBASEPRO",
	2: "BINANCE",
	3: "BITFINEX",
	4: "BITMEX",
	5: "GEMINI",
}
var Venue_value = map[string]int32{
	"DARKPOOL":    0,
	"COINBASEPRO": 1,
	"BINANCE":     2,
	"BITFINEX":    3,
	"BITMEX":      4,
	"GEMINI":      5,
}

func (x Venue) String() string {
	return proto.EnumName(Venue_name, int32(x))
}
func (Venue) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_api_95b5a7b92ce95d51, []int{0}
}

type VenueType int32

const (
	VenueType_SPOT    VenueType = 0
	VenueType_FUTURES VenueType = 1
)

var VenueType_name = map[int32]string{
	0: "SPOT",
	1: "FUTURES",
}
var VenueType_value = map[string]int32{
	"SPOT":    0,
	"FUTURES": 1,
}

func (x VenueType) String() string {
	return proto.EnumName(VenueType_name, int32(x))
}
func (VenueType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_api_95b5a7b92ce95d51, []int{1}
}

type Symbol int32

const (
	Symbol_USD Symbol = 0
	Symbol_BTC Symbol = 1
	Symbol_ETH Symbol = 2
	Symbol_BCH Symbol = 3
	Symbol_LTC Symbol = 4
	Symbol_ETC Symbol = 5
)

var Symbol_name = map[int32]string{
	0: "USD",
	1: "BTC",
	2: "ETH",
	3: "BCH",
	4: "LTC",
	5: "ETC",
}
var Symbol_value = map[string]int32{
	"USD": 0,
	"BTC": 1,
	"ETH": 2,
	"BCH": 3,
	"LTC": 4,
	"ETC": 5,
}

func (x Symbol) String() string {
	return proto.EnumName(Symbol_name, int32(x))
}
func (Symbol) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_api_95b5a7b92ce95d51, []int{2}
}

type Product int32

const (
	Product_BTC_USD Product = 0
	Product_ETH_USD Product = 1
	Product_ETH_BTC Product = 2
	Product_LTC_USD Product = 3
	Product_LTC_BTC Product = 4
	Product_BCH_USD Product = 5
	Product_BCH_BTC Product = 6
	Product_ETC_USD Product = 7
	Product_ETC_BTC Product = 8
)

var Product_name = map[int32]string{
	0: "BTC_USD",
	1: "ETH_USD",
	2: "ETH_BTC",
	3: "LTC_USD",
	4: "LTC_BTC",
	5: "BCH_USD",
	6: "BCH_BTC",
	7: "ETC_USD",
	8: "ETC_BTC",
}
var Product_value = map[string]int32{
	"BTC_USD": 0,
	"ETH_USD": 1,
	"ETH_BTC": 2,
	"LTC_USD": 3,
	"LTC_BTC": 4,
	"BCH_USD": 5,
	"BCH_BTC": 6,
	"ETC_USD": 7,
	"ETC_BTC": 8,
}

func (x Product) String() string {
	return proto.EnumName(Product_name, int32(x))
}
func (Product) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_api_95b5a7b92ce95d51, []int{3}
}

type AccountType int32

const (
	AccountType_LIVE  AccountType = 0
	AccountType_HEDGE AccountType = 1
	AccountType_DEMO  AccountType = 2
)

var AccountType_name = map[int32]string{
	0: "LIVE",
	1: "HEDGE",
	2: "DEMO",
}
var AccountType_value = map[string]int32{
	"LIVE":  0,
	"HEDGE": 1,
	"DEMO":  2,
}

func (x AccountType) String() string {
	return proto.EnumName(AccountType_name, int32(x))
}
func (AccountType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_api_95b5a7b92ce95d51, []int{4}
}

type OrderType int32

const (
	OrderType_BUY             OrderType = 0
	OrderType_SELL            OrderType = 1
	OrderType_BUY_LIMIT       OrderType = 2
	OrderType_SELL_LIMIT      OrderType = 3
	OrderType_BUY_STOP        OrderType = 4
	OrderType_SELL_STOP       OrderType = 5
	OrderType_BUY_STOP_LIMIT  OrderType = 6
	OrderType_SELL_STOP_LIMIT OrderType = 7
	OrderType_CLOSING_BY      OrderType = 8
)

var OrderType_name = map[int32]string{
	0: "BUY",
	1: "SELL",
	2: "BUY_LIMIT",
	3: "SELL_LIMIT",
	4: "BUY_STOP",
	5: "SELL_STOP",
	6: "BUY_STOP_LIMIT",
	7: "SELL_STOP_LIMIT",
	8: "CLOSING_BY",
}
var OrderType_value = map[string]int32{
	"BUY":             0,
	"SELL":            1,
	"BUY_LIMIT":       2,
	"SELL_LIMIT":      3,
	"BUY_STOP":        4,
	"SELL_STOP":       5,
	"BUY_STOP_LIMIT":  6,
	"SELL_STOP_LIMIT": 7,
	"CLOSING_BY":      8,
}

func (x OrderType) String() string {
	return proto.EnumName(OrderType_name, int32(x))
}
func (OrderType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_api_95b5a7b92ce95d51, []int{5}
}

type OrderState int32

const (
	OrderState_STARTED        OrderState = 0
	OrderState_PLACED         OrderState = 1
	OrderState_CANCELED       OrderState = 2
	OrderState_PARTIAL        OrderState = 3
	OrderState_FILLED         OrderState = 4
	OrderState_REJECTED       OrderState = 5
	OrderState_EXPIRED        OrderState = 6
	OrderState_REQUEST_ADD    OrderState = 7
	OrderState_REQUEST_MODIFY OrderState = 8
	OrderState_REQUEST_CANCEL OrderState = 9
)

var OrderState_name = map[int32]string{
	0: "STARTED",
	1: "PLACED",
	2: "CANCELED",
	3: "PARTIAL",
	4: "FILLED",
	5: "REJECTED",
	6: "EXPIRED",
	7: "REQUEST_ADD",
	8: "REQUEST_MODIFY",
	9: "REQUEST_CANCEL",
}
var OrderState_value = map[string]int32{
	"STARTED":        0,
	"PLACED":         1,
	"CANCELED":       2,
	"PARTIAL":        3,
	"FILLED":         4,
	"REJECTED":       5,
	"EXPIRED":        6,
	"REQUEST_ADD":    7,
	"REQUEST_MODIFY": 8,
	"REQUEST_CANCEL": 9,
}

func (x OrderState) String() string {
	return proto.EnumName(OrderState_name, int32(x))
}
func (OrderState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_api_95b5a7b92ce95d51, []int{6}
}

type OrderTypeFilling int32

const (
	OrderTypeFilling_FOK    OrderTypeFilling = 0
	OrderTypeFilling_IOC    OrderTypeFilling = 1
	OrderTypeFilling_RETURN OrderTypeFilling = 2
)

var OrderTypeFilling_name = map[int32]string{
	0: "FOK",
	1: "IOC",
	2: "RETURN",
}
var OrderTypeFilling_value = map[string]int32{
	"FOK":    0,
	"IOC":    1,
	"RETURN": 2,
}

func (x OrderTypeFilling) String() string {
	return proto.EnumName(OrderTypeFilling_name, int32(x))
}
func (OrderTypeFilling) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_api_95b5a7b92ce95d51, []int{7}
}

type OrderReason int32

const (
	OrderReason_CLIENT   OrderReason = 0
	OrderReason_MOBILE   OrderReason = 1
	OrderReason_WEB      OrderReason = 2
	OrderReason_STRATEGY OrderReason = 3
	OrderReason_SL       OrderReason = 4
	OrderReason_TP       OrderReason = 5
	OrderReason_SO       OrderReason = 6
)

var OrderReason_name = map[int32]string{
	0: "CLIENT",
	1: "MOBILE",
	2: "WEB",
	3: "STRATEGY",
	4: "SL",
	5: "TP",
	6: "SO",
}
var OrderReason_value = map[string]int32{
	"CLIENT":   0,
	"MOBILE":   1,
	"WEB":      2,
	"STRATEGY": 3,
	"SL":       4,
	"TP":       5,
	"SO":       6,
}

func (x OrderReason) String() string {
	return proto.EnumName(OrderReason_name, int32(x))
}
func (OrderReason) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_api_95b5a7b92ce95d51, []int{8}
}

type OrderTypeTime int32

const (
	OrderTypeTime_ORDER_TIME_GTC           OrderTypeTime = 0
	OrderTypeTime_ORDER_TIME_DAY           OrderTypeTime = 1
	OrderTypeTime_ORDER_TIME_SPECIFIED     OrderTypeTime = 2
	OrderTypeTime_ORDER_TIME_SPECIFIED_DAY OrderTypeTime = 3
)

var OrderTypeTime_name = map[int32]string{
	0: "ORDER_TIME_GTC",
	1: "ORDER_TIME_DAY",
	2: "ORDER_TIME_SPECIFIED",
	3: "ORDER_TIME_SPECIFIED_DAY",
}
var OrderTypeTime_value = map[string]int32{
	"ORDER_TIME_GTC":           0,
	"ORDER_TIME_DAY":           1,
	"ORDER_TIME_SPECIFIED":     2,
	"ORDER_TIME_SPECIFIED_DAY": 3,
}

func (x OrderTypeTime) String() string {
	return proto.EnumName(OrderTypeTime_name, int32(x))
}
func (OrderTypeTime) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_api_95b5a7b92ce95d51, []int{9}
}

type TradeAction int32

const (
	TradeAction_DEAL     TradeAction = 0
	TradeAction_PENDING  TradeAction = 1
	TradeAction_SLTP     TradeAction = 2
	TradeAction_MODIFY   TradeAction = 3
	TradeAction_REMOVE   TradeAction = 4
	TradeAction_CLOSE_BY TradeAction = 5
)

var TradeAction_name = map[int32]string{
	0: "DEAL",
	1: "PENDING",
	2: "SLTP",
	3: "MODIFY",
	4: "REMOVE",
	5: "CLOSE_BY",
}
var TradeAction_value = map[string]int32{
	"DEAL":     0,
	"PENDING":  1,
	"SLTP":     2,
	"MODIFY":   3,
	"REMOVE":   4,
	"CLOSE_BY": 5,
}

func (x TradeAction) String() string {
	return proto.EnumName(TradeAction_name, int32(x))
}
func (TradeAction) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_api_95b5a7b92ce95d51, []int{10}
}

type TradeRetcode int32

const (
	TradeRetcode_REJECTX                 TradeRetcode = 0
	TradeRetcode_REJECT                  TradeRetcode = 2
	TradeRetcode_CANCEL                  TradeRetcode = 3
	TradeRetcode_PLACED_TRADE            TradeRetcode = 4
	TradeRetcode_DONE                    TradeRetcode = 5
	TradeRetcode_DONE_PARTIAL            TradeRetcode = 6
	TradeRetcode_ERROR                   TradeRetcode = 7
	TradeRetcode_TIMEOUT                 TradeRetcode = 8
	TradeRetcode_INVALID                 TradeRetcode = 9
	TradeRetcode_INVALID_VOLUME          TradeRetcode = 10
	TradeRetcode_INVALID_PRICE           TradeRetcode = 11
	TradeRetcode_INVALID_STOPS           TradeRetcode = 12
	TradeRetcode_TRADE_DISABLED          TradeRetcode = 13
	TradeRetcode_MARKET_CLOSED           TradeRetcode = 14
	TradeRetcode_NO_MONEY                TradeRetcode = 15
	TradeRetcode_PRICE_CHANGED           TradeRetcode = 16
	TradeRetcode_PRICE_OFF               TradeRetcode = 17
	TradeRetcode_INVALID_EXPIRATION      TradeRetcode = 18
	TradeRetcode_ORDER_CHANGED           TradeRetcode = 19
	TradeRetcode_TOO_MANY_REQUESTS       TradeRetcode = 21
	TradeRetcode_NO_CHANGES              TradeRetcode = 22
	TradeRetcode_SERVER_DISABLES_AT      TradeRetcode = 23
	TradeRetcode_CLIENT_DISABLES_AT      TradeRetcode = 24
	TradeRetcode_LOCKED                  TradeRetcode = 25
	TradeRetcode_FROZEN                  TradeRetcode = 26
	TradeRetcode_INVALID_FILL            TradeRetcode = 27
	TradeRetcode_CONNECTION              TradeRetcode = 28
	TradeRetcode_ONLY_REAL               TradeRetcode = 29
	TradeRetcode_LIMIT_ORDERS            TradeRetcode = 30
	TradeRetcode_LIMIT_VOLUME            TradeRetcode = 31
	TradeRetcode_INVALID_ORDER           TradeRetcode = 32
	TradeRetcode_POSITION_CLOSED         TradeRetcode = 33
	TradeRetcode_CLOSE_ORDER_EXIST       TradeRetcode = 34
	TradeRetcode_LIMIT_POSITIONS         TradeRetcode = 35
	TradeRetcode_REJECT_CANCEL           TradeRetcode = 36
	TradeRetcode_LONG_ONLY               TradeRetcode = 37
	TradeRetcode_SHORT_ONLY              TradeRetcode = 38
	TradeRetcode_CLOSE_ONLY              TradeRetcode = 39
	TradeRetcode_REQUEST_WITH_NO_TOKEN   TradeRetcode = 40
	TradeRetcode_INVALID_TOKEN           TradeRetcode = 41
	TradeRetcode_INVALID_REQUEST_CONTEXT TradeRetcode = 42
	TradeRetcode_INVALID_REQUEST         TradeRetcode = 43
)

var TradeRetcode_name = map[int32]string{
	0:  "REJECTX",
	2:  "REJECT",
	3:  "CANCEL",
	4:  "PLACED_TRADE",
	5:  "DONE",
	6:  "DONE_PARTIAL",
	7:  "ERROR",
	8:  "TIMEOUT",
	9:  "INVALID",
	10: "INVALID_VOLUME",
	11: "INVALID_PRICE",
	12: "INVALID_STOPS",
	13: "TRADE_DISABLED",
	14: "MARKET_CLOSED",
	15: "NO_MONEY",
	16: "PRICE_CHANGED",
	17: "PRICE_OFF",
	18: "INVALID_EXPIRATION",
	19: "ORDER_CHANGED",
	21: "TOO_MANY_REQUESTS",
	22: "NO_CHANGES",
	23: "SERVER_DISABLES_AT",
	24: "CLIENT_DISABLES_AT",
	25: "LOCKED",
	26: "FROZEN",
	27: "INVALID_FILL",
	28: "CONNECTION",
	29: "ONLY_REAL",
	30: "LIMIT_ORDERS",
	31: "LIMIT_VOLUME",
	32: "INVALID_ORDER",
	33: "POSITION_CLOSED",
	34: "CLOSE_ORDER_EXIST",
	35: "LIMIT_POSITIONS",
	36: "REJECT_CANCEL",
	37: "LONG_ONLY",
	38: "SHORT_ONLY",
	39: "CLOSE_ONLY",
	40: "REQUEST_WITH_NO_TOKEN",
	41: "INVALID_TOKEN",
	42: "INVALID_REQUEST_CONTEXT",
	43: "INVALID_REQUEST",
}
var TradeRetcode_value = map[string]int32{
	"REJECTX":                 0,
	"REJECT":                  2,
	"CANCEL":                  3,
	"PLACED_TRADE":            4,
	"DONE":                    5,
	"DONE_PARTIAL":            6,
	"ERROR":                   7,
	"TIMEOUT":                 8,
	"INVALID":                 9,
	"INVALID_VOLUME":          10,
	"INVALID_PRICE":           11,
	"INVALID_STOPS":           12,
	"TRADE_DISABLED":          13,
	"MARKET_CLOSED":           14,
	"NO_MONEY":                15,
	"PRICE_CHANGED":           16,
	"PRICE_OFF":               17,
	"INVALID_EXPIRATION":      18,
	"ORDER_CHANGED":           19,
	"TOO_MANY_REQUESTS":       21,
	"NO_CHANGES":              22,
	"SERVER_DISABLES_AT":      23,
	"CLIENT_DISABLES_AT":      24,
	"LOCKED":                  25,
	"FROZEN":                  26,
	"INVALID_FILL":            27,
	"CONNECTION":              28,
	"ONLY_REAL":               29,
	"LIMIT_ORDERS":            30,
	"LIMIT_VOLUME":            31,
	"INVALID_ORDER":           32,
	"POSITION_CLOSED":         33,
	"CLOSE_ORDER_EXIST":       34,
	"LIMIT_POSITIONS":         35,
	"REJECT_CANCEL":           36,
	"LONG_ONLY":               37,
	"SHORT_ONLY":              38,
	"CLOSE_ONLY":              39,
	"REQUEST_WITH_NO_TOKEN":   40,
	"INVALID_TOKEN":           41,
	"INVALID_REQUEST_CONTEXT": 42,
	"INVALID_REQUEST":         43,
}

func (x TradeRetcode) String() string {
	return proto.EnumName(TradeRetcode_name, int32(x))
}
func (TradeRetcode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_api_95b5a7b92ce95d51, []int{11}
}

type TradeRequest struct {
	Action               TradeAction      `protobuf:"varint,1,opt,name=action,proto3,enum=api.TradeAction" json:"action,omitempty"`
	Venue                Venue            `protobuf:"varint,2,opt,name=venue,proto3,enum=api.Venue" json:"venue,omitempty"`
	Product              Product          `protobuf:"varint,3,opt,name=product,proto3,enum=api.Product" json:"product,omitempty"`
	Magic                uint64           `protobuf:"varint,4,opt,name=magic,proto3" json:"magic,omitempty"`
	Order                uint64           `protobuf:"varint,5,opt,name=order,proto3" json:"order,omitempty"`
	Symbol               string           `protobuf:"bytes,6,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Volume               float64          `protobuf:"fixed64,7,opt,name=volume,proto3" json:"volume,omitempty"`
	Price                float64          `protobuf:"fixed64,8,opt,name=price,proto3" json:"price,omitempty"`
	Stoplimit            float64          `protobuf:"fixed64,9,opt,name=stoplimit,proto3" json:"stoplimit,omitempty"`
	Sl                   float64          `protobuf:"fixed64,10,opt,name=sl,proto3" json:"sl,omitempty"`
	Tp                   float64          `protobuf:"fixed64,11,opt,name=tp,proto3" json:"tp,omitempty"`
	Deviation            uint64           `protobuf:"varint,12,opt,name=deviation,proto3" json:"deviation,omitempty"`
	Type                 OrderType        `protobuf:"varint,13,opt,name=type,proto3,enum=api.OrderType" json:"type,omitempty"`
	TypeFilling          OrderTypeFilling `protobuf:"varint,14,opt,name=type_filling,json=typeFilling,proto3,enum=api.OrderTypeFilling" json:"type_filling,omitempty"`
	TypeTime             OrderTypeTime    `protobuf:"varint,15,opt,name=type_time,json=typeTime,proto3,enum=api.OrderTypeTime" json:"type_time,omitempty"`
	Expiration           uint64           `protobuf:"varint,16,opt,name=expiration,proto3" json:"expiration,omitempty"`
	Comment              string           `protobuf:"bytes,17,opt,name=comment,proto3" json:"comment,omitempty"`
	Position             uint64           `protobuf:"varint,18,opt,name=position,proto3" json:"position,omitempty"`
	PositionBy           uint64           `protobuf:"varint,19,opt,name=position_by,json=positionBy,proto3" json:"position_by,omitempty"`
	Async                bool             `protobuf:"varint,20,opt,name=async,proto3" json:"async,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *TradeRequest) Reset()         { *m = TradeRequest{} }
func (m *TradeRequest) String() string { return proto.CompactTextString(m) }
func (*TradeRequest) ProtoMessage()    {}
func (*TradeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_95b5a7b92ce95d51, []int{0}
}
func (m *TradeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TradeRequest.Unmarshal(m, b)
}
func (m *TradeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TradeRequest.Marshal(b, m, deterministic)
}
func (dst *TradeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TradeRequest.Merge(dst, src)
}
func (m *TradeRequest) XXX_Size() int {
	return xxx_messageInfo_TradeRequest.Size(m)
}
func (m *TradeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TradeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TradeRequest proto.InternalMessageInfo

func (m *TradeRequest) GetAction() TradeAction {
	if m != nil {
		return m.Action
	}
	return TradeAction_DEAL
}

func (m *TradeRequest) GetVenue() Venue {
	if m != nil {
		return m.Venue
	}
	return Venue_DARKPOOL
}

func (m *TradeRequest) GetProduct() Product {
	if m != nil {
		return m.Product
	}
	return Product_BTC_USD
}

func (m *TradeRequest) GetMagic() uint64 {
	if m != nil {
		return m.Magic
	}
	return 0
}

func (m *TradeRequest) GetOrder() uint64 {
	if m != nil {
		return m.Order
	}
	return 0
}

func (m *TradeRequest) GetSymbol() string {
	if m != nil {
		return m.Symbol
	}
	return ""
}

func (m *TradeRequest) GetVolume() float64 {
	if m != nil {
		return m.Volume
	}
	return 0
}

func (m *TradeRequest) GetPrice() float64 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *TradeRequest) GetStoplimit() float64 {
	if m != nil {
		return m.Stoplimit
	}
	return 0
}

func (m *TradeRequest) GetSl() float64 {
	if m != nil {
		return m.Sl
	}
	return 0
}

func (m *TradeRequest) GetTp() float64 {
	if m != nil {
		return m.Tp
	}
	return 0
}

func (m *TradeRequest) GetDeviation() uint64 {
	if m != nil {
		return m.Deviation
	}
	return 0
}

func (m *TradeRequest) GetType() OrderType {
	if m != nil {
		return m.Type
	}
	return OrderType_BUY
}

func (m *TradeRequest) GetTypeFilling() OrderTypeFilling {
	if m != nil {
		return m.TypeFilling
	}
	return OrderTypeFilling_FOK
}

func (m *TradeRequest) GetTypeTime() OrderTypeTime {
	if m != nil {
		return m.TypeTime
	}
	return OrderTypeTime_ORDER_TIME_GTC
}

func (m *TradeRequest) GetExpiration() uint64 {
	if m != nil {
		return m.Expiration
	}
	return 0
}

func (m *TradeRequest) GetComment() string {
	if m != nil {
		return m.Comment
	}
	return ""
}

func (m *TradeRequest) GetPosition() uint64 {
	if m != nil {
		return m.Position
	}
	return 0
}

func (m *TradeRequest) GetPositionBy() uint64 {
	if m != nil {
		return m.PositionBy
	}
	return 0
}

func (m *TradeRequest) GetAsync() bool {
	if m != nil {
		return m.Async
	}
	return false
}

type TradeResult struct {
	Retcode              TradeRetcode `protobuf:"varint,1,opt,name=retcode,proto3,enum=api.TradeRetcode" json:"retcode,omitempty"`
	Deal                 uint64       `protobuf:"varint,2,opt,name=deal,proto3" json:"deal,omitempty"`
	Venue                Venue        `protobuf:"varint,3,opt,name=venue,proto3,enum=api.Venue" json:"venue,omitempty"`
	Product              Product      `protobuf:"varint,4,opt,name=product,proto3,enum=api.Product" json:"product,omitempty"`
	Order                uint64       `protobuf:"varint,5,opt,name=order,proto3" json:"order,omitempty"`
	Volume               float64      `protobuf:"fixed64,6,opt,name=volume,proto3" json:"volume,omitempty"`
	Price                float64      `protobuf:"fixed64,7,opt,name=price,proto3" json:"price,omitempty"`
	Comment              string       `protobuf:"bytes,8,opt,name=comment,proto3" json:"comment,omitempty"`
	RequestId            uint64       `protobuf:"varint,9,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	RetcodeExternal      uint64       `protobuf:"varint,10,opt,name=retcode_external,json=retcodeExternal,proto3" json:"retcode_external,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *TradeResult) Reset()         { *m = TradeResult{} }
func (m *TradeResult) String() string { return proto.CompactTextString(m) }
func (*TradeResult) ProtoMessage()    {}
func (*TradeResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_95b5a7b92ce95d51, []int{1}
}
func (m *TradeResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TradeResult.Unmarshal(m, b)
}
func (m *TradeResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TradeResult.Marshal(b, m, deterministic)
}
func (dst *TradeResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TradeResult.Merge(dst, src)
}
func (m *TradeResult) XXX_Size() int {
	return xxx_messageInfo_TradeResult.Size(m)
}
func (m *TradeResult) XXX_DiscardUnknown() {
	xxx_messageInfo_TradeResult.DiscardUnknown(m)
}

var xxx_messageInfo_TradeResult proto.InternalMessageInfo

func (m *TradeResult) GetRetcode() TradeRetcode {
	if m != nil {
		return m.Retcode
	}
	return TradeRetcode_REJECTX
}

func (m *TradeResult) GetDeal() uint64 {
	if m != nil {
		return m.Deal
	}
	return 0
}

func (m *TradeResult) GetVenue() Venue {
	if m != nil {
		return m.Venue
	}
	return Venue_DARKPOOL
}

func (m *TradeResult) GetProduct() Product {
	if m != nil {
		return m.Product
	}
	return Product_BTC_USD
}

func (m *TradeResult) GetOrder() uint64 {
	if m != nil {
		return m.Order
	}
	return 0
}

func (m *TradeResult) GetVolume() float64 {
	if m != nil {
		return m.Volume
	}
	return 0
}

func (m *TradeResult) GetPrice() float64 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *TradeResult) GetComment() string {
	if m != nil {
		return m.Comment
	}
	return ""
}

func (m *TradeResult) GetRequestId() uint64 {
	if m != nil {
		return m.RequestId
	}
	return 0
}

func (m *TradeResult) GetRetcodeExternal() uint64 {
	if m != nil {
		return m.RetcodeExternal
	}
	return 0
}

type User struct {
	Id                   string     `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Accounts             []*Account `protobuf:"bytes,2,rep,name=accounts,proto3" json:"accounts,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *User) Reset()         { *m = User{} }
func (m *User) String() string { return proto.CompactTextString(m) }
func (*User) ProtoMessage()    {}
func (*User) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_95b5a7b92ce95d51, []int{2}
}
func (m *User) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_User.Unmarshal(m, b)
}
func (m *User) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_User.Marshal(b, m, deterministic)
}
func (dst *User) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User.Merge(dst, src)
}
func (m *User) XXX_Size() int {
	return xxx_messageInfo_User.Size(m)
}
func (m *User) XXX_DiscardUnknown() {
	xxx_messageInfo_User.DiscardUnknown(m)
}

var xxx_messageInfo_User proto.InternalMessageInfo

func (m *User) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *User) GetAccounts() []*Account {
	if m != nil {
		return m.Accounts
	}
	return nil
}

type Account struct {
	Id                   string              `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	User                 string              `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
	Venue                Venue               `protobuf:"varint,3,opt,name=venue,proto3,enum=api.Venue" json:"venue,omitempty"`
	AccountType          AccountType         `protobuf:"varint,4,opt,name=account_type,json=accountType,proto3,enum=api.AccountType" json:"account_type,omitempty"`
	Balances             map[string]*Balance `protobuf:"bytes,5,rep,name=balances,proto3" json:"balances,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Active               bool                `protobuf:"varint,6,opt,name=active,proto3" json:"active,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *Account) Reset()         { *m = Account{} }
func (m *Account) String() string { return proto.CompactTextString(m) }
func (*Account) ProtoMessage()    {}
func (*Account) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_95b5a7b92ce95d51, []int{3}
}
func (m *Account) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Account.Unmarshal(m, b)
}
func (m *Account) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Account.Marshal(b, m, deterministic)
}
func (dst *Account) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Account.Merge(dst, src)
}
func (m *Account) XXX_Size() int {
	return xxx_messageInfo_Account.Size(m)
}
func (m *Account) XXX_DiscardUnknown() {
	xxx_messageInfo_Account.DiscardUnknown(m)
}

var xxx_messageInfo_Account proto.InternalMessageInfo

func (m *Account) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Account) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func (m *Account) GetVenue() Venue {
	if m != nil {
		return m.Venue
	}
	return Venue_DARKPOOL
}

func (m *Account) GetAccountType() AccountType {
	if m != nil {
		return m.AccountType
	}
	return AccountType_LIVE
}

func (m *Account) GetBalances() map[string]*Balance {
	if m != nil {
		return m.Balances
	}
	return nil
}

func (m *Account) GetActive() bool {
	if m != nil {
		return m.Active
	}
	return false
}

type Balance struct {
	Id                   float64  `protobuf:"fixed64,1,opt,name=id,proto3" json:"id,omitempty"`
	Available            float64  `protobuf:"fixed64,2,opt,name=available,proto3" json:"available,omitempty"`
	Hold                 float64  `protobuf:"fixed64,3,opt,name=hold,proto3" json:"hold,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Balance) Reset()         { *m = Balance{} }
func (m *Balance) String() string { return proto.CompactTextString(m) }
func (*Balance) ProtoMessage()    {}
func (*Balance) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_95b5a7b92ce95d51, []int{4}
}
func (m *Balance) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Balance.Unmarshal(m, b)
}
func (m *Balance) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Balance.Marshal(b, m, deterministic)
}
func (dst *Balance) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Balance.Merge(dst, src)
}
func (m *Balance) XXX_Size() int {
	return xxx_messageInfo_Balance.Size(m)
}
func (m *Balance) XXX_DiscardUnknown() {
	xxx_messageInfo_Balance.DiscardUnknown(m)
}

var xxx_messageInfo_Balance proto.InternalMessageInfo

func (m *Balance) GetId() float64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Balance) GetAvailable() float64 {
	if m != nil {
		return m.Available
	}
	return 0
}

func (m *Balance) GetHold() float64 {
	if m != nil {
		return m.Hold
	}
	return 0
}

func init() {
	proto.RegisterType((*TradeRequest)(nil), "api.TradeRequest")
	proto.RegisterType((*TradeResult)(nil), "api.TradeResult")
	proto.RegisterType((*User)(nil), "api.User")
	proto.RegisterType((*Account)(nil), "api.Account")
	proto.RegisterMapType((map[string]*Balance)(nil), "api.Account.BalancesEntry")
	proto.RegisterType((*Balance)(nil), "api.Balance")
	proto.RegisterEnum("api.Venue", Venue_name, Venue_value)
	proto.RegisterEnum("api.VenueType", VenueType_name, VenueType_value)
	proto.RegisterEnum("api.Symbol", Symbol_name, Symbol_value)
	proto.RegisterEnum("api.Product", Product_name, Product_value)
	proto.RegisterEnum("api.AccountType", AccountType_name, AccountType_value)
	proto.RegisterEnum("api.OrderType", OrderType_name, OrderType_value)
	proto.RegisterEnum("api.OrderState", OrderState_name, OrderState_value)
	proto.RegisterEnum("api.OrderTypeFilling", OrderTypeFilling_name, OrderTypeFilling_value)
	proto.RegisterEnum("api.OrderReason", OrderReason_name, OrderReason_value)
	proto.RegisterEnum("api.OrderTypeTime", OrderTypeTime_name, OrderTypeTime_value)
	proto.RegisterEnum("api.TradeAction", TradeAction_name, TradeAction_value)
	proto.RegisterEnum("api.TradeRetcode", TradeRetcode_name, TradeRetcode_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// APIClient is the client API for API service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type APIClient interface {
	// Get all Order for a user with filter - A server-to-client streaming RPC.
	// rpc GetOrders(OrderFilter) returns (stream Order) {}
	// Order request - A simple RPC
	OrderSend(ctx context.Context, in *TradeRequest, opts ...grpc.CallOption) (*TradeResult, error)
}

type aPIClient struct {
	cc *grpc.ClientConn
}

func NewAPIClient(cc *grpc.ClientConn) APIClient {
	return &aPIClient{cc}
}

func (c *aPIClient) OrderSend(ctx context.Context, in *TradeRequest, opts ...grpc.CallOption) (*TradeResult, error) {
	out := new(TradeResult)
	err := c.cc.Invoke(ctx, "/api.API/OrderSend", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// APIServer is the server API for API service.
type APIServer interface {
	// Get all Order for a user with filter - A server-to-client streaming RPC.
	// rpc GetOrders(OrderFilter) returns (stream Order) {}
	// Order request - A simple RPC
	OrderSend(context.Context, *TradeRequest) (*TradeResult, error)
}

func RegisterAPIServer(s *grpc.Server, srv APIServer) {
	s.RegisterService(&_API_serviceDesc, srv)
}

func _API_OrderSend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TradeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).OrderSend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.API/OrderSend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).OrderSend(ctx, req.(*TradeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _API_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.API",
	HandlerType: (*APIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "OrderSend",
			Handler:    _API_OrderSend_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

func init() { proto.RegisterFile("api.proto", fileDescriptor_api_95b5a7b92ce95d51) }

var fileDescriptor_api_95b5a7b92ce95d51 = []byte{
	// 1625 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x57, 0xdd, 0x72, 0xeb, 0x48,
	0x11, 0x8e, 0x6c, 0xf9, 0xaf, 0xed, 0x24, 0x9d, 0x39, 0x3f, 0xab, 0xcd, 0x9e, 0xdd, 0x0d, 0x06,
	0x16, 0xaf, 0x97, 0x3a, 0x50, 0x67, 0xab, 0xa8, 0x85, 0x0b, 0x0a, 0x59, 0x1e, 0x27, 0x22, 0xb2,
	0xc6, 0x8c, 0xc6, 0xd9, 0x98, 0x1b, 0x95, 0x62, 0x8b, 0x45, 0x85, 0x63, 0x1b, 0x5b, 0x49, 0x6d,
	0x6e, 0x78, 0x09, 0x1e, 0x00, 0x1e, 0x85, 0x07, 0xe2, 0x11, 0xb8, 0xa0, 0x7a, 0x46, 0x4a, 0x9c,
	0xc3, 0xa9, 0x62, 0xaf, 0x3c, 0xfd, 0xf5, 0x8f, 0xba, 0xbf, 0xf9, 0x66, 0x24, 0x43, 0x2b, 0xd9,
	0x64, 0x6f, 0x37, 0xdb, 0x75, 0xbe, 0x66, 0xd5, 0x64, 0x93, 0x75, 0xff, 0x6d, 0x43, 0x47, 0x6d,
	0x93, 0x45, 0x2a, 0xd3, 0xbf, 0xde, 0xa5, 0xbb, 0x9c, 0xf5, 0xa0, 0x9e, 0xcc, 0xf3, 0x6c, 0xbd,
	0x72, 0xac, 0x33, 0xab, 0x77, 0xf4, 0x0e, 0xdf, 0x52, 0x86, 0x0e, 0x71, 0x35, 0x2e, 0x0b, 0x3f,
	0x3b, 0x83, 0xda, 0x7d, 0xba, 0xba, 0x4b, 0x9d, 0x8a, 0x0e, 0x04, 0x1d, 0x78, 0x45, 0x88, 0x34,
	0x0e, 0xf6, 0x05, 0x34, 0x36, 0xdb, 0xf5, 0xe2, 0x6e, 0x9e, 0x3b, 0x55, 0x1d, 0xd3, 0xd1, 0x31,
	0x13, 0x83, 0xc9, 0xd2, 0xc9, 0x5e, 0x42, 0xed, 0x36, 0xf9, 0x2e, 0x9b, 0x3b, 0xf6, 0x99, 0xd5,
	0xb3, 0xa5, 0x31, 0x08, 0x5d, 0x6f, 0x17, 0xe9, 0xd6, 0xa9, 0x19, 0x54, 0x1b, 0xec, 0x35, 0xd4,
	0x77, 0x0f, 0xb7, 0x37, 0xeb, 0xa5, 0x53, 0x3f, 0xb3, 0x7a, 0x2d, 0x59, 0x58, 0x84, 0xdf, 0xaf,
	0x97, 0x77, 0xb7, 0xa9, 0xd3, 0x38, 0xb3, 0x7a, 0x96, 0x2c, 0x2c, 0xaa, 0xb2, 0xd9, 0x66, 0xf3,
	0xd4, 0x69, 0x6a, 0xd8, 0x18, 0xec, 0x0d, 0xb4, 0x76, 0xf9, 0x7a, 0xb3, 0xcc, 0x6e, 0xb3, 0xdc,
	0x69, 0x69, 0xcf, 0x13, 0xc0, 0x8e, 0xa0, 0xb2, 0x5b, 0x3a, 0xa0, 0xe1, 0xca, 0x6e, 0x49, 0x76,
	0xbe, 0x71, 0xda, 0xc6, 0xce, 0x37, 0x94, 0xbd, 0x48, 0xef, 0xb3, 0x44, 0xd3, 0xd4, 0xd1, 0xdd,
	0x3d, 0x01, 0xac, 0x0b, 0x76, 0xfe, 0xb0, 0x49, 0x9d, 0x43, 0x3d, 0xf2, 0x91, 0x1e, 0x59, 0x50,
	0xef, 0xea, 0x61, 0x93, 0x4a, 0xed, 0x63, 0xdf, 0x40, 0x87, 0x7e, 0xe3, 0x3f, 0x65, 0xcb, 0x65,
	0xb6, 0xfa, 0xce, 0x39, 0xd2, 0xb1, 0xaf, 0x9e, 0xc7, 0x8e, 0x8c, 0x53, 0xb6, 0xf3, 0x27, 0x83,
	0xfd, 0x02, 0x5a, 0x3a, 0x33, 0xcf, 0x6e, 0x53, 0xe7, 0x58, 0xa7, 0xb1, 0xe7, 0x69, 0x2a, 0xbb,
	0x4d, 0x65, 0x33, 0x2f, 0x56, 0xec, 0x33, 0x80, 0xf4, 0xfb, 0x4d, 0xb6, 0x35, 0xdd, 0xa2, 0xee,
	0x76, 0x0f, 0x61, 0x0e, 0x34, 0xe6, 0xeb, 0xdb, 0xdb, 0x74, 0x95, 0x3b, 0x27, 0x9a, 0xd1, 0xd2,
	0x64, 0xa7, 0xd0, 0xdc, 0xac, 0x77, 0x99, 0xce, 0x63, 0x3a, 0xef, 0xd1, 0x66, 0x9f, 0x43, 0xbb,
	0x5c, 0xc7, 0x37, 0x0f, 0xce, 0x0b, 0x53, 0xb6, 0x84, 0x06, 0x0f, 0xc4, 0x7b, 0xb2, 0x7b, 0x58,
	0xcd, 0x9d, 0x97, 0x67, 0x56, 0xaf, 0x29, 0x8d, 0xd1, 0xfd, 0x57, 0x05, 0xda, 0x85, 0xdc, 0x76,
	0x77, 0xcb, 0x9c, 0x7d, 0x05, 0x8d, 0x6d, 0x9a, 0xcf, 0xd7, 0x8b, 0xb4, 0x90, 0xdb, 0xc9, 0x93,
	0xdc, 0xa4, 0x71, 0xc8, 0x32, 0x82, 0x31, 0xb0, 0x17, 0x69, 0xb2, 0xd4, 0x7a, 0xb3, 0xa5, 0x5e,
	0x3f, 0x89, 0xb0, 0xfa, 0x03, 0x44, 0x68, 0xff, 0x1f, 0x11, 0x7e, 0x58, 0x6e, 0x85, 0xac, 0xea,
	0x1f, 0x96, 0x55, 0x63, 0x5f, 0x56, 0x7b, 0x5c, 0x36, 0x9f, 0x73, 0xf9, 0x29, 0xc0, 0xd6, 0x9c,
	0xb0, 0x38, 0x5b, 0x68, 0xc5, 0xd9, 0xb2, 0x55, 0x20, 0xfe, 0x82, 0x7d, 0x09, 0x58, 0x4c, 0x19,
	0xa7, 0xdf, 0xe7, 0xe9, 0x76, 0x95, 0x18, 0xfd, 0xd9, 0xf2, 0xb8, 0xc0, 0x79, 0x01, 0x77, 0x7f,
	0x07, 0xf6, 0x74, 0x97, 0x6e, 0x49, 0x94, 0xd9, 0x42, 0xb3, 0xd6, 0x92, 0x95, 0x6c, 0xc1, 0x7a,
	0xd0, 0x4c, 0xe6, 0xf3, 0xf5, 0xdd, 0x2a, 0xdf, 0x39, 0x95, 0xb3, 0x6a, 0xaf, 0x5d, 0x0c, 0xea,
	0x1a, 0x50, 0x3e, 0x7a, 0xbb, 0xff, 0xa8, 0x40, 0xa3, 0x40, 0xff, 0xa7, 0x0a, 0x03, 0xfb, 0x6e,
	0x97, 0x6e, 0x35, 0xc7, 0x2d, 0xa9, 0xd7, 0x3f, 0x80, 0xe3, 0xaf, 0xa1, 0x53, 0x54, 0x8f, 0xb5,
	0xf4, 0xed, 0xbd, 0xab, 0xa3, 0x78, 0x92, 0x16, 0x7f, 0x3b, 0x79, 0x32, 0xd8, 0xaf, 0xa0, 0x79,
	0x93, 0x2c, 0x93, 0xd5, 0x3c, 0xdd, 0x39, 0x35, 0xdd, 0xf0, 0xe9, 0x7e, 0xc2, 0xdb, 0x41, 0xe1,
	0xe4, 0xab, 0x7c, 0xfb, 0x20, 0x1f, 0x63, 0x69, 0x4b, 0xe8, 0x06, 0xba, 0x37, 0x5b, 0xd2, 0x94,
	0x85, 0x75, 0xea, 0xc3, 0xe1, 0xb3, 0x14, 0x86, 0x50, 0xfd, 0x4b, 0xfa, 0x50, 0x0c, 0x47, 0x4b,
	0xd6, 0x85, 0xda, 0x7d, 0xb2, 0x2c, 0xae, 0xac, 0x92, 0xa0, 0x22, 0x49, 0x1a, 0xd7, 0x6f, 0x2a,
	0xdf, 0x58, 0xdd, 0x4b, 0x68, 0x14, 0xe8, 0x1e, 0x41, 0x96, 0x26, 0xe8, 0x0d, 0xb4, 0x92, 0xfb,
	0x24, 0x5b, 0x26, 0x37, 0x4b, 0x53, 0xc6, 0x92, 0x4f, 0x00, 0xd1, 0xf7, 0xe7, 0xf5, 0x72, 0xa1,
	0x99, 0xb2, 0xa4, 0x5e, 0xf7, 0x67, 0x50, 0xd3, 0x64, 0xb1, 0x0e, 0x34, 0x87, 0xae, 0xbc, 0x9c,
	0x08, 0x11, 0xe0, 0x01, 0x3b, 0x86, 0xb6, 0x27, 0xfc, 0x70, 0xe0, 0x46, 0x7c, 0x22, 0x05, 0x5a,
	0xac, 0x0d, 0x8d, 0x81, 0x1f, 0xba, 0xa1, 0xc7, 0xb1, 0x42, 0xb1, 0x03, 0x5f, 0x8d, 0xfc, 0x90,
	0x5f, 0x63, 0x95, 0x01, 0xd4, 0x07, 0xbe, 0x1a, 0xf3, 0x6b, 0xb4, 0x69, 0x7d, 0xce, 0xc7, 0x7e,
	0xe8, 0x63, 0xad, 0xdf, 0x85, 0x96, 0x2e, 0xad, 0xf9, 0x6c, 0x82, 0x1d, 0x4d, 0x84, 0xc2, 0x03,
	0xaa, 0x34, 0x9a, 0xaa, 0xa9, 0xe4, 0x11, 0x5a, 0xfd, 0xdf, 0x42, 0x3d, 0x32, 0x57, 0x64, 0x03,
	0xaa, 0xd3, 0x68, 0x88, 0x07, 0xb4, 0x18, 0x28, 0x0f, 0x2d, 0x5a, 0x70, 0x75, 0x81, 0x15, 0x8d,
	0x78, 0x17, 0x58, 0xa5, 0x45, 0xa0, 0x3c, 0xb4, 0x8d, 0xcb, 0xc3, 0x5a, 0xff, 0x6f, 0xd0, 0x28,
	0xce, 0x8a, 0xee, 0x50, 0x79, 0xb1, 0x29, 0xd2, 0x86, 0x06, 0x57, 0x17, 0xda, 0xb0, 0x4a, 0x83,
	0xaa, 0x56, 0xc8, 0x08, 0x8a, 0xb0, 0x6a, 0x69, 0x0c, 0x74, 0x51, 0x2a, 0xe0, 0x99, 0x9c, 0x5a,
	0x69, 0x90, 0xa7, 0x6e, 0x0a, 0x98, 0x9c, 0x46, 0x69, 0x90, 0xa7, 0xd9, 0xff, 0x39, 0xb4, 0xf7,
	0x24, 0x44, 0x53, 0x06, 0xfe, 0x15, 0xc7, 0x03, 0xd6, 0x82, 0xda, 0x05, 0x1f, 0x9e, 0x73, 0xb4,
	0x08, 0x1c, 0xf2, 0xb1, 0xc0, 0x4a, 0xff, 0xef, 0x16, 0xb4, 0x1e, 0x6f, 0x42, 0x3d, 0xd6, 0x74,
	0x86, 0x07, 0x9a, 0x1b, 0x1e, 0x04, 0x68, 0xb1, 0x43, 0x68, 0x0d, 0xa6, 0xb3, 0x38, 0xf0, 0xc7,
	0xbe, 0xc2, 0x0a, 0x3b, 0x02, 0x20, 0x47, 0x61, 0x57, 0x35, 0xef, 0xd3, 0x59, 0x1c, 0x29, 0x31,
	0x41, 0x9b, 0x82, 0xb5, 0x57, 0x9b, 0x35, 0xc6, 0xe0, 0xa8, 0x74, 0x16, 0x09, 0x75, 0xf6, 0x02,
	0x8e, 0x1f, 0x43, 0x0a, 0xb0, 0x41, 0x55, 0xbd, 0x40, 0x44, 0x7e, 0x78, 0x1e, 0x0f, 0x66, 0xd8,
	0xec, 0xff, 0xd3, 0x02, 0xd0, 0x5d, 0x45, 0x79, 0x92, 0xa7, 0x34, 0x5f, 0xa4, 0x5c, 0xa9, 0x38,
	0xf1, 0x08, 0x50, 0x9f, 0x04, 0xae, 0xc7, 0x89, 0xc6, 0x0e, 0x34, 0x3d, 0x12, 0x40, 0xc0, 0x87,
	0x86, 0xc7, 0x89, 0x2b, 0x95, 0xef, 0x06, 0x46, 0x02, 0x23, 0x3f, 0x20, 0x87, 0x4d, 0x61, 0x92,
	0xff, 0x9e, 0x7b, 0x54, 0x40, 0xf3, 0xc8, 0xaf, 0x27, 0xbe, 0xe4, 0x43, 0xac, 0x93, 0xaa, 0x24,
	0xff, 0xc3, 0x94, 0x47, 0x2a, 0x76, 0x87, 0xc4, 0x25, 0x83, 0xa3, 0x12, 0x18, 0x8b, 0xa1, 0x3f,
	0x9a, 0x61, 0x73, 0x1f, 0x33, 0x8f, 0xc3, 0x56, 0xff, 0x97, 0x80, 0xef, 0xbf, 0x78, 0x88, 0xbe,
	0x91, 0xb8, 0x34, 0x82, 0xf1, 0x05, 0x09, 0x06, 0xa0, 0x2e, 0xb9, 0x9a, 0xca, 0x10, 0x2b, 0x7d,
	0x05, 0x6d, 0x9d, 0x21, 0xd3, 0x64, 0xb7, 0x5e, 0x91, 0xcb, 0x0b, 0x7c, 0x1e, 0x2a, 0x33, 0xd3,
	0x58, 0x0c, 0xfc, 0x80, 0x1b, 0x8d, 0x7d, 0xcb, 0x07, 0x46, 0xd2, 0x91, 0x92, 0xae, 0xe2, 0xe7,
	0x33, 0xac, 0xb2, 0x3a, 0x54, 0xa2, 0x00, 0x6d, 0xfa, 0x55, 0xc4, 0x2d, 0xd9, 0x02, 0xeb, 0xfd,
	0x35, 0x1c, 0x3e, 0x7b, 0x93, 0x51, 0xb3, 0x42, 0x0e, 0xb9, 0x8c, 0x95, 0x3f, 0xe6, 0xf1, 0xb9,
	0xf2, 0xf0, 0xe0, 0x3d, 0x6c, 0xe8, 0xce, 0xd0, 0x62, 0x0e, 0xbc, 0xdc, 0xc3, 0xa2, 0x09, 0xf7,
	0xfc, 0x91, 0xaf, 0x79, 0x7c, 0x03, 0xce, 0x87, 0x3c, 0x3a, 0xaf, 0x4a, 0x63, 0xec, 0x7d, 0xdd,
	0x18, 0x29, 0xb9, 0x81, 0x11, 0xf8, 0x84, 0x87, 0x43, 0x3f, 0x3c, 0x37, 0x0a, 0x8b, 0x02, 0x35,
	0xc1, 0x8a, 0x99, 0x4d, 0x13, 0x59, 0x35, 0x74, 0x8c, 0xc5, 0x15, 0x37, 0x9b, 0x42, 0x7b, 0xce,
	0x69, 0xc7, 0x6b, 0xfd, 0xff, 0xd4, 0x1e, 0xbf, 0xab, 0xcc, 0xcb, 0xab, 0x0d, 0x0d, 0xb3, 0x67,
	0xd7, 0x86, 0x1f, 0x63, 0x98, 0x7a, 0xc5, 0x26, 0x54, 0x19, 0x42, 0xc7, 0x68, 0x21, 0x56, 0xd2,
	0x1d, 0x52, 0x55, 0x6a, 0x47, 0x84, 0x1c, 0x6b, 0xe4, 0xa3, 0x55, 0x5c, 0x4a, 0xa2, 0x4e, 0x07,
	0x80, 0x4b, 0x29, 0xa4, 0x39, 0x31, 0x34, 0x9c, 0x98, 0x2a, 0x6c, 0x92, 0xe1, 0x87, 0x57, 0x6e,
	0xe0, 0x0f, 0xb1, 0x45, 0x54, 0x15, 0x46, 0x7c, 0x25, 0x82, 0xe9, 0x98, 0x23, 0xb0, 0x13, 0x38,
	0x2c, 0xb1, 0x89, 0xf4, 0x3d, 0x8e, 0xed, 0x7d, 0x88, 0x94, 0x1c, 0x61, 0x87, 0x32, 0x75, 0x17,
	0xf1, 0xd0, 0x8f, 0xdc, 0x01, 0x29, 0xef, 0x90, 0xc2, 0xc6, 0xae, 0xbc, 0xe4, 0x2a, 0xd6, 0xb3,
	0x0e, 0xf1, 0x88, 0xe6, 0x0e, 0x45, 0x3c, 0x16, 0x21, 0x9f, 0xe1, 0x31, 0x05, 0xe8, 0x92, 0xb1,
	0x77, 0xe1, 0x86, 0xe7, 0x7c, 0x88, 0x48, 0x87, 0xc8, 0x40, 0x62, 0x34, 0xc2, 0x13, 0xf6, 0x1a,
	0x58, 0xf9, 0x24, 0x2d, 0x5b, 0x57, 0xf9, 0x22, 0x44, 0x46, 0x99, 0x66, 0x97, 0xca, 0xcc, 0x17,
	0xec, 0x15, 0x9c, 0x28, 0x21, 0xe2, 0xb1, 0x1b, 0xce, 0xe2, 0x42, 0xb0, 0x11, 0xbe, 0xa2, 0xd3,
	0x15, 0x8a, 0x22, 0x2c, 0xc2, 0xd7, 0x54, 0x31, 0xe2, 0xf2, 0x8a, 0xcb, 0xb2, 0xd3, 0x28, 0x76,
	0x15, 0x7e, 0x44, 0xb8, 0x51, 0xe4, 0x33, 0xdc, 0x21, 0xc6, 0x03, 0xe1, 0x5d, 0xf2, 0x21, 0x7e,
	0xac, 0x8f, 0x95, 0x14, 0x7f, 0xe4, 0x21, 0x9e, 0x12, 0xc3, 0x65, 0x67, 0x74, 0xd4, 0xf0, 0x13,
	0x7d, 0x8e, 0x45, 0x18, 0x72, 0x4f, 0xf7, 0xf8, 0x86, 0x46, 0x11, 0x61, 0x40, 0xcd, 0xb8, 0x01,
	0x7e, 0x4a, 0x09, 0xfa, 0xc4, 0xc7, 0xba, 0xf1, 0x08, 0x3f, 0x7b, 0x42, 0x0a, 0xae, 0x3f, 0xdf,
	0x27, 0x56, 0x47, 0xe1, 0x19, 0x5d, 0x19, 0x13, 0x11, 0xf9, 0x54, 0xb3, 0xa4, 0xf1, 0x47, 0x34,
	0xab, 0x91, 0x8f, 0x21, 0x81, 0x5f, 0xfb, 0x91, 0xc2, 0x2e, 0xc5, 0x9a, 0x82, 0x65, 0x46, 0x84,
	0x3f, 0xa6, 0x9a, 0x46, 0x3e, 0xe5, 0xf1, 0xfd, 0x09, 0x75, 0x16, 0x88, 0xf0, 0x3c, 0xa6, 0xf6,
	0xf0, 0xa7, 0xfa, 0x5a, 0xbb, 0x10, 0x52, 0x19, 0xfb, 0x8b, 0xf2, 0x42, 0xe2, 0xc6, 0xfe, 0x19,
	0xfb, 0x18, 0x5e, 0x95, 0x37, 0xc0, 0xb7, 0xbe, 0xba, 0x88, 0x43, 0x11, 0x2b, 0x71, 0xc9, 0x43,
	0xec, 0xed, 0x37, 0x6c, 0xa0, 0x2f, 0xd9, 0x27, 0xf0, 0x51, 0x09, 0x3d, 0xde, 0x1b, 0x22, 0x54,
	0xfc, 0x5a, 0x61, 0x9f, 0x3a, 0x7c, 0xcf, 0x89, 0x5f, 0xbd, 0xfb, 0x35, 0x54, 0xdd, 0x89, 0xcf,
	0xde, 0x15, 0x97, 0x71, 0x94, 0xae, 0x16, 0xec, 0xd9, 0xa7, 0x9d, 0xfe, 0xf0, 0x39, 0xc5, 0x7d,
	0x88, 0x3e, 0x08, 0xbb, 0x07, 0x37, 0x75, 0xfd, 0xef, 0xe4, 0xeb, 0xff, 0x06, 0x00, 0x00, 0xff,
	0xff, 0x2e, 0x9b, 0x96, 0x98, 0xaa, 0x0c, 0x00, 0x00,
}
