// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api.proto

package api

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Venue int32

const (
	Venue_DARKPOOL    Venue = 0
	Venue_COINBASEPRO Venue = 1
	Venue_BITMEX      Venue = 2
	Venue_BITFINEX    Venue = 3
	Venue_BINANCE     Venue = 4
	Venue_GEMINI      Venue = 5
)

var Venue_name = map[int32]string{
	0: "DARKPOOL",
	1: "COINBASEPRO",
	2: "BITMEX",
	3: "BITFINEX",
	4: "BINANCE",
	5: "GEMINI",
}
var Venue_value = map[string]int32{
	"DARKPOOL":    0,
	"COINBASEPRO": 1,
	"BITMEX":      2,
	"BITFINEX":    3,
	"BINANCE":     4,
	"GEMINI":      5,
}

func (x Venue) String() string {
	return proto.EnumName(Venue_name, int32(x))
}
func (Venue) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_api_aa02306422894e60, []int{0}
}

type AccountMode int32

const (
	AccountMode_LIVE AccountMode = 0
	AccountMode_DEMO AccountMode = 1
)

var AccountMode_name = map[int32]string{
	0: "LIVE",
	1: "DEMO",
}
var AccountMode_value = map[string]int32{
	"LIVE": 0,
	"DEMO": 1,
}

func (x AccountMode) String() string {
	return proto.EnumName(AccountMode_name, int32(x))
}
func (AccountMode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_api_aa02306422894e60, []int{1}
}

type AccountType int32

const (
	AccountType_NET               AccountType = 0
	AccountType_HEDGE             AccountType = 1
	AccountType_CROSS_VENUE_NET   AccountType = 2
	AccountType_CROSS_VENUE_HEDGE AccountType = 3
)

var AccountType_name = map[int32]string{
	0: "NET",
	1: "HEDGE",
	2: "CROSS_VENUE_NET",
	3: "CROSS_VENUE_HEDGE",
}
var AccountType_value = map[string]int32{
	"NET":               0,
	"HEDGE":             1,
	"CROSS_VENUE_NET":   2,
	"CROSS_VENUE_HEDGE": 3,
}

func (x AccountType) String() string {
	return proto.EnumName(AccountType_name, int32(x))
}
func (AccountType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_api_aa02306422894e60, []int{2}
}

type VenueType int32

const (
	VenueType_SPOT    VenueType = 0
	VenueType_FUTURES VenueType = 1
)

var VenueType_name = map[int32]string{
	0: "SPOT",
	1: "FUTURES",
}
var VenueType_value = map[string]int32{
	"SPOT":    0,
	"FUTURES": 1,
}

func (x VenueType) String() string {
	return proto.EnumName(VenueType_name, int32(x))
}
func (VenueType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_api_aa02306422894e60, []int{3}
}

type Symbol int32

const (
	Symbol_BTC Symbol = 0
	Symbol_ETH Symbol = 1
	Symbol_USD Symbol = 2
	Symbol_LTC Symbol = 3
	Symbol_BCH Symbol = 4
	Symbol_ETC Symbol = 5
)

var Symbol_name = map[int32]string{
	0: "BTC",
	1: "ETH",
	2: "USD",
	3: "LTC",
	4: "BCH",
	5: "ETC",
}
var Symbol_value = map[string]int32{
	"BTC": 0,
	"ETH": 1,
	"USD": 2,
	"LTC": 3,
	"BCH": 4,
	"ETC": 5,
}

func (x Symbol) String() string {
	return proto.EnumName(Symbol_name, int32(x))
}
func (Symbol) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_api_aa02306422894e60, []int{4}
}

type Product int32

const (
	Product_BTC_USD Product = 0
	Product_ETH_BTC Product = 1
	Product_ETH_USD Product = 2
	Product_LTC_USD Product = 3
	Product_LTC_BTC Product = 4
	Product_LTC_ETH Product = 5
	Product_BCH_USD Product = 6
	Product_BCH_BTC Product = 7
	Product_BCH_ETH Product = 8
	Product_ETC_USD Product = 9
	Product_ETC_BTC Product = 10
	Product_ETC_ETH Product = 11
)

var Product_name = map[int32]string{
	0:  "BTC_USD",
	1:  "ETH_BTC",
	2:  "ETH_USD",
	3:  "LTC_USD",
	4:  "LTC_BTC",
	5:  "LTC_ETH",
	6:  "BCH_USD",
	7:  "BCH_BTC",
	8:  "BCH_ETH",
	9:  "ETC_USD",
	10: "ETC_BTC",
	11: "ETC_ETH",
}
var Product_value = map[string]int32{
	"BTC_USD": 0,
	"ETH_BTC": 1,
	"ETH_USD": 2,
	"LTC_USD": 3,
	"LTC_BTC": 4,
	"LTC_ETH": 5,
	"BCH_USD": 6,
	"BCH_BTC": 7,
	"BCH_ETH": 8,
	"ETC_USD": 9,
	"ETC_BTC": 10,
	"ETC_ETH": 11,
}

func (x Product) String() string {
	return proto.EnumName(Product_name, int32(x))
}
func (Product) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_api_aa02306422894e60, []int{5}
}

type OrderType int32

const (
	OrderType_BUY             OrderType = 0
	OrderType_SELL            OrderType = 1
	OrderType_BUY_LIMIT       OrderType = 2
	OrderType_SELL_LIMIT      OrderType = 3
	OrderType_BUY_STOP        OrderType = 4
	OrderType_SELL_STOP       OrderType = 5
	OrderType_BUY_STOP_LIMIT  OrderType = 6
	OrderType_SELL_STOP_LIMIT OrderType = 7
	OrderType_CLOSING_BY      OrderType = 8
)

var OrderType_name = map[int32]string{
	0: "BUY",
	1: "SELL",
	2: "BUY_LIMIT",
	3: "SELL_LIMIT",
	4: "BUY_STOP",
	5: "SELL_STOP",
	6: "BUY_STOP_LIMIT",
	7: "SELL_STOP_LIMIT",
	8: "CLOSING_BY",
}
var OrderType_value = map[string]int32{
	"BUY":             0,
	"SELL":            1,
	"BUY_LIMIT":       2,
	"SELL_LIMIT":      3,
	"BUY_STOP":        4,
	"SELL_STOP":       5,
	"BUY_STOP_LIMIT":  6,
	"SELL_STOP_LIMIT": 7,
	"CLOSING_BY":      8,
}

func (x OrderType) String() string {
	return proto.EnumName(OrderType_name, int32(x))
}
func (OrderType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_api_aa02306422894e60, []int{6}
}

type OrderState int32

const (
	OrderState_STARTED        OrderState = 0
	OrderState_PLACED         OrderState = 1
	OrderState_CANCELED       OrderState = 2
	OrderState_PARTIAL        OrderState = 3
	OrderState_FILLED         OrderState = 4
	OrderState_REJECTED       OrderState = 5
	OrderState_EXPIRED        OrderState = 6
	OrderState_REQUEST_ADD    OrderState = 7
	OrderState_REQUEST_MODIFY OrderState = 8
	OrderState_REQUEST_CANCEL OrderState = 9
)

var OrderState_name = map[int32]string{
	0: "STARTED",
	1: "PLACED",
	2: "CANCELED",
	3: "PARTIAL",
	4: "FILLED",
	5: "REJECTED",
	6: "EXPIRED",
	7: "REQUEST_ADD",
	8: "REQUEST_MODIFY",
	9: "REQUEST_CANCEL",
}
var OrderState_value = map[string]int32{
	"STARTED":        0,
	"PLACED":         1,
	"CANCELED":       2,
	"PARTIAL":        3,
	"FILLED":         4,
	"REJECTED":       5,
	"EXPIRED":        6,
	"REQUEST_ADD":    7,
	"REQUEST_MODIFY": 8,
	"REQUEST_CANCEL": 9,
}

func (x OrderState) String() string {
	return proto.EnumName(OrderState_name, int32(x))
}
func (OrderState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_api_aa02306422894e60, []int{7}
}

type OrderTypeFilling int32

const (
	OrderTypeFilling_FOK    OrderTypeFilling = 0
	OrderTypeFilling_IOC    OrderTypeFilling = 1
	OrderTypeFilling_RETURN OrderTypeFilling = 2
)

var OrderTypeFilling_name = map[int32]string{
	0: "FOK",
	1: "IOC",
	2: "RETURN",
}
var OrderTypeFilling_value = map[string]int32{
	"FOK":    0,
	"IOC":    1,
	"RETURN": 2,
}

func (x OrderTypeFilling) String() string {
	return proto.EnumName(OrderTypeFilling_name, int32(x))
}
func (OrderTypeFilling) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_api_aa02306422894e60, []int{8}
}

type OrderReason int32

const (
	OrderReason_ORDER_CLIENT   OrderReason = 0
	OrderReason_ORDER_MOBILE   OrderReason = 1
	OrderReason_ORDER_WEB      OrderReason = 2
	OrderReason_ORDER_STRATEGY OrderReason = 3
	OrderReason_ORDER_SL       OrderReason = 4
	OrderReason_ORDER_TP       OrderReason = 5
	OrderReason_ORDER_SO       OrderReason = 6
)

var OrderReason_name = map[int32]string{
	0: "ORDER_CLIENT",
	1: "ORDER_MOBILE",
	2: "ORDER_WEB",
	3: "ORDER_STRATEGY",
	4: "ORDER_SL",
	5: "ORDER_TP",
	6: "ORDER_SO",
}
var OrderReason_value = map[string]int32{
	"ORDER_CLIENT":   0,
	"ORDER_MOBILE":   1,
	"ORDER_WEB":      2,
	"ORDER_STRATEGY": 3,
	"ORDER_SL":       4,
	"ORDER_TP":       5,
	"ORDER_SO":       6,
}

func (x OrderReason) String() string {
	return proto.EnumName(OrderReason_name, int32(x))
}
func (OrderReason) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_api_aa02306422894e60, []int{9}
}

type OrderTypeTime int32

const (
	OrderTypeTime_GTC           OrderTypeTime = 0
	OrderTypeTime_DAY           OrderTypeTime = 1
	OrderTypeTime_SPECIFIED     OrderTypeTime = 2
	OrderTypeTime_SPECIFIED_DAY OrderTypeTime = 3
)

var OrderTypeTime_name = map[int32]string{
	0: "GTC",
	1: "DAY",
	2: "SPECIFIED",
	3: "SPECIFIED_DAY",
}
var OrderTypeTime_value = map[string]int32{
	"GTC":           0,
	"DAY":           1,
	"SPECIFIED":     2,
	"SPECIFIED_DAY": 3,
}

func (x OrderTypeTime) String() string {
	return proto.EnumName(OrderTypeTime_name, int32(x))
}
func (OrderTypeTime) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_api_aa02306422894e60, []int{10}
}

type DealType int32

const (
	DealType_DEAL_BUY      DealType = 0
	DealType_DEAL_SELL     DealType = 1
	DealType_BALANCE       DealType = 2
	DealType_CREDIT        DealType = 3
	DealType_CHARGE        DealType = 4
	DealType_CORRECTION    DealType = 5
	DealType_BONUS         DealType = 6
	DealType_COMMISSION    DealType = 7
	DealType_INTEREST      DealType = 8
	DealType_BUY_CANCELED  DealType = 9
	DealType_SELL_CANCELED DealType = 10
	DealType_DIVIDEND      DealType = 11
)

var DealType_name = map[int32]string{
	0:  "DEAL_BUY",
	1:  "DEAL_SELL",
	2:  "BALANCE",
	3:  "CREDIT",
	4:  "CHARGE",
	5:  "CORRECTION",
	6:  "BONUS",
	7:  "COMMISSION",
	8:  "INTEREST",
	9:  "BUY_CANCELED",
	10: "SELL_CANCELED",
	11: "DIVIDEND",
}
var DealType_value = map[string]int32{
	"DEAL_BUY":      0,
	"DEAL_SELL":     1,
	"BALANCE":       2,
	"CREDIT":        3,
	"CHARGE":        4,
	"CORRECTION":    5,
	"BONUS":         6,
	"COMMISSION":    7,
	"INTEREST":      8,
	"BUY_CANCELED":  9,
	"SELL_CANCELED": 10,
	"DIVIDEND":      11,
}

func (x DealType) String() string {
	return proto.EnumName(DealType_name, int32(x))
}
func (DealType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_api_aa02306422894e60, []int{11}
}

type DealEntry int32

const (
	DealEntry_IN     DealEntry = 0
	DealEntry_OUT    DealEntry = 1
	DealEntry_INOUT  DealEntry = 2
	DealEntry_OUT_BY DealEntry = 3
)

var DealEntry_name = map[int32]string{
	0: "IN",
	1: "OUT",
	2: "INOUT",
	3: "OUT_BY",
}
var DealEntry_value = map[string]int32{
	"IN":     0,
	"OUT":    1,
	"INOUT":  2,
	"OUT_BY": 3,
}

func (x DealEntry) String() string {
	return proto.EnumName(DealEntry_name, int32(x))
}
func (DealEntry) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_api_aa02306422894e60, []int{12}
}

type DealReason int32

const (
	DealReason_DEAL_CLIENT   DealReason = 0
	DealReason_DEAL_MOBILE   DealReason = 1
	DealReason_DEAL_WEB      DealReason = 2
	DealReason_DEAL_STRATEGY DealReason = 3
	DealReason_DEAL_SL       DealReason = 4
	DealReason_DEAL_TP       DealReason = 5
	DealReason_DEAL_SO       DealReason = 6
	DealReason_ROLLOVER      DealReason = 7
	DealReason_VMARGIN       DealReason = 8
	DealReason_SPLIT         DealReason = 9
	DealReason_AJUST         DealReason = 10
)

var DealReason_name = map[int32]string{
	0:  "DEAL_CLIENT",
	1:  "DEAL_MOBILE",
	2:  "DEAL_WEB",
	3:  "DEAL_STRATEGY",
	4:  "DEAL_SL",
	5:  "DEAL_TP",
	6:  "DEAL_SO",
	7:  "ROLLOVER",
	8:  "VMARGIN",
	9:  "SPLIT",
	10: "AJUST",
}
var DealReason_value = map[string]int32{
	"DEAL_CLIENT":   0,
	"DEAL_MOBILE":   1,
	"DEAL_WEB":      2,
	"DEAL_STRATEGY": 3,
	"DEAL_SL":       4,
	"DEAL_TP":       5,
	"DEAL_SO":       6,
	"ROLLOVER":      7,
	"VMARGIN":       8,
	"SPLIT":         9,
	"AJUST":         10,
}

func (x DealReason) String() string {
	return proto.EnumName(DealReason_name, int32(x))
}
func (DealReason) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_api_aa02306422894e60, []int{13}
}

type PositionReason int32

const (
	PositionReason_POSITION_CLIENT   PositionReason = 0
	PositionReason_POSITION_MOBILE   PositionReason = 1
	PositionReason_POSITION_WEB      PositionReason = 2
	PositionReason_POSITION_STRATEGY PositionReason = 3
)

var PositionReason_name = map[int32]string{
	0: "POSITION_CLIENT",
	1: "POSITION_MOBILE",
	2: "POSITION_WEB",
	3: "POSITION_STRATEGY",
}
var PositionReason_value = map[string]int32{
	"POSITION_CLIENT":   0,
	"POSITION_MOBILE":   1,
	"POSITION_WEB":      2,
	"POSITION_STRATEGY": 3,
}

func (x PositionReason) String() string {
	return proto.EnumName(PositionReason_name, int32(x))
}
func (PositionReason) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_api_aa02306422894e60, []int{14}
}

type PositioType int32

const (
	PositioType_POSITION_BUY  PositioType = 0
	PositioType_POSITION_SELL PositioType = 1
)

var PositioType_name = map[int32]string{
	0: "POSITION_BUY",
	1: "POSITION_SELL",
}
var PositioType_value = map[string]int32{
	"POSITION_BUY":  0,
	"POSITION_SELL": 1,
}

func (x PositioType) String() string {
	return proto.EnumName(PositioType_name, int32(x))
}
func (PositioType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_api_aa02306422894e60, []int{15}
}

type TradeAction int32

const (
	TradeAction_DEAL     TradeAction = 0
	TradeAction_PENDING  TradeAction = 1
	TradeAction_SLTP     TradeAction = 2
	TradeAction_MODIFY   TradeAction = 3
	TradeAction_REMOVE   TradeAction = 4
	TradeAction_CLOSE_BY TradeAction = 5
)

var TradeAction_name = map[int32]string{
	0: "DEAL",
	1: "PENDING",
	2: "SLTP",
	3: "MODIFY",
	4: "REMOVE",
	5: "CLOSE_BY",
}
var TradeAction_value = map[string]int32{
	"DEAL":     0,
	"PENDING":  1,
	"SLTP":     2,
	"MODIFY":   3,
	"REMOVE":   4,
	"CLOSE_BY": 5,
}

func (x TradeAction) String() string {
	return proto.EnumName(TradeAction_name, int32(x))
}
func (TradeAction) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_api_aa02306422894e60, []int{16}
}

type Retcode int32

const (
	Retcode_REJECTX                 Retcode = 0
	Retcode_REJECT                  Retcode = 2
	Retcode_CANCEL                  Retcode = 3
	Retcode_PLACED_TRADE            Retcode = 4
	Retcode_DONE                    Retcode = 5
	Retcode_DONE_PARTIAL            Retcode = 6
	Retcode_ERROR                   Retcode = 7
	Retcode_TIMEOUT                 Retcode = 8
	Retcode_INVALID                 Retcode = 9
	Retcode_INVALID_VOLUME          Retcode = 10
	Retcode_INVALID_PRICE           Retcode = 11
	Retcode_INVALID_STOPS           Retcode = 12
	Retcode_TRADE_DISABLED          Retcode = 13
	Retcode_MARKET_CLOSED           Retcode = 14
	Retcode_NO_MONEY                Retcode = 15
	Retcode_PRICE_CHANGED           Retcode = 16
	Retcode_PRICE_OFF               Retcode = 17
	Retcode_INVALID_EXPIRATION      Retcode = 18
	Retcode_ORDER_CHANGED           Retcode = 19
	Retcode_TOO_MANY_REQUESTS       Retcode = 21
	Retcode_NO_CHANGES              Retcode = 22
	Retcode_SERVER_DISABLES_AT      Retcode = 23
	Retcode_CLIENT_DISABLES_AT      Retcode = 24
	Retcode_LOCKED                  Retcode = 25
	Retcode_FROZEN                  Retcode = 26
	Retcode_INVALID_FILL            Retcode = 27
	Retcode_CONNECTION              Retcode = 28
	Retcode_ONLY_REAL               Retcode = 29
	Retcode_LIMIT_ORDERS            Retcode = 30
	Retcode_LIMIT_VOLUME            Retcode = 31
	Retcode_INVALID_ORDER           Retcode = 32
	Retcode_POSITION_CLOSED         Retcode = 33
	Retcode_CLOSE_ORDER_EXIST       Retcode = 34
	Retcode_LIMIT_POSITIONS         Retcode = 35
	Retcode_REJECT_CANCEL           Retcode = 36
	Retcode_LONG_ONLY               Retcode = 37
	Retcode_SHORT_ONLY              Retcode = 38
	Retcode_CLOSE_ONLY              Retcode = 39
	Retcode_REQUEST_WITH_NO_TOKEN   Retcode = 40
	Retcode_INVALID_TOKEN           Retcode = 41
	Retcode_INVALID_REQUEST_CONTEXT Retcode = 42
	Retcode_INVALID_REQUEST         Retcode = 43
)

var Retcode_name = map[int32]string{
	0:  "REJECTX",
	2:  "REJECT",
	3:  "CANCEL",
	4:  "PLACED_TRADE",
	5:  "DONE",
	6:  "DONE_PARTIAL",
	7:  "ERROR",
	8:  "TIMEOUT",
	9:  "INVALID",
	10: "INVALID_VOLUME",
	11: "INVALID_PRICE",
	12: "INVALID_STOPS",
	13: "TRADE_DISABLED",
	14: "MARKET_CLOSED",
	15: "NO_MONEY",
	16: "PRICE_CHANGED",
	17: "PRICE_OFF",
	18: "INVALID_EXPIRATION",
	19: "ORDER_CHANGED",
	21: "TOO_MANY_REQUESTS",
	22: "NO_CHANGES",
	23: "SERVER_DISABLES_AT",
	24: "CLIENT_DISABLES_AT",
	25: "LOCKED",
	26: "FROZEN",
	27: "INVALID_FILL",
	28: "CONNECTION",
	29: "ONLY_REAL",
	30: "LIMIT_ORDERS",
	31: "LIMIT_VOLUME",
	32: "INVALID_ORDER",
	33: "POSITION_CLOSED",
	34: "CLOSE_ORDER_EXIST",
	35: "LIMIT_POSITIONS",
	36: "REJECT_CANCEL",
	37: "LONG_ONLY",
	38: "SHORT_ONLY",
	39: "CLOSE_ONLY",
	40: "REQUEST_WITH_NO_TOKEN",
	41: "INVALID_TOKEN",
	42: "INVALID_REQUEST_CONTEXT",
	43: "INVALID_REQUEST",
}
var Retcode_value = map[string]int32{
	"REJECTX":                 0,
	"REJECT":                  2,
	"CANCEL":                  3,
	"PLACED_TRADE":            4,
	"DONE":                    5,
	"DONE_PARTIAL":            6,
	"ERROR":                   7,
	"TIMEOUT":                 8,
	"INVALID":                 9,
	"INVALID_VOLUME":          10,
	"INVALID_PRICE":           11,
	"INVALID_STOPS":           12,
	"TRADE_DISABLED":          13,
	"MARKET_CLOSED":           14,
	"NO_MONEY":                15,
	"PRICE_CHANGED":           16,
	"PRICE_OFF":               17,
	"INVALID_EXPIRATION":      18,
	"ORDER_CHANGED":           19,
	"TOO_MANY_REQUESTS":       21,
	"NO_CHANGES":              22,
	"SERVER_DISABLES_AT":      23,
	"CLIENT_DISABLES_AT":      24,
	"LOCKED":                  25,
	"FROZEN":                  26,
	"INVALID_FILL":            27,
	"CONNECTION":              28,
	"ONLY_REAL":               29,
	"LIMIT_ORDERS":            30,
	"LIMIT_VOLUME":            31,
	"INVALID_ORDER":           32,
	"POSITION_CLOSED":         33,
	"CLOSE_ORDER_EXIST":       34,
	"LIMIT_POSITIONS":         35,
	"REJECT_CANCEL":           36,
	"LONG_ONLY":               37,
	"SHORT_ONLY":              38,
	"CLOSE_ONLY":              39,
	"REQUEST_WITH_NO_TOKEN":   40,
	"INVALID_TOKEN":           41,
	"INVALID_REQUEST_CONTEXT": 42,
	"INVALID_REQUEST":         43,
}

func (x Retcode) String() string {
	return proto.EnumName(Retcode_name, int32(x))
}
func (Retcode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_api_aa02306422894e60, []int{17}
}

type TradeRequest struct {
	Action               TradeAction      `protobuf:"varint,1,opt,name=action,proto3,enum=api.TradeAction" json:"action,omitempty"`
	Venue                Venue            `protobuf:"varint,2,opt,name=venue,proto3,enum=api.Venue" json:"venue,omitempty"`
	Product              Product          `protobuf:"varint,3,opt,name=product,proto3,enum=api.Product" json:"product,omitempty"`
	Order                uint64           `protobuf:"varint,4,opt,name=order,proto3" json:"order,omitempty"`
	Volume               float64          `protobuf:"fixed64,5,opt,name=volume,proto3" json:"volume,omitempty"`
	Price                float64          `protobuf:"fixed64,6,opt,name=price,proto3" json:"price,omitempty"`
	Stoplimit            float64          `protobuf:"fixed64,7,opt,name=stoplimit,proto3" json:"stoplimit,omitempty"`
	Sl                   float64          `protobuf:"fixed64,8,opt,name=sl,proto3" json:"sl,omitempty"`
	Tp                   float64          `protobuf:"fixed64,9,opt,name=tp,proto3" json:"tp,omitempty"`
	TraillingPercent     float64          `protobuf:"fixed64,10,opt,name=trailling_percent,json=traillingPercent,proto3" json:"trailling_percent,omitempty"`
	Deviation            uint64           `protobuf:"varint,11,opt,name=deviation,proto3" json:"deviation,omitempty"`
	OrderType            OrderType        `protobuf:"varint,12,opt,name=order_type,json=orderType,proto3,enum=api.OrderType" json:"order_type,omitempty"`
	OrderTypeFilling     OrderTypeFilling `protobuf:"varint,13,opt,name=order_type_filling,json=orderTypeFilling,proto3,enum=api.OrderTypeFilling" json:"order_type_filling,omitempty"`
	OrderTypeTime        OrderTypeTime    `protobuf:"varint,14,opt,name=order_type_time,json=orderTypeTime,proto3,enum=api.OrderTypeTime" json:"order_type_time,omitempty"`
	Expiration           uint64           `protobuf:"varint,15,opt,name=expiration,proto3" json:"expiration,omitempty"`
	Comment              string           `protobuf:"bytes,16,opt,name=comment,proto3" json:"comment,omitempty"`
	Position             uint64           `protobuf:"varint,17,opt,name=position,proto3" json:"position,omitempty"`
	PositionBy           uint64           `protobuf:"varint,18,opt,name=position_by,json=positionBy,proto3" json:"position_by,omitempty"`
	Async                bool             `protobuf:"varint,19,opt,name=async,proto3" json:"async,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *TradeRequest) Reset()         { *m = TradeRequest{} }
func (m *TradeRequest) String() string { return proto.CompactTextString(m) }
func (*TradeRequest) ProtoMessage()    {}
func (*TradeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_aa02306422894e60, []int{0}
}
func (m *TradeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TradeRequest.Unmarshal(m, b)
}
func (m *TradeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TradeRequest.Marshal(b, m, deterministic)
}
func (dst *TradeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TradeRequest.Merge(dst, src)
}
func (m *TradeRequest) XXX_Size() int {
	return xxx_messageInfo_TradeRequest.Size(m)
}
func (m *TradeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TradeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TradeRequest proto.InternalMessageInfo

func (m *TradeRequest) GetAction() TradeAction {
	if m != nil {
		return m.Action
	}
	return TradeAction_DEAL
}

func (m *TradeRequest) GetVenue() Venue {
	if m != nil {
		return m.Venue
	}
	return Venue_DARKPOOL
}

func (m *TradeRequest) GetProduct() Product {
	if m != nil {
		return m.Product
	}
	return Product_BTC_USD
}

func (m *TradeRequest) GetOrder() uint64 {
	if m != nil {
		return m.Order
	}
	return 0
}

func (m *TradeRequest) GetVolume() float64 {
	if m != nil {
		return m.Volume
	}
	return 0
}

func (m *TradeRequest) GetPrice() float64 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *TradeRequest) GetStoplimit() float64 {
	if m != nil {
		return m.Stoplimit
	}
	return 0
}

func (m *TradeRequest) GetSl() float64 {
	if m != nil {
		return m.Sl
	}
	return 0
}

func (m *TradeRequest) GetTp() float64 {
	if m != nil {
		return m.Tp
	}
	return 0
}

func (m *TradeRequest) GetTraillingPercent() float64 {
	if m != nil {
		return m.TraillingPercent
	}
	return 0
}

func (m *TradeRequest) GetDeviation() uint64 {
	if m != nil {
		return m.Deviation
	}
	return 0
}

func (m *TradeRequest) GetOrderType() OrderType {
	if m != nil {
		return m.OrderType
	}
	return OrderType_BUY
}

func (m *TradeRequest) GetOrderTypeFilling() OrderTypeFilling {
	if m != nil {
		return m.OrderTypeFilling
	}
	return OrderTypeFilling_FOK
}

func (m *TradeRequest) GetOrderTypeTime() OrderTypeTime {
	if m != nil {
		return m.OrderTypeTime
	}
	return OrderTypeTime_GTC
}

func (m *TradeRequest) GetExpiration() uint64 {
	if m != nil {
		return m.Expiration
	}
	return 0
}

func (m *TradeRequest) GetComment() string {
	if m != nil {
		return m.Comment
	}
	return ""
}

func (m *TradeRequest) GetPosition() uint64 {
	if m != nil {
		return m.Position
	}
	return 0
}

func (m *TradeRequest) GetPositionBy() uint64 {
	if m != nil {
		return m.PositionBy
	}
	return 0
}

func (m *TradeRequest) GetAsync() bool {
	if m != nil {
		return m.Async
	}
	return false
}

type TradeResult struct {
	Retcode              Retcode   `protobuf:"varint,1,opt,name=retcode,proto3,enum=api.Retcode" json:"retcode,omitempty"`
	Venue                Venue     `protobuf:"varint,2,opt,name=venue,proto3,enum=api.Venue" json:"venue,omitempty"`
	Product              Product   `protobuf:"varint,3,opt,name=product,proto3,enum=api.Product" json:"product,omitempty"`
	OrderType            OrderType `protobuf:"varint,4,opt,name=order_type,json=orderType,proto3,enum=api.OrderType" json:"order_type,omitempty"`
	Order                uint64    `protobuf:"varint,5,opt,name=order,proto3" json:"order,omitempty"`
	Volume               float64   `protobuf:"fixed64,6,opt,name=volume,proto3" json:"volume,omitempty"`
	Price                float64   `protobuf:"fixed64,7,opt,name=price,proto3" json:"price,omitempty"`
	Comment              string    `protobuf:"bytes,8,opt,name=comment,proto3" json:"comment,omitempty"`
	RequestId            string    `protobuf:"bytes,9,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	BrokerExecutionId    string    `protobuf:"bytes,10,opt,name=broker_execution_id,json=brokerExecutionId,proto3" json:"broker_execution_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *TradeResult) Reset()         { *m = TradeResult{} }
func (m *TradeResult) String() string { return proto.CompactTextString(m) }
func (*TradeResult) ProtoMessage()    {}
func (*TradeResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_aa02306422894e60, []int{1}
}
func (m *TradeResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TradeResult.Unmarshal(m, b)
}
func (m *TradeResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TradeResult.Marshal(b, m, deterministic)
}
func (dst *TradeResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TradeResult.Merge(dst, src)
}
func (m *TradeResult) XXX_Size() int {
	return xxx_messageInfo_TradeResult.Size(m)
}
func (m *TradeResult) XXX_DiscardUnknown() {
	xxx_messageInfo_TradeResult.DiscardUnknown(m)
}

var xxx_messageInfo_TradeResult proto.InternalMessageInfo

func (m *TradeResult) GetRetcode() Retcode {
	if m != nil {
		return m.Retcode
	}
	return Retcode_REJECTX
}

func (m *TradeResult) GetVenue() Venue {
	if m != nil {
		return m.Venue
	}
	return Venue_DARKPOOL
}

func (m *TradeResult) GetProduct() Product {
	if m != nil {
		return m.Product
	}
	return Product_BTC_USD
}

func (m *TradeResult) GetOrderType() OrderType {
	if m != nil {
		return m.OrderType
	}
	return OrderType_BUY
}

func (m *TradeResult) GetOrder() uint64 {
	if m != nil {
		return m.Order
	}
	return 0
}

func (m *TradeResult) GetVolume() float64 {
	if m != nil {
		return m.Volume
	}
	return 0
}

func (m *TradeResult) GetPrice() float64 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *TradeResult) GetComment() string {
	if m != nil {
		return m.Comment
	}
	return ""
}

func (m *TradeResult) GetRequestId() string {
	if m != nil {
		return m.RequestId
	}
	return ""
}

func (m *TradeResult) GetBrokerExecutionId() string {
	if m != nil {
		return m.BrokerExecutionId
	}
	return ""
}

type Position struct {
	PositionId           uint64         `protobuf:"varint,1,opt,name=position_id,json=positionId,proto3" json:"position_id,omitempty"`
	OrdersId             uint64         `protobuf:"varint,2,opt,name=orders_id,json=ordersId,proto3" json:"orders_id,omitempty"`
	Venue                Venue          `protobuf:"varint,3,opt,name=venue,proto3,enum=api.Venue" json:"venue,omitempty"`
	Account              uint64         `protobuf:"varint,4,opt,name=account,proto3" json:"account,omitempty"`
	PositionTime         uint64         `protobuf:"varint,5,opt,name=position_time,json=positionTime,proto3" json:"position_time,omitempty"`
	PositionType         PositioType    `protobuf:"varint,6,opt,name=position_type,json=positionType,proto3,enum=api.PositioType" json:"position_type,omitempty"`
	PositionReason       PositionReason `protobuf:"varint,7,opt,name=position_reason,json=positionReason,proto3,enum=api.PositionReason" json:"position_reason,omitempty"`
	Volume               float64        `protobuf:"fixed64,8,opt,name=volume,proto3" json:"volume,omitempty"`
	Price                float64        `protobuf:"fixed64,9,opt,name=price,proto3" json:"price,omitempty"`
	Tp                   float64        `protobuf:"fixed64,10,opt,name=tp,proto3" json:"tp,omitempty"`
	Sl                   float64        `protobuf:"fixed64,11,opt,name=sl,proto3" json:"sl,omitempty"`
	Swap                 float64        `protobuf:"fixed64,12,opt,name=swap,proto3" json:"swap,omitempty"`
	Product              Product        `protobuf:"varint,13,opt,name=product,proto3,enum=api.Product" json:"product,omitempty"`
	Comment              string         `protobuf:"bytes,14,opt,name=comment,proto3" json:"comment,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *Position) Reset()         { *m = Position{} }
func (m *Position) String() string { return proto.CompactTextString(m) }
func (*Position) ProtoMessage()    {}
func (*Position) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_aa02306422894e60, []int{2}
}
func (m *Position) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Position.Unmarshal(m, b)
}
func (m *Position) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Position.Marshal(b, m, deterministic)
}
func (dst *Position) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Position.Merge(dst, src)
}
func (m *Position) XXX_Size() int {
	return xxx_messageInfo_Position.Size(m)
}
func (m *Position) XXX_DiscardUnknown() {
	xxx_messageInfo_Position.DiscardUnknown(m)
}

var xxx_messageInfo_Position proto.InternalMessageInfo

func (m *Position) GetPositionId() uint64 {
	if m != nil {
		return m.PositionId
	}
	return 0
}

func (m *Position) GetOrdersId() uint64 {
	if m != nil {
		return m.OrdersId
	}
	return 0
}

func (m *Position) GetVenue() Venue {
	if m != nil {
		return m.Venue
	}
	return Venue_DARKPOOL
}

func (m *Position) GetAccount() uint64 {
	if m != nil {
		return m.Account
	}
	return 0
}

func (m *Position) GetPositionTime() uint64 {
	if m != nil {
		return m.PositionTime
	}
	return 0
}

func (m *Position) GetPositionType() PositioType {
	if m != nil {
		return m.PositionType
	}
	return PositioType_POSITION_BUY
}

func (m *Position) GetPositionReason() PositionReason {
	if m != nil {
		return m.PositionReason
	}
	return PositionReason_POSITION_CLIENT
}

func (m *Position) GetVolume() float64 {
	if m != nil {
		return m.Volume
	}
	return 0
}

func (m *Position) GetPrice() float64 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *Position) GetTp() float64 {
	if m != nil {
		return m.Tp
	}
	return 0
}

func (m *Position) GetSl() float64 {
	if m != nil {
		return m.Sl
	}
	return 0
}

func (m *Position) GetSwap() float64 {
	if m != nil {
		return m.Swap
	}
	return 0
}

func (m *Position) GetProduct() Product {
	if m != nil {
		return m.Product
	}
	return Product_BTC_USD
}

func (m *Position) GetComment() string {
	if m != nil {
		return m.Comment
	}
	return ""
}

type PositionRequest struct {
	Product              Product     `protobuf:"varint,1,opt,name=product,proto3,enum=api.Product" json:"product,omitempty"`
	Venue                Venue       `protobuf:"varint,2,opt,name=venue,proto3,enum=api.Venue" json:"venue,omitempty"`
	Position             uint64      `protobuf:"varint,3,opt,name=position,proto3" json:"position,omitempty"`
	PositionType         PositioType `protobuf:"varint,4,opt,name=position_type,json=positionType,proto3,enum=api.PositioType" json:"position_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *PositionRequest) Reset()         { *m = PositionRequest{} }
func (m *PositionRequest) String() string { return proto.CompactTextString(m) }
func (*PositionRequest) ProtoMessage()    {}
func (*PositionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_aa02306422894e60, []int{3}
}
func (m *PositionRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PositionRequest.Unmarshal(m, b)
}
func (m *PositionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PositionRequest.Marshal(b, m, deterministic)
}
func (dst *PositionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PositionRequest.Merge(dst, src)
}
func (m *PositionRequest) XXX_Size() int {
	return xxx_messageInfo_PositionRequest.Size(m)
}
func (m *PositionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PositionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PositionRequest proto.InternalMessageInfo

func (m *PositionRequest) GetProduct() Product {
	if m != nil {
		return m.Product
	}
	return Product_BTC_USD
}

func (m *PositionRequest) GetVenue() Venue {
	if m != nil {
		return m.Venue
	}
	return Venue_DARKPOOL
}

func (m *PositionRequest) GetPosition() uint64 {
	if m != nil {
		return m.Position
	}
	return 0
}

func (m *PositionRequest) GetPositionType() PositioType {
	if m != nil {
		return m.PositionType
	}
	return PositioType_POSITION_BUY
}

type PositionsResult struct {
	Retcode              Retcode     `protobuf:"varint,1,opt,name=retcode,proto3,enum=api.Retcode" json:"retcode,omitempty"`
	Positions            []*Position `protobuf:"bytes,2,rep,name=positions,proto3" json:"positions,omitempty"`
	Comment              string      `protobuf:"bytes,3,opt,name=comment,proto3" json:"comment,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *PositionsResult) Reset()         { *m = PositionsResult{} }
func (m *PositionsResult) String() string { return proto.CompactTextString(m) }
func (*PositionsResult) ProtoMessage()    {}
func (*PositionsResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_aa02306422894e60, []int{4}
}
func (m *PositionsResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PositionsResult.Unmarshal(m, b)
}
func (m *PositionsResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PositionsResult.Marshal(b, m, deterministic)
}
func (dst *PositionsResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PositionsResult.Merge(dst, src)
}
func (m *PositionsResult) XXX_Size() int {
	return xxx_messageInfo_PositionsResult.Size(m)
}
func (m *PositionsResult) XXX_DiscardUnknown() {
	xxx_messageInfo_PositionsResult.DiscardUnknown(m)
}

var xxx_messageInfo_PositionsResult proto.InternalMessageInfo

func (m *PositionsResult) GetRetcode() Retcode {
	if m != nil {
		return m.Retcode
	}
	return Retcode_REJECTX
}

func (m *PositionsResult) GetPositions() []*Position {
	if m != nil {
		return m.Positions
	}
	return nil
}

func (m *PositionsResult) GetComment() string {
	if m != nil {
		return m.Comment
	}
	return ""
}

type AccountRequest struct {
	Product              Product  `protobuf:"varint,1,opt,name=product,proto3,enum=api.Product" json:"product,omitempty"`
	Venue                Venue    `protobuf:"varint,2,opt,name=venue,proto3,enum=api.Venue" json:"venue,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AccountRequest) Reset()         { *m = AccountRequest{} }
func (m *AccountRequest) String() string { return proto.CompactTextString(m) }
func (*AccountRequest) ProtoMessage()    {}
func (*AccountRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_aa02306422894e60, []int{5}
}
func (m *AccountRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AccountRequest.Unmarshal(m, b)
}
func (m *AccountRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AccountRequest.Marshal(b, m, deterministic)
}
func (dst *AccountRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccountRequest.Merge(dst, src)
}
func (m *AccountRequest) XXX_Size() int {
	return xxx_messageInfo_AccountRequest.Size(m)
}
func (m *AccountRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AccountRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AccountRequest proto.InternalMessageInfo

func (m *AccountRequest) GetProduct() Product {
	if m != nil {
		return m.Product
	}
	return Product_BTC_USD
}

func (m *AccountRequest) GetVenue() Venue {
	if m != nil {
		return m.Venue
	}
	return Venue_DARKPOOL
}

type AccountResult struct {
	Retcode              Retcode  `protobuf:"varint,1,opt,name=retcode,proto3,enum=api.Retcode" json:"retcode,omitempty"`
	UserAccounts         *User    `protobuf:"bytes,2,opt,name=user_accounts,json=userAccounts,proto3" json:"user_accounts,omitempty"`
	Comment              string   `protobuf:"bytes,3,opt,name=comment,proto3" json:"comment,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AccountResult) Reset()         { *m = AccountResult{} }
func (m *AccountResult) String() string { return proto.CompactTextString(m) }
func (*AccountResult) ProtoMessage()    {}
func (*AccountResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_aa02306422894e60, []int{6}
}
func (m *AccountResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AccountResult.Unmarshal(m, b)
}
func (m *AccountResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AccountResult.Marshal(b, m, deterministic)
}
func (dst *AccountResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccountResult.Merge(dst, src)
}
func (m *AccountResult) XXX_Size() int {
	return xxx_messageInfo_AccountResult.Size(m)
}
func (m *AccountResult) XXX_DiscardUnknown() {
	xxx_messageInfo_AccountResult.DiscardUnknown(m)
}

var xxx_messageInfo_AccountResult proto.InternalMessageInfo

func (m *AccountResult) GetRetcode() Retcode {
	if m != nil {
		return m.Retcode
	}
	return Retcode_REJECTX
}

func (m *AccountResult) GetUserAccounts() *User {
	if m != nil {
		return m.UserAccounts
	}
	return nil
}

func (m *AccountResult) GetComment() string {
	if m != nil {
		return m.Comment
	}
	return ""
}

type User struct {
	Id                   string     `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Accounts             []*Account `protobuf:"bytes,2,rep,name=accounts,proto3" json:"accounts,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *User) Reset()         { *m = User{} }
func (m *User) String() string { return proto.CompactTextString(m) }
func (*User) ProtoMessage()    {}
func (*User) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_aa02306422894e60, []int{7}
}
func (m *User) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_User.Unmarshal(m, b)
}
func (m *User) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_User.Marshal(b, m, deterministic)
}
func (dst *User) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User.Merge(dst, src)
}
func (m *User) XXX_Size() int {
	return xxx_messageInfo_User.Size(m)
}
func (m *User) XXX_DiscardUnknown() {
	xxx_messageInfo_User.DiscardUnknown(m)
}

var xxx_messageInfo_User proto.InternalMessageInfo

func (m *User) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *User) GetAccounts() []*Account {
	if m != nil {
		return m.Accounts
	}
	return nil
}

type Account struct {
	AccountId            uint32              `protobuf:"varint,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	UserId               uint32              `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Venue                Venue               `protobuf:"varint,3,opt,name=venue,proto3,enum=api.Venue" json:"venue,omitempty"`
	AccountType          AccountType         `protobuf:"varint,4,opt,name=account_type,json=accountType,proto3,enum=api.AccountType" json:"account_type,omitempty"`
	AccountMode          AccountMode         `protobuf:"varint,5,opt,name=account_mode,json=accountMode,proto3,enum=api.AccountMode" json:"account_mode,omitempty"`
	Balances             map[string]*Balance `protobuf:"bytes,6,rep,name=balances,proto3" json:"balances,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Active               bool                `protobuf:"varint,7,opt,name=active,proto3" json:"active,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *Account) Reset()         { *m = Account{} }
func (m *Account) String() string { return proto.CompactTextString(m) }
func (*Account) ProtoMessage()    {}
func (*Account) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_aa02306422894e60, []int{8}
}
func (m *Account) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Account.Unmarshal(m, b)
}
func (m *Account) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Account.Marshal(b, m, deterministic)
}
func (dst *Account) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Account.Merge(dst, src)
}
func (m *Account) XXX_Size() int {
	return xxx_messageInfo_Account.Size(m)
}
func (m *Account) XXX_DiscardUnknown() {
	xxx_messageInfo_Account.DiscardUnknown(m)
}

var xxx_messageInfo_Account proto.InternalMessageInfo

func (m *Account) GetAccountId() uint32 {
	if m != nil {
		return m.AccountId
	}
	return 0
}

func (m *Account) GetUserId() uint32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *Account) GetVenue() Venue {
	if m != nil {
		return m.Venue
	}
	return Venue_DARKPOOL
}

func (m *Account) GetAccountType() AccountType {
	if m != nil {
		return m.AccountType
	}
	return AccountType_NET
}

func (m *Account) GetAccountMode() AccountMode {
	if m != nil {
		return m.AccountMode
	}
	return AccountMode_LIVE
}

func (m *Account) GetBalances() map[string]*Balance {
	if m != nil {
		return m.Balances
	}
	return nil
}

func (m *Account) GetActive() bool {
	if m != nil {
		return m.Active
	}
	return false
}

type Balance struct {
	BalanceId            float64  `protobuf:"fixed64,1,opt,name=balance_id,json=balanceId,proto3" json:"balance_id,omitempty"`
	Available            float64  `protobuf:"fixed64,2,opt,name=available,proto3" json:"available,omitempty"`
	Hold                 float64  `protobuf:"fixed64,3,opt,name=hold,proto3" json:"hold,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Balance) Reset()         { *m = Balance{} }
func (m *Balance) String() string { return proto.CompactTextString(m) }
func (*Balance) ProtoMessage()    {}
func (*Balance) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_aa02306422894e60, []int{9}
}
func (m *Balance) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Balance.Unmarshal(m, b)
}
func (m *Balance) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Balance.Marshal(b, m, deterministic)
}
func (dst *Balance) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Balance.Merge(dst, src)
}
func (m *Balance) XXX_Size() int {
	return xxx_messageInfo_Balance.Size(m)
}
func (m *Balance) XXX_DiscardUnknown() {
	xxx_messageInfo_Balance.DiscardUnknown(m)
}

var xxx_messageInfo_Balance proto.InternalMessageInfo

func (m *Balance) GetBalanceId() float64 {
	if m != nil {
		return m.BalanceId
	}
	return 0
}

func (m *Balance) GetAvailable() float64 {
	if m != nil {
		return m.Available
	}
	return 0
}

func (m *Balance) GetHold() float64 {
	if m != nil {
		return m.Hold
	}
	return 0
}

func init() {
	proto.RegisterType((*TradeRequest)(nil), "api.TradeRequest")
	proto.RegisterType((*TradeResult)(nil), "api.TradeResult")
	proto.RegisterType((*Position)(nil), "api.Position")
	proto.RegisterType((*PositionRequest)(nil), "api.PositionRequest")
	proto.RegisterType((*PositionsResult)(nil), "api.PositionsResult")
	proto.RegisterType((*AccountRequest)(nil), "api.AccountRequest")
	proto.RegisterType((*AccountResult)(nil), "api.AccountResult")
	proto.RegisterType((*User)(nil), "api.User")
	proto.RegisterType((*Account)(nil), "api.Account")
	proto.RegisterMapType((map[string]*Balance)(nil), "api.Account.BalancesEntry")
	proto.RegisterType((*Balance)(nil), "api.Balance")
	proto.RegisterEnum("api.Venue", Venue_name, Venue_value)
	proto.RegisterEnum("api.AccountMode", AccountMode_name, AccountMode_value)
	proto.RegisterEnum("api.AccountType", AccountType_name, AccountType_value)
	proto.RegisterEnum("api.VenueType", VenueType_name, VenueType_value)
	proto.RegisterEnum("api.Symbol", Symbol_name, Symbol_value)
	proto.RegisterEnum("api.Product", Product_name, Product_value)
	proto.RegisterEnum("api.OrderType", OrderType_name, OrderType_value)
	proto.RegisterEnum("api.OrderState", OrderState_name, OrderState_value)
	proto.RegisterEnum("api.OrderTypeFilling", OrderTypeFilling_name, OrderTypeFilling_value)
	proto.RegisterEnum("api.OrderReason", OrderReason_name, OrderReason_value)
	proto.RegisterEnum("api.OrderTypeTime", OrderTypeTime_name, OrderTypeTime_value)
	proto.RegisterEnum("api.DealType", DealType_name, DealType_value)
	proto.RegisterEnum("api.DealEntry", DealEntry_name, DealEntry_value)
	proto.RegisterEnum("api.DealReason", DealReason_name, DealReason_value)
	proto.RegisterEnum("api.PositionReason", PositionReason_name, PositionReason_value)
	proto.RegisterEnum("api.PositioType", PositioType_name, PositioType_value)
	proto.RegisterEnum("api.TradeAction", TradeAction_name, TradeAction_value)
	proto.RegisterEnum("api.Retcode", Retcode_name, Retcode_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// APIClient is the client API for API service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type APIClient interface {
	// Get all Order for a user with filter - A server-to-client streaming RPC.
	// rpc GetOrders(OrderFilter) returns (stream Order) {}
	// Order request - A simple RPC
	OrderSend(ctx context.Context, in *TradeRequest, opts ...grpc.CallOption) (*TradeResult, error)
	GetPositions(ctx context.Context, in *PositionRequest, opts ...grpc.CallOption) (*PositionsResult, error)
	GetAccount(ctx context.Context, in *AccountRequest, opts ...grpc.CallOption) (*AccountResult, error)
}

type aPIClient struct {
	cc *grpc.ClientConn
}

func NewAPIClient(cc *grpc.ClientConn) APIClient {
	return &aPIClient{cc}
}

func (c *aPIClient) OrderSend(ctx context.Context, in *TradeRequest, opts ...grpc.CallOption) (*TradeResult, error) {
	out := new(TradeResult)
	err := c.cc.Invoke(ctx, "/api.API/OrderSend", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) GetPositions(ctx context.Context, in *PositionRequest, opts ...grpc.CallOption) (*PositionsResult, error) {
	out := new(PositionsResult)
	err := c.cc.Invoke(ctx, "/api.API/GetPositions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) GetAccount(ctx context.Context, in *AccountRequest, opts ...grpc.CallOption) (*AccountResult, error) {
	out := new(AccountResult)
	err := c.cc.Invoke(ctx, "/api.API/GetAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// APIServer is the server API for API service.
type APIServer interface {
	// Get all Order for a user with filter - A server-to-client streaming RPC.
	// rpc GetOrders(OrderFilter) returns (stream Order) {}
	// Order request - A simple RPC
	OrderSend(context.Context, *TradeRequest) (*TradeResult, error)
	GetPositions(context.Context, *PositionRequest) (*PositionsResult, error)
	GetAccount(context.Context, *AccountRequest) (*AccountResult, error)
}

func RegisterAPIServer(s *grpc.Server, srv APIServer) {
	s.RegisterService(&_API_serviceDesc, srv)
}

func _API_OrderSend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TradeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).OrderSend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.API/OrderSend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).OrderSend(ctx, req.(*TradeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_GetPositions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PositionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).GetPositions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.API/GetPositions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).GetPositions(ctx, req.(*PositionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_GetAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).GetAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.API/GetAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).GetAccount(ctx, req.(*AccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _API_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.API",
	HandlerType: (*APIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "OrderSend",
			Handler:    _API_OrderSend_Handler,
		},
		{
			MethodName: "GetPositions",
			Handler:    _API_GetPositions_Handler,
		},
		{
			MethodName: "GetAccount",
			Handler:    _API_GetAccount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

func init() { proto.RegisterFile("api.proto", fileDescriptor_api_aa02306422894e60) }

var fileDescriptor_api_aa02306422894e60 = []byte{
	// 2218 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x58, 0xcb, 0x6e, 0x23, 0xc7,
	0xd5, 0x9e, 0xe6, 0xbd, 0x0f, 0x2f, 0x2a, 0x95, 0x3c, 0x33, 0xf4, 0x8c, 0x2f, 0x32, 0xfd, 0xff,
	0x8e, 0xc2, 0x41, 0x06, 0x81, 0x06, 0xb9, 0xc0, 0x30, 0x82, 0x34, 0x9b, 0x25, 0xaa, 0x3c, 0xcd,
	0x2e, 0xa6, 0xba, 0x29, 0x8b, 0xb3, 0x69, 0x50, 0x64, 0x27, 0x21, 0x4c, 0x91, 0x0c, 0x49, 0x29,
	0xd6, 0x26, 0x48, 0xf6, 0xd9, 0xe5, 0x05, 0xb2, 0x09, 0xb2, 0x0b, 0xb2, 0xcc, 0x3a, 0xaf, 0x91,
	0x17, 0xc8, 0x1b, 0x64, 0x1b, 0x9c, 0xaa, 0xea, 0x66, 0x53, 0x33, 0x19, 0xdb, 0x80, 0x77, 0x75,
	0xae, 0x75, 0xea, 0x3b, 0x5f, 0x1d, 0x56, 0x13, 0xec, 0xf1, 0x6a, 0xf6, 0x7c, 0xb5, 0x5e, 0x6e,
	0x97, 0x34, 0x3f, 0x5e, 0xcd, 0x5a, 0x7f, 0x2c, 0x42, 0x2d, 0x5c, 0x8f, 0xa7, 0xb1, 0x8c, 0x7f,
	0x73, 0x13, 0x6f, 0xb6, 0xf4, 0x04, 0x4a, 0xe3, 0xc9, 0x76, 0xb6, 0x5c, 0x34, 0xad, 0x63, 0xeb,
	0xa4, 0x71, 0x4a, 0x9e, 0x63, 0x84, 0x72, 0x71, 0x94, 0x5e, 0x1a, 0x3b, 0x3d, 0x86, 0xe2, 0x6d,
	0xbc, 0xb8, 0x89, 0x9b, 0x39, 0xe5, 0x08, 0xca, 0xf1, 0x02, 0x35, 0x52, 0x1b, 0xe8, 0x27, 0x50,
	0x5e, 0xad, 0x97, 0xd3, 0x9b, 0xc9, 0xb6, 0x99, 0x57, 0x3e, 0x35, 0xe5, 0x33, 0xd0, 0x3a, 0x99,
	0x18, 0xe9, 0x3b, 0x50, 0x5c, 0xae, 0xa7, 0xf1, 0xba, 0x59, 0x38, 0xb6, 0x4e, 0x0a, 0x52, 0x0b,
	0xf4, 0x11, 0x94, 0x6e, 0x97, 0xf3, 0x9b, 0xeb, 0xb8, 0x59, 0x3c, 0xb6, 0x4e, 0x2c, 0x69, 0x24,
	0xf4, 0x5e, 0xad, 0x67, 0x93, 0xb8, 0x59, 0x52, 0x6a, 0x2d, 0xd0, 0xf7, 0xc0, 0xde, 0x6c, 0x97,
	0xab, 0xf9, 0xec, 0x7a, 0xb6, 0x6d, 0x96, 0x95, 0x65, 0xa7, 0xa0, 0x0d, 0xc8, 0x6d, 0xe6, 0xcd,
	0x8a, 0x52, 0xe7, 0x36, 0x73, 0x94, 0xb7, 0xab, 0xa6, 0xad, 0xe5, 0xed, 0x8a, 0x3e, 0x83, 0xc3,
	0xed, 0x7a, 0x3c, 0x9b, 0xcf, 0x67, 0x8b, 0x5f, 0x45, 0xab, 0x78, 0x3d, 0x89, 0x17, 0xdb, 0x26,
	0x28, 0x33, 0x49, 0x0d, 0x03, 0xad, 0xc7, 0xad, 0xa6, 0xf1, 0xed, 0x6c, 0xac, 0x50, 0xaa, 0xaa,
	0x92, 0x77, 0x0a, 0xfa, 0x03, 0x00, 0x55, 0x7f, 0xb4, 0xbd, 0x5b, 0xc5, 0xcd, 0x9a, 0x3a, 0x77,
	0x43, 0x9d, 0x5b, 0xa0, 0x3a, 0xbc, 0x5b, 0xc5, 0xd2, 0x5e, 0x26, 0x4b, 0xea, 0x02, 0xdd, 0xb9,
	0x47, 0xbf, 0xd4, 0x3b, 0x35, 0xeb, 0x2a, 0xec, 0xe1, 0x7e, 0xd8, 0x99, 0x36, 0x4a, 0xb2, 0xbc,
	0xa7, 0xa1, 0x9f, 0xc2, 0x41, 0x26, 0xc9, 0x76, 0x76, 0x1d, 0x37, 0x1b, 0x2a, 0x03, 0xdd, 0xcf,
	0x10, 0xce, 0xae, 0x63, 0x59, 0x5f, 0x66, 0x45, 0xfa, 0x01, 0x40, 0xfc, 0xd5, 0x6a, 0xb6, 0xd6,
	0xc7, 0x39, 0x50, 0xc7, 0xc9, 0x68, 0x68, 0x13, 0xca, 0x93, 0xe5, 0xf5, 0x35, 0x02, 0x42, 0x8e,
	0xad, 0x13, 0x5b, 0x26, 0x22, 0x7d, 0x02, 0x95, 0xd5, 0x72, 0x33, 0x53, 0x71, 0x87, 0x2a, 0x2e,
	0x95, 0xe9, 0x87, 0x50, 0x4d, 0xd6, 0xd1, 0xd5, 0x5d, 0x93, 0xea, 0xb4, 0x89, 0xaa, 0x73, 0x87,
	0x5d, 0x1c, 0x6f, 0xee, 0x16, 0x93, 0xe6, 0xd1, 0xb1, 0x75, 0x52, 0x91, 0x5a, 0x68, 0xfd, 0x2b,
	0x07, 0x55, 0x43, 0xc7, 0xcd, 0xcd, 0x7c, 0x8b, 0x0c, 0x5a, 0xc7, 0xdb, 0xc9, 0x72, 0x1a, 0x1b,
	0x3a, 0x6a, 0x06, 0x49, 0xad, 0x93, 0x89, 0xf1, 0x3b, 0xe4, 0xe2, 0x7e, 0xfb, 0x0a, 0x5f, 0xd7,
	0xbe, 0x94, 0xba, 0xc5, 0x37, 0x53, 0xb7, 0xf4, 0x66, 0xea, 0x96, 0xb3, 0xd4, 0xcd, 0x20, 0x5c,
	0xd9, 0x47, 0xf8, 0x7d, 0x80, 0xb5, 0xbe, 0x97, 0xd1, 0x6c, 0xaa, 0xe8, 0x6a, 0x4b, 0xdb, 0x68,
	0xf8, 0x94, 0x3e, 0x87, 0xa3, 0xab, 0xf5, 0xf2, 0xcb, 0x78, 0x1d, 0xc5, 0x5f, 0xc5, 0x93, 0x1b,
	0x05, 0xf6, 0x6c, 0xaa, 0x78, 0x6b, 0xcb, 0x43, 0x6d, 0x62, 0x89, 0x85, 0x4f, 0x5b, 0xff, 0xcc,
	0x43, 0x65, 0xf0, 0xa6, 0x0e, 0xcd, 0xa6, 0x0a, 0xde, 0x4c, 0x87, 0xf8, 0x94, 0x3e, 0x05, 0x7d,
	0xce, 0x0d, 0x9a, 0x73, 0xba, 0xbf, 0x5a, 0xc1, 0xa7, 0x3b, 0xc0, 0xf3, 0xff, 0x0b, 0xf0, 0x26,
	0x94, 0xc7, 0x93, 0xc9, 0xf2, 0x66, 0xb1, 0x35, 0xd7, 0x3a, 0x11, 0xe9, 0xc7, 0x50, 0x4f, 0x77,
	0x56, 0x5c, 0xd5, 0xd8, 0xd5, 0x12, 0xa5, 0xa2, 0xe5, 0x8f, 0xb2, 0x4e, 0xd8, 0x8a, 0x52, 0x66,
	0x1c, 0x99, 0x43, 0xa8, 0x66, 0xec, 0xc2, 0xb0, 0x1f, 0x9f, 0xc1, 0x41, 0x1a, 0xb6, 0x8e, 0xc7,
	0x9b, 0xe5, 0x42, 0x61, 0xdd, 0x38, 0x3d, 0xca, 0x06, 0x2e, 0xa4, 0x32, 0xc9, 0xc6, 0x6a, 0x4f,
	0xce, 0xf4, 0xad, 0xf2, 0xe6, 0xbe, 0xd9, 0xd9, 0xbe, 0xe9, 0x21, 0x02, 0xe9, 0x10, 0xd1, 0x43,
	0xa6, 0x9a, 0x0e, 0x19, 0x0a, 0x85, 0xcd, 0x6f, 0xc7, 0x2b, 0x35, 0x03, 0x2c, 0xa9, 0xd6, 0x59,
	0x1a, 0xd6, 0xdf, 0x46, 0xc3, 0x0c, 0x27, 0x1a, 0x7b, 0x9c, 0x68, 0xfd, 0xcd, 0x82, 0x83, 0xdd,
	0x31, 0xf4, 0xd0, 0xce, 0x64, 0xb5, 0xde, 0x96, 0xf5, 0xeb, 0xaf, 0x49, 0xf6, 0x4e, 0xe7, 0xef,
	0xdd, 0xe9, 0xd7, 0x5a, 0x52, 0xf8, 0x26, 0x2d, 0x69, 0xfd, 0x3e, 0x53, 0xf0, 0xe6, 0x5b, 0xde,
	0xeb, 0x67, 0x60, 0x27, 0xb9, 0x36, 0xcd, 0xdc, 0x71, 0xfe, 0xa4, 0x7a, 0x5a, 0xdf, 0x6f, 0xe4,
	0xce, 0x9e, 0xc5, 0x2c, 0xbf, 0x8f, 0xd9, 0x2b, 0x68, 0x38, 0x9a, 0x7c, 0xdf, 0x39, 0x62, 0xad,
	0x3f, 0x58, 0x50, 0x4f, 0x93, 0x7f, 0xab, 0xc3, 0x3d, 0x87, 0xfa, 0xcd, 0x26, 0x5e, 0x47, 0xe6,
	0x5e, 0x6c, 0xd4, 0x1e, 0xd5, 0x53, 0x5b, 0x79, 0x0f, 0x37, 0xf1, 0x5a, 0xd6, 0xd0, 0x6e, 0x92,
	0xbf, 0xed, 0x7c, 0x3f, 0x87, 0x02, 0xfa, 0x23, 0x03, 0xcd, 0x55, 0xb6, 0x65, 0x6e, 0x36, 0xa5,
	0x27, 0x50, 0xc9, 0x24, 0x47, 0xf4, 0x74, 0x29, 0x49, 0xbd, 0xa9, 0xb5, 0xf5, 0xef, 0x1c, 0x94,
	0x8d, 0x16, 0xa7, 0x8e, 0xd1, 0x27, 0x83, 0xa1, 0x2e, 0x6d, 0xa3, 0xe1, 0x53, 0xfa, 0x18, 0xca,
	0xaa, 0x6c, 0x33, 0x15, 0xea, 0xb2, 0x84, 0xe2, 0x37, 0x9a, 0x09, 0x2f, 0xa0, 0x96, 0x64, 0x7e,
	0x8d, 0x40, 0x66, 0x77, 0x45, 0xa0, 0xea, 0x78, 0x27, 0x64, 0x83, 0xae, 0x11, 0xd3, 0xe2, 0xeb,
	0x41, 0x7d, 0xc4, 0x35, 0x09, 0x42, 0x81, 0xfe, 0x18, 0x2a, 0x57, 0xe3, 0xf9, 0x78, 0x31, 0x89,
	0x37, 0xcd, 0x92, 0x3a, 0xf9, 0x93, 0x6c, 0xc0, 0xf3, 0x8e, 0x31, 0xb2, 0xc5, 0x76, 0x7d, 0x27,
	0x53, 0x5f, 0x9c, 0x00, 0xf8, 0xbc, 0xb9, 0xd5, 0x23, 0xba, 0x22, 0x8d, 0xf4, 0x84, 0x43, 0x7d,
	0x2f, 0x84, 0x12, 0xc8, 0x7f, 0x19, 0xdf, 0x19, 0xac, 0x71, 0x49, 0x5b, 0x50, 0xbc, 0x1d, 0xcf,
	0x0d, 0x55, 0x12, 0xa4, 0x4d, 0x90, 0xd4, 0xa6, 0x4f, 0x73, 0x3f, 0xb5, 0x5a, 0xaf, 0xa0, 0x6c,
	0xb4, 0x88, 0xb4, 0xd9, 0x39, 0x41, 0xda, 0x92, 0xb6, 0xd1, 0xf0, 0x29, 0x3e, 0x34, 0xc6, 0xb7,
	0xe3, 0xd9, 0x7c, 0x7c, 0x35, 0xd7, 0x59, 0x2d, 0xb9, 0x53, 0xe0, 0x78, 0xf9, 0xf5, 0x72, 0x3e,
	0x55, 0x68, 0x5b, 0x52, 0xad, 0xdb, 0x23, 0x28, 0x2a, 0xc0, 0x69, 0x0d, 0x2a, 0x5d, 0x47, 0xbe,
	0x1c, 0x08, 0xe1, 0x91, 0x07, 0xf4, 0x00, 0xaa, 0xae, 0xe0, 0x7e, 0xc7, 0x09, 0xd8, 0x40, 0x0a,
	0x62, 0x51, 0x80, 0x52, 0x87, 0x87, 0x7d, 0x76, 0x49, 0x72, 0xe8, 0xda, 0xe1, 0xe1, 0x19, 0xf7,
	0xd9, 0x25, 0xc9, 0xd3, 0x2a, 0x94, 0x3b, 0xdc, 0x77, 0x7c, 0x97, 0x91, 0x02, 0xba, 0xf5, 0x58,
	0x9f, 0xfb, 0x9c, 0x14, 0xdb, 0x1f, 0x41, 0x35, 0x83, 0x36, 0xad, 0x40, 0xc1, 0xe3, 0x17, 0x8c,
	0x3c, 0xc0, 0x55, 0x97, 0xf5, 0x05, 0xb1, 0xda, 0xfd, 0xd4, 0x45, 0x35, 0xae, 0x0c, 0x79, 0x9f,
	0x85, 0xe4, 0x01, 0xb5, 0xa1, 0x78, 0xce, 0xba, 0x3d, 0x46, 0x2c, 0x7a, 0x04, 0x07, 0xae, 0x14,
	0x41, 0x10, 0x5d, 0x30, 0x7f, 0xc8, 0x22, 0xb4, 0xe7, 0xe8, 0x43, 0x38, 0xcc, 0x2a, 0xb5, 0x6f,
	0xbe, 0xdd, 0x02, 0x5b, 0x1d, 0x46, 0x25, 0xab, 0x40, 0x21, 0x18, 0x08, 0xcc, 0x56, 0x85, 0xf2,
	0xd9, 0x30, 0x1c, 0x4a, 0x16, 0x10, 0xab, 0xfd, 0x33, 0x28, 0x05, 0x77, 0xd7, 0x57, 0xcb, 0x39,
	0xee, 0xd6, 0x09, 0x5d, 0xf2, 0x00, 0x17, 0x2c, 0x3c, 0x27, 0x16, 0x2e, 0x86, 0x41, 0x97, 0xe4,
	0x70, 0xe1, 0x85, 0x2e, 0xc9, 0x2b, 0x1f, 0xf7, 0x9c, 0x14, 0xb4, 0x8f, 0x4b, 0x8a, 0xed, 0xbf,
	0x58, 0x50, 0x36, 0x97, 0x5e, 0x1d, 0x3d, 0x74, 0x23, 0x8c, 0x51, 0xbb, 0xb0, 0xf0, 0x3c, 0xc2,
	0x94, 0x56, 0x22, 0xe8, 0x6c, 0x55, 0x28, 0x7b, 0xc6, 0x2d, 0x9f, 0x08, 0xe8, 0x56, 0x48, 0x04,
	0xdc, 0xbd, 0xa8, 0xb2, 0xb9, 0x3a, 0xa6, 0x94, 0x08, 0xe8, 0x56, 0x4e, 0x04, 0x74, 0xab, 0xe8,
	0xd4, 0x3a, 0x9b, 0x9d, 0x08, 0xe8, 0x06, 0x89, 0x80, 0x6e, 0xd5, 0xf6, 0x9f, 0x2c, 0xb0, 0xd3,
	0x07, 0x88, 0x3a, 0xc7, 0x70, 0xa4, 0xb1, 0x0f, 0x98, 0xe7, 0x11, 0x8b, 0xd6, 0xc1, 0xee, 0x0c,
	0x47, 0x91, 0xc7, 0xfb, 0x1c, 0x21, 0x6d, 0x00, 0xa0, 0xc1, 0xc8, 0x79, 0xd5, 0xe4, 0xe1, 0x28,
	0x0a, 0x42, 0x31, 0x20, 0x05, 0x74, 0x56, 0x56, 0x25, 0x16, 0x29, 0x85, 0x46, 0x62, 0x34, 0x01,
	0x25, 0x6c, 0x54, 0xea, 0x62, 0x94, 0x65, 0xcc, 0xea, 0x7a, 0x22, 0xe0, 0x7e, 0x2f, 0xea, 0x8c,
	0x48, 0xa5, 0xfd, 0x67, 0x0b, 0x40, 0x55, 0x15, 0x6c, 0xc7, 0xdb, 0x18, 0x2b, 0x0e, 0x42, 0x47,
	0x86, 0x0c, 0x01, 0x04, 0x28, 0x0d, 0x3c, 0xc7, 0x65, 0x5d, 0x62, 0xe1, 0xee, 0x2e, 0x52, 0xca,
	0x63, 0x06, 0xc0, 0x81, 0x23, 0x43, 0xee, 0x78, 0x24, 0x8f, 0x6e, 0x67, 0xdc, 0x43, 0x43, 0x01,
	0xdd, 0x24, 0xfb, 0x9c, 0xb9, 0x98, 0x40, 0x01, 0xc8, 0x2e, 0x07, 0x5c, 0x32, 0x04, 0xf0, 0x00,
	0xaa, 0x92, 0xfd, 0x62, 0xc8, 0x82, 0x30, 0x72, 0xba, 0x5d, 0x52, 0xc6, 0x9a, 0x13, 0x45, 0x5f,
	0x74, 0xf9, 0xd9, 0x88, 0x54, 0xb2, 0x3a, 0xbd, 0x1d, 0xb1, 0xdb, 0x3f, 0x04, 0x72, 0xff, 0x01,
	0x8d, 0xf0, 0x9d, 0x89, 0x97, 0x9a, 0x2a, 0x5c, 0xb8, 0xfa, 0x3e, 0x48, 0x16, 0x0e, 0xa5, 0x4f,
	0x72, 0xed, 0xdf, 0x41, 0x55, 0x45, 0x98, 0x37, 0x01, 0x81, 0x9a, 0x90, 0x5d, 0x26, 0x23, 0xd7,
	0xe3, 0xcc, 0x47, 0x02, 0xa6, 0x9a, 0xbe, 0xe8, 0x70, 0x8f, 0x69, 0xf0, 0xb5, 0xe6, 0x0b, 0xd6,
	0x21, 0x39, 0xac, 0x43, 0x8b, 0x41, 0x28, 0x9d, 0x90, 0xf5, 0x46, 0xba, 0x01, 0x46, 0xe7, 0xe9,
	0x93, 0x6a, 0x29, 0x44, 0xfc, 0x77, 0x36, 0x41, 0x4a, 0x6d, 0x17, 0xea, 0x7b, 0x0f, 0x76, 0xac,
	0xb2, 0x97, 0x30, 0xbb, 0xeb, 0x8c, 0xf4, 0x7e, 0xc1, 0x80, 0xb9, 0xfc, 0x8c, 0x2b, 0x40, 0x0f,
	0xa1, 0x9e, 0x8a, 0x11, 0x7a, 0xe4, 0xdb, 0xff, 0xb0, 0xa0, 0xd2, 0x8d, 0xc7, 0x73, 0x45, 0x17,
	0x1c, 0x06, 0xcc, 0xf1, 0x22, 0xcd, 0x99, 0x3a, 0xd8, 0x4a, 0x32, 0xc4, 0x41, 0x36, 0x3a, 0x9e,
	0xba, 0xf0, 0x39, 0xc4, 0xc1, 0x95, 0xac, 0xab, 0x28, 0x83, 0xeb, 0x73, 0x47, 0xf6, 0x70, 0x10,
	0x60, 0xe3, 0x85, 0x94, 0xcc, 0x0d, 0xb9, 0xf0, 0x49, 0x11, 0x6f, 0x74, 0x47, 0xf8, 0xc3, 0x80,
	0x94, 0xb4, 0xa9, 0xdf, 0xe7, 0x41, 0x80, 0xa6, 0x32, 0x6e, 0xc6, 0xfd, 0x90, 0x49, 0x16, 0x84,
	0xa4, 0x82, 0x58, 0x21, 0xb5, 0xd2, 0xee, 0xdb, 0xaa, 0x58, 0x24, 0x56, 0xaa, 0x02, 0x55, 0x1f,
	0xbf, 0xe0, 0x5d, 0xe6, 0x77, 0x49, 0xb5, 0xfd, 0x02, 0x6c, 0xac, 0x5c, 0x8f, 0xd9, 0x12, 0xe4,
	0xb8, 0xaf, 0x8f, 0x2e, 0x86, 0x21, 0xb1, 0x70, 0x67, 0xee, 0xe3, 0x52, 0x15, 0x2b, 0x86, 0x21,
	0x32, 0x31, 0xdf, 0xfe, 0xab, 0x05, 0x80, 0x51, 0xa6, 0x69, 0x07, 0x50, 0x55, 0x67, 0x4c, 0x7b,
	0x96, 0x28, 0xd2, 0x96, 0x25, 0x98, 0xe8, 0x8e, 0x1d, 0x42, 0x5d, 0x63, 0xb2, 0x6b, 0x58, 0x15,
	0xca, 0x5a, 0xe5, 0xe9, 0x9b, 0xad, 0x04, 0xd5, 0xae, 0xd4, 0x22, 0x48, 0x49, 0x71, 0x56, 0x78,
	0x9e, 0xb8, 0x60, 0x52, 0x5f, 0xed, 0x8b, 0xbe, 0x23, 0x7b, 0xdc, 0x27, 0x15, 0x2c, 0x35, 0x18,
	0x78, 0x3c, 0x24, 0x36, 0x2e, 0x9d, 0xcf, 0x87, 0x41, 0x48, 0xa0, 0x3d, 0x81, 0xc6, 0xfe, 0x2b,
	0x14, 0xaf, 0xda, 0x40, 0x04, 0x1c, 0xa1, 0xdd, 0x15, 0x9c, 0x55, 0xa6, 0x45, 0x13, 0xa8, 0xa5,
	0x4a, 0x5d, 0xf8, 0x43, 0x38, 0x4c, 0x35, 0xbb, 0xe2, 0xdb, 0xa7, 0x50, 0xcd, 0x3c, 0xc8, 0xf6,
	0xe2, 0x34, 0x09, 0x0e, 0xa1, 0xbe, 0x8b, 0x53, 0x44, 0x68, 0x87, 0xe6, 0xd3, 0x4b, 0x7f, 0xe6,
	0xeb, 0xb1, 0xee, 0x78, 0x7a, 0x14, 0x0e, 0x98, 0xdf, 0xe5, 0x7e, 0x8f, 0x58, 0x6a, 0xe2, 0x78,
	0xe1, 0x40, 0xc3, 0x6f, 0x6e, 0x5e, 0x5e, 0xdf, 0x9f, 0xbe, 0xb8, 0x60, 0x9a, 0xdb, 0x38, 0x24,
	0x18, 0x36, 0xa6, 0xd8, 0xfe, 0x4f, 0x11, 0xca, 0xe6, 0xe5, 0x83, 0x89, 0xf4, 0xfd, 0xbe, 0xd4,
	0xf3, 0x41, 0x0b, 0x86, 0x76, 0xfa, 0xc2, 0xe6, 0x55, 0xad, 0x6a, 0x6e, 0x44, 0xa1, 0x74, 0xba,
	0x98, 0x10, 0x2b, 0x11, 0x3e, 0x23, 0x45, 0xb4, 0xe1, 0x2a, 0x4a, 0xc6, 0x47, 0x09, 0x81, 0x65,
	0x52, 0x0a, 0x83, 0x7d, 0xc8, 0xfb, 0x0c, 0xb9, 0xa1, 0xc6, 0x2a, 0xf7, 0x2f, 0x1c, 0x8f, 0x23,
	0xe5, 0x28, 0x34, 0x8c, 0x10, 0x5d, 0x08, 0x6f, 0xd8, 0x67, 0x04, 0x10, 0x80, 0x44, 0x37, 0x90,
	0xdc, 0x65, 0xa4, 0x9a, 0x55, 0xe1, 0xd4, 0x0b, 0x48, 0x0d, 0x23, 0x55, 0x15, 0x51, 0x97, 0x07,
	0x4e, 0x07, 0xd9, 0x5a, 0x47, 0xb7, 0xbe, 0x23, 0x5f, 0xb2, 0x30, 0x52, 0xc7, 0xec, 0x92, 0x06,
	0x1e, 0xd9, 0x17, 0x51, 0x5f, 0xf8, 0x6c, 0x44, 0x0e, 0x14, 0xb6, 0x98, 0x32, 0x72, 0xcf, 0x1d,
	0xbf, 0xc7, 0xba, 0x84, 0xe0, 0x9d, 0xd3, 0x2a, 0x71, 0x76, 0x46, 0x0e, 0xe9, 0x23, 0xa0, 0xc9,
	0x4e, 0x6a, 0xc4, 0x39, 0xea, 0x5a, 0x51, 0x8c, 0x34, 0xb3, 0xc6, 0x44, 0x1e, 0x61, 0x83, 0x43,
	0x21, 0xa2, 0xbe, 0xe3, 0x8f, 0x22, 0x33, 0xdc, 0x02, 0xf2, 0x10, 0x6f, 0x9d, 0x2f, 0x8c, 0x5b,
	0x40, 0x1e, 0x61, 0xc6, 0x80, 0xc9, 0x0b, 0x26, 0x93, 0x4a, 0x83, 0xc8, 0x09, 0xc9, 0x63, 0xd4,
	0x6b, 0x4a, 0xed, 0xe9, 0x9b, 0x88, 0xb8, 0x27, 0xdc, 0x97, 0xac, 0x4b, 0xde, 0x55, 0x23, 0x58,
	0x8a, 0x57, 0xcc, 0x27, 0x4f, 0x10, 0xe1, 0xa4, 0x32, 0x1c, 0xcb, 0xe4, 0xa9, 0xbe, 0xdf, 0xbe,
	0x6f, 0xae, 0xfe, 0x7b, 0x6a, 0xd6, 0xf9, 0x1e, 0x16, 0xe3, 0x78, 0xe4, 0x7d, 0x0c, 0x50, 0xbf,
	0x0e, 0x91, 0x2a, 0x3c, 0x20, 0x1f, 0xec, 0x34, 0x06, 0xeb, 0x0f, 0xb3, 0xc0, 0x2a, 0x2f, 0x72,
	0x7c, 0x8f, 0xf3, 0x0a, 0xc6, 0x8f, 0xd4, 0x3b, 0x40, 0x31, 0x47, 0x83, 0xc0, 0x2e, 0x79, 0x10,
	0x92, 0x16, 0xfa, 0xea, 0x84, 0x49, 0x44, 0x40, 0x3e, 0xc6, 0x9c, 0x9a, 0x3e, 0xc9, 0xa8, 0xff,
	0x3f, 0xac, 0xcc, 0x13, 0x7e, 0x2f, 0xc2, 0xf2, 0xc8, 0xff, 0xab, 0x9f, 0xc0, 0x73, 0x21, 0x43,
	0x2d, 0x7f, 0x92, 0xfc, 0x78, 0x31, 0x2d, 0x7f, 0x8f, 0xbe, 0x0b, 0x0f, 0x93, 0x5f, 0x8b, 0x2f,
	0x78, 0x78, 0x1e, 0xf9, 0x22, 0x0a, 0xc5, 0x4b, 0xe6, 0x93, 0x93, 0x6c, 0xc1, 0x5a, 0xf5, 0x7d,
	0xfa, 0x14, 0x1e, 0x27, 0xaa, 0xf4, 0x37, 0x46, 0xf8, 0x21, 0xbb, 0x0c, 0x49, 0x1b, 0x2b, 0xbc,
	0x67, 0x24, 0xcf, 0x4e, 0xff, 0x6e, 0x41, 0xde, 0x19, 0x70, 0x7a, 0x6a, 0x7e, 0xb9, 0x83, 0x78,
	0x31, 0xa5, 0x87, 0xbb, 0xbf, 0xd3, 0xcc, 0xa7, 0xc8, 0x13, 0x92, 0x55, 0xe1, 0x07, 0x44, 0xeb,
	0x01, 0xfd, 0x0c, 0x6a, 0xbd, 0x78, 0x9b, 0x7e, 0x35, 0xd1, 0x77, 0xee, 0x7d, 0xbd, 0xea, 0xc8,
	0x7d, 0xed, 0x26, 0x8d, 0xfe, 0x09, 0x40, 0x2f, 0xde, 0x26, 0xcf, 0xf9, 0xa3, 0xbd, 0x27, 0xbf,
	0x09, 0xa5, 0xfb, 0x4a, 0x1d, 0x78, 0x55, 0x52, 0xff, 0x0c, 0xbe, 0xf8, 0x6f, 0x00, 0x00, 0x00,
	0xff, 0xff, 0xb4, 0x04, 0x36, 0xcb, 0x26, 0x14, 0x00, 0x00,
}
