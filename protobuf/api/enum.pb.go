// Code generated by protoc-gen-go. DO NOT EDIT.
// source: enum.proto

package api

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Venue int32

const (
	Venue_DARKPOOL    Venue = 0
	Venue_COINBASEPRO Venue = 1
	Venue_BITMEX      Venue = 2
	Venue_BITFINEX    Venue = 3
	Venue_BINANCE     Venue = 4
	Venue_GEMINI      Venue = 5
	Venue_KRAKEN      Venue = 6
	Venue_OKEX        Venue = 7
	Venue_BITSTAMP    Venue = 8
	Venue_HUOBIPRO    Venue = 9
)

var Venue_name = map[int32]string{
	0: "DARKPOOL",
	1: "COINBASEPRO",
	2: "BITMEX",
	3: "BITFINEX",
	4: "BINANCE",
	5: "GEMINI",
	6: "KRAKEN",
	7: "OKEX",
	8: "BITSTAMP",
	9: "HUOBIPRO",
}
var Venue_value = map[string]int32{
	"DARKPOOL":    0,
	"COINBASEPRO": 1,
	"BITMEX":      2,
	"BITFINEX":    3,
	"BINANCE":     4,
	"GEMINI":      5,
	"KRAKEN":      6,
	"OKEX":        7,
	"BITSTAMP":    8,
	"HUOBIPRO":    9,
}

func (x Venue) String() string {
	return proto.EnumName(Venue_name, int32(x))
}
func (Venue) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_enum_066c4166dc13255d, []int{0}
}

type SystemMode int32

const (
	SystemMode_DEMO        SystemMode = 0
	SystemMode_LIVE        SystemMode = 1
	SystemMode_BACKTESTING SystemMode = 2
)

var SystemMode_name = map[int32]string{
	0: "DEMO",
	1: "LIVE",
	2: "BACKTESTING",
}
var SystemMode_value = map[string]int32{
	"DEMO":        0,
	"LIVE":        1,
	"BACKTESTING": 2,
}

func (x SystemMode) String() string {
	return proto.EnumName(SystemMode_name, int32(x))
}
func (SystemMode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_enum_066c4166dc13255d, []int{1}
}

type AccountType int32

const (
	AccountType_NET   AccountType = 0
	AccountType_HEDGE AccountType = 1
)

var AccountType_name = map[int32]string{
	0: "NET",
	1: "HEDGE",
}
var AccountType_value = map[string]int32{
	"NET":   0,
	"HEDGE": 1,
}

func (x AccountType) String() string {
	return proto.EnumName(AccountType_name, int32(x))
}
func (AccountType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_enum_066c4166dc13255d, []int{2}
}

type VenueType int32

const (
	VenueType_SPOT    VenueType = 0
	VenueType_FUTURES VenueType = 1
)

var VenueType_name = map[int32]string{
	0: "SPOT",
	1: "FUTURES",
}
var VenueType_value = map[string]int32{
	"SPOT":    0,
	"FUTURES": 1,
}

func (x VenueType) String() string {
	return proto.EnumName(VenueType_name, int32(x))
}
func (VenueType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_enum_066c4166dc13255d, []int{3}
}

type Currency int32

const (
	Currency_BTC  Currency = 0
	Currency_USD  Currency = 1
	Currency_ETH  Currency = 2
	Currency_EOS  Currency = 3
	Currency_XRP  Currency = 4
	Currency_BCH  Currency = 5
	Currency_LTC  Currency = 6
	Currency_XLM  Currency = 7
	Currency_ADA  Currency = 8
	Currency_ZEC  Currency = 9
	Currency_QTUM Currency = 10
	Currency_NANO Currency = 11
	Currency_ETC  Currency = 12
)

var Currency_name = map[int32]string{
	0:  "BTC",
	1:  "USD",
	2:  "ETH",
	3:  "EOS",
	4:  "XRP",
	5:  "BCH",
	6:  "LTC",
	7:  "XLM",
	8:  "ADA",
	9:  "ZEC",
	10: "QTUM",
	11: "NANO",
	12: "ETC",
}
var Currency_value = map[string]int32{
	"BTC":  0,
	"USD":  1,
	"ETH":  2,
	"EOS":  3,
	"XRP":  4,
	"BCH":  5,
	"LTC":  6,
	"XLM":  7,
	"ADA":  8,
	"ZEC":  9,
	"QTUM": 10,
	"NANO": 11,
	"ETC":  12,
}

func (x Currency) String() string {
	return proto.EnumName(Currency_name, int32(x))
}
func (Currency) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_enum_066c4166dc13255d, []int{4}
}

type Product int32

const (
	Product_BTC_USD  Product = 0
	Product_ETH_BTC  Product = 1
	Product_ETH_USD  Product = 2
	Product_EOS_USD  Product = 3
	Product_EOS_BTC  Product = 4
	Product_EOS_ETH  Product = 5
	Product_XRP_USD  Product = 6
	Product_XRP_BTC  Product = 7
	Product_XRP_ETH  Product = 8
	Product_BCH_USD  Product = 9
	Product_BCH_BTC  Product = 10
	Product_BCH_ETH  Product = 11
	Product_LTC_USD  Product = 12
	Product_LTC_BTC  Product = 13
	Product_LTC_ETH  Product = 14
	Product_XLM_USD  Product = 15
	Product_XLM_BTC  Product = 16
	Product_XLM_ETH  Product = 17
	Product_ADA_USD  Product = 18
	Product_ADA_BTC  Product = 19
	Product_ADA_ETH  Product = 20
	Product_ZEC_USD  Product = 21
	Product_ZEC_BTC  Product = 22
	Product_ZEC_ETH  Product = 23
	Product_QTUM_USD Product = 24
	Product_QTUM_BTC Product = 25
	Product_QTUM_ETH Product = 26
	Product_NANO_USD Product = 27
	Product_NANO_BTC Product = 28
	Product_NANO_ETH Product = 29
	Product_ETC_USD  Product = 30
	Product_ETC_BTC  Product = 31
	Product_ETC_ETH  Product = 32
)

var Product_name = map[int32]string{
	0:  "BTC_USD",
	1:  "ETH_BTC",
	2:  "ETH_USD",
	3:  "EOS_USD",
	4:  "EOS_BTC",
	5:  "EOS_ETH",
	6:  "XRP_USD",
	7:  "XRP_BTC",
	8:  "XRP_ETH",
	9:  "BCH_USD",
	10: "BCH_BTC",
	11: "BCH_ETH",
	12: "LTC_USD",
	13: "LTC_BTC",
	14: "LTC_ETH",
	15: "XLM_USD",
	16: "XLM_BTC",
	17: "XLM_ETH",
	18: "ADA_USD",
	19: "ADA_BTC",
	20: "ADA_ETH",
	21: "ZEC_USD",
	22: "ZEC_BTC",
	23: "ZEC_ETH",
	24: "QTUM_USD",
	25: "QTUM_BTC",
	26: "QTUM_ETH",
	27: "NANO_USD",
	28: "NANO_BTC",
	29: "NANO_ETH",
	30: "ETC_USD",
	31: "ETC_BTC",
	32: "ETC_ETH",
}
var Product_value = map[string]int32{
	"BTC_USD":  0,
	"ETH_BTC":  1,
	"ETH_USD":  2,
	"EOS_USD":  3,
	"EOS_BTC":  4,
	"EOS_ETH":  5,
	"XRP_USD":  6,
	"XRP_BTC":  7,
	"XRP_ETH":  8,
	"BCH_USD":  9,
	"BCH_BTC":  10,
	"BCH_ETH":  11,
	"LTC_USD":  12,
	"LTC_BTC":  13,
	"LTC_ETH":  14,
	"XLM_USD":  15,
	"XLM_BTC":  16,
	"XLM_ETH":  17,
	"ADA_USD":  18,
	"ADA_BTC":  19,
	"ADA_ETH":  20,
	"ZEC_USD":  21,
	"ZEC_BTC":  22,
	"ZEC_ETH":  23,
	"QTUM_USD": 24,
	"QTUM_BTC": 25,
	"QTUM_ETH": 26,
	"NANO_USD": 27,
	"NANO_BTC": 28,
	"NANO_ETH": 29,
	"ETC_USD":  30,
	"ETC_BTC":  31,
	"ETC_ETH":  32,
}

func (x Product) String() string {
	return proto.EnumName(Product_name, int32(x))
}
func (Product) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_enum_066c4166dc13255d, []int{5}
}

type OrderState int32

const (
	OrderState_STARTED        OrderState = 0
	OrderState_PLACED         OrderState = 1
	OrderState_CANCELED       OrderState = 2
	OrderState_PARTIAL        OrderState = 3
	OrderState_FILLED         OrderState = 4
	OrderState_REJECTED       OrderState = 5
	OrderState_EXPIRED        OrderState = 6
	OrderState_REQUEST_ADD    OrderState = 7
	OrderState_REQUEST_MODIFY OrderState = 8
	OrderState_REQUEST_CANCEL OrderState = 9
)

var OrderState_name = map[int32]string{
	0: "STARTED",
	1: "PLACED",
	2: "CANCELED",
	3: "PARTIAL",
	4: "FILLED",
	5: "REJECTED",
	6: "EXPIRED",
	7: "REQUEST_ADD",
	8: "REQUEST_MODIFY",
	9: "REQUEST_CANCEL",
}
var OrderState_value = map[string]int32{
	"STARTED":        0,
	"PLACED":         1,
	"CANCELED":       2,
	"PARTIAL":        3,
	"FILLED":         4,
	"REJECTED":       5,
	"EXPIRED":        6,
	"REQUEST_ADD":    7,
	"REQUEST_MODIFY": 8,
	"REQUEST_CANCEL": 9,
}

func (x OrderState) String() string {
	return proto.EnumName(OrderState_name, int32(x))
}
func (OrderState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_enum_066c4166dc13255d, []int{6}
}

type OrderTypeFilling int32

const (
	OrderTypeFilling_FOK    OrderTypeFilling = 0
	OrderTypeFilling_IOC    OrderTypeFilling = 1
	OrderTypeFilling_RETURN OrderTypeFilling = 2
)

var OrderTypeFilling_name = map[int32]string{
	0: "FOK",
	1: "IOC",
	2: "RETURN",
}
var OrderTypeFilling_value = map[string]int32{
	"FOK":    0,
	"IOC":    1,
	"RETURN": 2,
}

func (x OrderTypeFilling) String() string {
	return proto.EnumName(OrderTypeFilling_name, int32(x))
}
func (OrderTypeFilling) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_enum_066c4166dc13255d, []int{7}
}

type Reason int32

const (
	Reason_ORDER_CLIENT   Reason = 0
	Reason_ORDER_MOBILE   Reason = 1
	Reason_ORDER_WEB      Reason = 2
	Reason_ORDER_STRATEGY Reason = 3
	Reason_ORDER_SL       Reason = 4
	Reason_ORDER_TP       Reason = 5
	Reason_ORDER_SO       Reason = 6
)

var Reason_name = map[int32]string{
	0: "ORDER_CLIENT",
	1: "ORDER_MOBILE",
	2: "ORDER_WEB",
	3: "ORDER_STRATEGY",
	4: "ORDER_SL",
	5: "ORDER_TP",
	6: "ORDER_SO",
}
var Reason_value = map[string]int32{
	"ORDER_CLIENT":   0,
	"ORDER_MOBILE":   1,
	"ORDER_WEB":      2,
	"ORDER_STRATEGY": 3,
	"ORDER_SL":       4,
	"ORDER_TP":       5,
	"ORDER_SO":       6,
}

func (x Reason) String() string {
	return proto.EnumName(Reason_name, int32(x))
}
func (Reason) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_enum_066c4166dc13255d, []int{8}
}

type OrderTypeTime int32

const (
	OrderTypeTime_GTC           OrderTypeTime = 0
	OrderTypeTime_DAY           OrderTypeTime = 1
	OrderTypeTime_SPECIFIED     OrderTypeTime = 2
	OrderTypeTime_SPECIFIED_DAY OrderTypeTime = 3
)

var OrderTypeTime_name = map[int32]string{
	0: "GTC",
	1: "DAY",
	2: "SPECIFIED",
	3: "SPECIFIED_DAY",
}
var OrderTypeTime_value = map[string]int32{
	"GTC":           0,
	"DAY":           1,
	"SPECIFIED":     2,
	"SPECIFIED_DAY": 3,
}

func (x OrderTypeTime) String() string {
	return proto.EnumName(OrderTypeTime_name, int32(x))
}
func (OrderTypeTime) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_enum_066c4166dc13255d, []int{9}
}

type OrderEntryType int32

const (
	OrderEntryType_IN     OrderEntryType = 0
	OrderEntryType_OUT    OrderEntryType = 1
	OrderEntryType_INOUT  OrderEntryType = 2
	OrderEntryType_OUT_BY OrderEntryType = 3
)

var OrderEntryType_name = map[int32]string{
	0: "IN",
	1: "OUT",
	2: "INOUT",
	3: "OUT_BY",
}
var OrderEntryType_value = map[string]int32{
	"IN":     0,
	"OUT":    1,
	"INOUT":  2,
	"OUT_BY": 3,
}

func (x OrderEntryType) String() string {
	return proto.EnumName(OrderEntryType_name, int32(x))
}
func (OrderEntryType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_enum_066c4166dc13255d, []int{10}
}

type Side int32

const (
	Side_BUY  Side = 0
	Side_SELL Side = 1
)

var Side_name = map[int32]string{
	0: "BUY",
	1: "SELL",
}
var Side_value = map[string]int32{
	"BUY":  0,
	"SELL": 1,
}

func (x Side) String() string {
	return proto.EnumName(Side_name, int32(x))
}
func (Side) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_enum_066c4166dc13255d, []int{11}
}

type OrderType int32

const (
	OrderType_MARKET     OrderType = 0
	OrderType_LIMIT      OrderType = 1
	OrderType_STOP       OrderType = 2
	OrderType_STOP_LIMIT OrderType = 3
	OrderType_CLOSING_BY OrderType = 4
)

var OrderType_name = map[int32]string{
	0: "MARKET",
	1: "LIMIT",
	2: "STOP",
	3: "STOP_LIMIT",
	4: "CLOSING_BY",
}
var OrderType_value = map[string]int32{
	"MARKET":     0,
	"LIMIT":      1,
	"STOP":       2,
	"STOP_LIMIT": 3,
	"CLOSING_BY": 4,
}

func (x OrderType) String() string {
	return proto.EnumName(OrderType_name, int32(x))
}
func (OrderType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_enum_066c4166dc13255d, []int{12}
}

type DealType int32

const (
	DealType_POSITION      DealType = 0
	DealType_BALANCE       DealType = 1
	DealType_CREDIT        DealType = 2
	DealType_CHARGE        DealType = 3
	DealType_CORRECTION    DealType = 4
	DealType_BONUS         DealType = 5
	DealType_COMMISSION    DealType = 6
	DealType_INTEREST      DealType = 7
	DealType_BUY_CANCELED  DealType = 8
	DealType_SELL_CANCELED DealType = 9
	DealType_DIVIDEND      DealType = 10
)

var DealType_name = map[int32]string{
	0:  "POSITION",
	1:  "BALANCE",
	2:  "CREDIT",
	3:  "CHARGE",
	4:  "CORRECTION",
	5:  "BONUS",
	6:  "COMMISSION",
	7:  "INTEREST",
	8:  "BUY_CANCELED",
	9:  "SELL_CANCELED",
	10: "DIVIDEND",
}
var DealType_value = map[string]int32{
	"POSITION":      0,
	"BALANCE":       1,
	"CREDIT":        2,
	"CHARGE":        3,
	"CORRECTION":    4,
	"BONUS":         5,
	"COMMISSION":    6,
	"INTEREST":      7,
	"BUY_CANCELED":  8,
	"SELL_CANCELED": 9,
	"DIVIDEND":      10,
}

func (x DealType) String() string {
	return proto.EnumName(DealType_name, int32(x))
}
func (DealType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_enum_066c4166dc13255d, []int{13}
}

type TradeAction int32

const (
	TradeAction_DEAL     TradeAction = 0
	TradeAction_PENDING  TradeAction = 1
	TradeAction_SLTP     TradeAction = 2
	TradeAction_MODIFY   TradeAction = 3
	TradeAction_REMOVE   TradeAction = 4
	TradeAction_CLOSE_BY TradeAction = 5
)

var TradeAction_name = map[int32]string{
	0: "DEAL",
	1: "PENDING",
	2: "SLTP",
	3: "MODIFY",
	4: "REMOVE",
	5: "CLOSE_BY",
}
var TradeAction_value = map[string]int32{
	"DEAL":     0,
	"PENDING":  1,
	"SLTP":     2,
	"MODIFY":   3,
	"REMOVE":   4,
	"CLOSE_BY": 5,
}

func (x TradeAction) String() string {
	return proto.EnumName(TradeAction_name, int32(x))
}
func (TradeAction) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_enum_066c4166dc13255d, []int{14}
}

type Retcode int32

const (
	Retcode_REJECTX               Retcode = 0
	Retcode_REJECT                Retcode = 2
	Retcode_CANCEL                Retcode = 3
	Retcode_PLACED_TRADE          Retcode = 4
	Retcode_DONE                  Retcode = 5
	Retcode_DONE_PARTIAL          Retcode = 6
	Retcode_ERROR                 Retcode = 7
	Retcode_TIMEOUT               Retcode = 8
	Retcode_INVALID               Retcode = 9
	Retcode_INVALID_VOLUME        Retcode = 10
	Retcode_INVALID_PRICE         Retcode = 11
	Retcode_INVALID_STOPS         Retcode = 12
	Retcode_TRADE_DISABLED        Retcode = 13
	Retcode_MARKET_CLOSED         Retcode = 14
	Retcode_NO_MONEY              Retcode = 15
	Retcode_PRICE_CHANGED         Retcode = 16
	Retcode_PRICE_OFF             Retcode = 17
	Retcode_INVALID_EXPIRATION    Retcode = 18
	Retcode_ORDER_CHANGED         Retcode = 19
	Retcode_TOO_MANY_REQUESTS     Retcode = 21
	Retcode_NO_CHANGES            Retcode = 22
	Retcode_SERVER_DISABLES_AT    Retcode = 23
	Retcode_CLIENT_DISABLES_AT    Retcode = 24
	Retcode_LOCKED                Retcode = 25
	Retcode_FROZEN                Retcode = 26
	Retcode_INVALID_FILL          Retcode = 27
	Retcode_CONNECTION            Retcode = 28
	Retcode_ONLY_REAL             Retcode = 29
	Retcode_LIMIT_ORDERS          Retcode = 30
	Retcode_LIMIT_VOLUME          Retcode = 31
	Retcode_INVALID_ORDER         Retcode = 32
	Retcode_POSITION_CLOSED       Retcode = 33
	Retcode_CLOSE_ORDER_EXIST     Retcode = 34
	Retcode_LIMIT_POSITIONS       Retcode = 35
	Retcode_REJECT_CANCEL         Retcode = 36
	Retcode_LONG_ONLY             Retcode = 37
	Retcode_SHORT_ONLY            Retcode = 38
	Retcode_CLOSE_ONLY            Retcode = 39
	Retcode_REQUEST_WITH_NO_TOKEN Retcode = 40
	Retcode_INVALID_TOKEN         Retcode = 41
	Retcode_INVALID_REQUEST       Retcode = 42
)

var Retcode_name = map[int32]string{
	0:  "REJECTX",
	2:  "REJECT",
	3:  "CANCEL",
	4:  "PLACED_TRADE",
	5:  "DONE",
	6:  "DONE_PARTIAL",
	7:  "ERROR",
	8:  "TIMEOUT",
	9:  "INVALID",
	10: "INVALID_VOLUME",
	11: "INVALID_PRICE",
	12: "INVALID_STOPS",
	13: "TRADE_DISABLED",
	14: "MARKET_CLOSED",
	15: "NO_MONEY",
	16: "PRICE_CHANGED",
	17: "PRICE_OFF",
	18: "INVALID_EXPIRATION",
	19: "ORDER_CHANGED",
	21: "TOO_MANY_REQUESTS",
	22: "NO_CHANGES",
	23: "SERVER_DISABLES_AT",
	24: "CLIENT_DISABLES_AT",
	25: "LOCKED",
	26: "FROZEN",
	27: "INVALID_FILL",
	28: "CONNECTION",
	29: "ONLY_REAL",
	30: "LIMIT_ORDERS",
	31: "LIMIT_VOLUME",
	32: "INVALID_ORDER",
	33: "POSITION_CLOSED",
	34: "CLOSE_ORDER_EXIST",
	35: "LIMIT_POSITIONS",
	36: "REJECT_CANCEL",
	37: "LONG_ONLY",
	38: "SHORT_ONLY",
	39: "CLOSE_ONLY",
	40: "REQUEST_WITH_NO_TOKEN",
	41: "INVALID_TOKEN",
	42: "INVALID_REQUEST",
}
var Retcode_value = map[string]int32{
	"REJECTX":               0,
	"REJECT":                2,
	"CANCEL":                3,
	"PLACED_TRADE":          4,
	"DONE":                  5,
	"DONE_PARTIAL":          6,
	"ERROR":                 7,
	"TIMEOUT":               8,
	"INVALID":               9,
	"INVALID_VOLUME":        10,
	"INVALID_PRICE":         11,
	"INVALID_STOPS":         12,
	"TRADE_DISABLED":        13,
	"MARKET_CLOSED":         14,
	"NO_MONEY":              15,
	"PRICE_CHANGED":         16,
	"PRICE_OFF":             17,
	"INVALID_EXPIRATION":    18,
	"ORDER_CHANGED":         19,
	"TOO_MANY_REQUESTS":     21,
	"NO_CHANGES":            22,
	"SERVER_DISABLES_AT":    23,
	"CLIENT_DISABLES_AT":    24,
	"LOCKED":                25,
	"FROZEN":                26,
	"INVALID_FILL":          27,
	"CONNECTION":            28,
	"ONLY_REAL":             29,
	"LIMIT_ORDERS":          30,
	"LIMIT_VOLUME":          31,
	"INVALID_ORDER":         32,
	"POSITION_CLOSED":       33,
	"CLOSE_ORDER_EXIST":     34,
	"LIMIT_POSITIONS":       35,
	"REJECT_CANCEL":         36,
	"LONG_ONLY":             37,
	"SHORT_ONLY":            38,
	"CLOSE_ONLY":            39,
	"REQUEST_WITH_NO_TOKEN": 40,
	"INVALID_TOKEN":         41,
	"INVALID_REQUEST":       42,
}

func (x Retcode) String() string {
	return proto.EnumName(Retcode_name, int32(x))
}
func (Retcode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_enum_066c4166dc13255d, []int{15}
}

type GranularityTime int32

const (
	GranularityTime_TIME_0   GranularityTime = 0
	GranularityTime_TIME_5S  GranularityTime = 5
	GranularityTime_TIME_10S GranularityTime = 10
	GranularityTime_TIME_15S GranularityTime = 15
	GranularityTime_TIME_30S GranularityTime = 30
	GranularityTime_TIME_1M  GranularityTime = 60
	GranularityTime_TIME_2M  GranularityTime = 120
	GranularityTime_TIME_3M  GranularityTime = 180
	GranularityTime_TIME_4M  GranularityTime = 240
	GranularityTime_TIME_5M  GranularityTime = 300
	GranularityTime_TIME_6M  GranularityTime = 360
	GranularityTime_TIME_7M  GranularityTime = 420
	GranularityTime_TIME_8M  GranularityTime = 480
	GranularityTime_TIME_9M  GranularityTime = 540
	GranularityTime_TIME_10M GranularityTime = 600
	GranularityTime_TIME_15M GranularityTime = 900
	GranularityTime_TIME_20M GranularityTime = 1200
	GranularityTime_TIME_30M GranularityTime = 1800
	GranularityTime_TIME_40M GranularityTime = 2400
	GranularityTime_TIME_50M GranularityTime = 3000
	GranularityTime_TIME_1H  GranularityTime = 3600
	GranularityTime_TIME_2H  GranularityTime = 7200
	GranularityTime_TIME_3H  GranularityTime = 10800
	GranularityTime_TIME_4H  GranularityTime = 14400
	GranularityTime_TIME_5H  GranularityTime = 18000
	GranularityTime_TIME_6H  GranularityTime = 21600
	GranularityTime_TIME_7H  GranularityTime = 25200
	GranularityTime_TIME_8H  GranularityTime = 28800
	GranularityTime_TIME_9H  GranularityTime = 32400
	GranularityTime_TIME_10H GranularityTime = 36000
	GranularityTime_TIME_11H GranularityTime = 39600
	GranularityTime_TIME_12H GranularityTime = 43200
	GranularityTime_TIME_1D  GranularityTime = 86400
)

var GranularityTime_name = map[int32]string{
	0:     "TIME_0",
	5:     "TIME_5S",
	10:    "TIME_10S",
	15:    "TIME_15S",
	30:    "TIME_30S",
	60:    "TIME_1M",
	120:   "TIME_2M",
	180:   "TIME_3M",
	240:   "TIME_4M",
	300:   "TIME_5M",
	360:   "TIME_6M",
	420:   "TIME_7M",
	480:   "TIME_8M",
	540:   "TIME_9M",
	600:   "TIME_10M",
	900:   "TIME_15M",
	1200:  "TIME_20M",
	1800:  "TIME_30M",
	2400:  "TIME_40M",
	3000:  "TIME_50M",
	3600:  "TIME_1H",
	7200:  "TIME_2H",
	10800: "TIME_3H",
	14400: "TIME_4H",
	18000: "TIME_5H",
	21600: "TIME_6H",
	25200: "TIME_7H",
	28800: "TIME_8H",
	32400: "TIME_9H",
	36000: "TIME_10H",
	39600: "TIME_11H",
	43200: "TIME_12H",
	86400: "TIME_1D",
}
var GranularityTime_value = map[string]int32{
	"TIME_0":   0,
	"TIME_5S":  5,
	"TIME_10S": 10,
	"TIME_15S": 15,
	"TIME_30S": 30,
	"TIME_1M":  60,
	"TIME_2M":  120,
	"TIME_3M":  180,
	"TIME_4M":  240,
	"TIME_5M":  300,
	"TIME_6M":  360,
	"TIME_7M":  420,
	"TIME_8M":  480,
	"TIME_9M":  540,
	"TIME_10M": 600,
	"TIME_15M": 900,
	"TIME_20M": 1200,
	"TIME_30M": 1800,
	"TIME_40M": 2400,
	"TIME_50M": 3000,
	"TIME_1H":  3600,
	"TIME_2H":  7200,
	"TIME_3H":  10800,
	"TIME_4H":  14400,
	"TIME_5H":  18000,
	"TIME_6H":  21600,
	"TIME_7H":  25200,
	"TIME_8H":  28800,
	"TIME_9H":  32400,
	"TIME_10H": 36000,
	"TIME_11H": 39600,
	"TIME_12H": 43200,
	"TIME_1D":  86400,
}

func (x GranularityTime) String() string {
	return proto.EnumName(GranularityTime_name, int32(x))
}
func (GranularityTime) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_enum_066c4166dc13255d, []int{16}
}

type GranularityTick int32

const (
	GranularityTick_TICK_0     GranularityTick = 0
	GranularityTick_TICK_1     GranularityTick = 1
	GranularityTick_TICK_5     GranularityTick = 5
	GranularityTick_TICK_10    GranularityTick = 10
	GranularityTick_TICK_15    GranularityTick = 15
	GranularityTick_TICK_20    GranularityTick = 20
	GranularityTick_TICK_30    GranularityTick = 30
	GranularityTick_TICK_50    GranularityTick = 50
	GranularityTick_TICK_100   GranularityTick = 100
	GranularityTick_TICK_150   GranularityTick = 150
	GranularityTick_TICK_200   GranularityTick = 200
	GranularityTick_TICK_250   GranularityTick = 250
	GranularityTick_TICK_300   GranularityTick = 300
	GranularityTick_TICK_350   GranularityTick = 350
	GranularityTick_TICK_400   GranularityTick = 400
	GranularityTick_TICK_450   GranularityTick = 450
	GranularityTick_TICK_500   GranularityTick = 500
	GranularityTick_TICK_1000  GranularityTick = 1000
	GranularityTick_TICK_1500  GranularityTick = 1500
	GranularityTick_TICK_2000  GranularityTick = 2000
	GranularityTick_TICK_3000  GranularityTick = 3000
	GranularityTick_TICK_4000  GranularityTick = 4000
	GranularityTick_TICK_5000  GranularityTick = 5000
	GranularityTick_TICK_10000 GranularityTick = 10000
)

var GranularityTick_name = map[int32]string{
	0:     "TICK_0",
	1:     "TICK_1",
	5:     "TICK_5",
	10:    "TICK_10",
	15:    "TICK_15",
	20:    "TICK_20",
	30:    "TICK_30",
	50:    "TICK_50",
	100:   "TICK_100",
	150:   "TICK_150",
	200:   "TICK_200",
	250:   "TICK_250",
	300:   "TICK_300",
	350:   "TICK_350",
	400:   "TICK_400",
	450:   "TICK_450",
	500:   "TICK_500",
	1000:  "TICK_1000",
	1500:  "TICK_1500",
	2000:  "TICK_2000",
	3000:  "TICK_3000",
	4000:  "TICK_4000",
	5000:  "TICK_5000",
	10000: "TICK_10000",
}
var GranularityTick_value = map[string]int32{
	"TICK_0":     0,
	"TICK_1":     1,
	"TICK_5":     5,
	"TICK_10":    10,
	"TICK_15":    15,
	"TICK_20":    20,
	"TICK_30":    30,
	"TICK_50":    50,
	"TICK_100":   100,
	"TICK_150":   150,
	"TICK_200":   200,
	"TICK_250":   250,
	"TICK_300":   300,
	"TICK_350":   350,
	"TICK_400":   400,
	"TICK_450":   450,
	"TICK_500":   500,
	"TICK_1000":  1000,
	"TICK_1500":  1500,
	"TICK_2000":  2000,
	"TICK_3000":  3000,
	"TICK_4000":  4000,
	"TICK_5000":  5000,
	"TICK_10000": 10000,
}

func (x GranularityTick) String() string {
	return proto.EnumName(GranularityTick_name, int32(x))
}
func (GranularityTick) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_enum_066c4166dc13255d, []int{17}
}

type GranularityVolume int32

const (
	GranularityVolume_VOL_0     GranularityVolume = 0
	GranularityVolume_VOL_1     GranularityVolume = 1
	GranularityVolume_VOL_5     GranularityVolume = 5
	GranularityVolume_VOL_10    GranularityVolume = 10
	GranularityVolume_VOL_15    GranularityVolume = 15
	GranularityVolume_VOL_20    GranularityVolume = 20
	GranularityVolume_VOL_30    GranularityVolume = 30
	GranularityVolume_VOL_50    GranularityVolume = 50
	GranularityVolume_VOL_100   GranularityVolume = 100
	GranularityVolume_VOL_150   GranularityVolume = 150
	GranularityVolume_VOL_200   GranularityVolume = 200
	GranularityVolume_VOL_250   GranularityVolume = 250
	GranularityVolume_VOL_300   GranularityVolume = 300
	GranularityVolume_VOL_350   GranularityVolume = 350
	GranularityVolume_VOL_400   GranularityVolume = 400
	GranularityVolume_VOL_450   GranularityVolume = 450
	GranularityVolume_VOL_500   GranularityVolume = 500
	GranularityVolume_VOL_1000  GranularityVolume = 1000
	GranularityVolume_VOL_1500  GranularityVolume = 1500
	GranularityVolume_VOL_2000  GranularityVolume = 2000
	GranularityVolume_VOL_3000  GranularityVolume = 3000
	GranularityVolume_VOL_4000  GranularityVolume = 4000
	GranularityVolume_VOL_5000  GranularityVolume = 5000
	GranularityVolume_VOL_10000 GranularityVolume = 10000
)

var GranularityVolume_name = map[int32]string{
	0:     "VOL_0",
	1:     "VOL_1",
	5:     "VOL_5",
	10:    "VOL_10",
	15:    "VOL_15",
	20:    "VOL_20",
	30:    "VOL_30",
	50:    "VOL_50",
	100:   "VOL_100",
	150:   "VOL_150",
	200:   "VOL_200",
	250:   "VOL_250",
	300:   "VOL_300",
	350:   "VOL_350",
	400:   "VOL_400",
	450:   "VOL_450",
	500:   "VOL_500",
	1000:  "VOL_1000",
	1500:  "VOL_1500",
	2000:  "VOL_2000",
	3000:  "VOL_3000",
	4000:  "VOL_4000",
	5000:  "VOL_5000",
	10000: "VOL_10000",
}
var GranularityVolume_value = map[string]int32{
	"VOL_0":     0,
	"VOL_1":     1,
	"VOL_5":     5,
	"VOL_10":    10,
	"VOL_15":    15,
	"VOL_20":    20,
	"VOL_30":    30,
	"VOL_50":    50,
	"VOL_100":   100,
	"VOL_150":   150,
	"VOL_200":   200,
	"VOL_250":   250,
	"VOL_300":   300,
	"VOL_350":   350,
	"VOL_400":   400,
	"VOL_450":   450,
	"VOL_500":   500,
	"VOL_1000":  1000,
	"VOL_1500":  1500,
	"VOL_2000":  2000,
	"VOL_3000":  3000,
	"VOL_4000":  4000,
	"VOL_5000":  5000,
	"VOL_10000": 10000,
}

func (x GranularityVolume) String() string {
	return proto.EnumName(GranularityVolume_name, int32(x))
}
func (GranularityVolume) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_enum_066c4166dc13255d, []int{18}
}

type GranularityMoney int32

const (
	GranularityMoney_MONEY_0        GranularityMoney = 0
	GranularityMoney_MONEY_100      GranularityMoney = 1000
	GranularityMoney_MONEY_5000     GranularityMoney = 5000
	GranularityMoney_MONEY_10000    GranularityMoney = 10000
	GranularityMoney_MONEY_15000    GranularityMoney = 15000
	GranularityMoney_MONEY_30000    GranularityMoney = 30000
	GranularityMoney_MONEY_60000    GranularityMoney = 60000
	GranularityMoney_MONEY_100000   GranularityMoney = 100000
	GranularityMoney_MONEY_150000   GranularityMoney = 150000
	GranularityMoney_MONEY_200000   GranularityMoney = 200000
	GranularityMoney_MONEY_250000   GranularityMoney = 250000
	GranularityMoney_MONEY_300000   GranularityMoney = 300000
	GranularityMoney_MONEY_400000   GranularityMoney = 400000
	GranularityMoney_MONEY_500000   GranularityMoney = 500000
	GranularityMoney_MONEY_1000000  GranularityMoney = 1000000
	GranularityMoney_MONEY_1500000  GranularityMoney = 1500000
	GranularityMoney_MONEY_2000000  GranularityMoney = 2000000
	GranularityMoney_MONEY_2500000  GranularityMoney = 2500000
	GranularityMoney_MONEY_3000000  GranularityMoney = 3000000
	GranularityMoney_MONEY_3500000  GranularityMoney = 3500000
	GranularityMoney_MONEY_4000000  GranularityMoney = 4000000
	GranularityMoney_MONEY_4500000  GranularityMoney = 4500000
	GranularityMoney_MONEY_5000000  GranularityMoney = 5000000
	GranularityMoney_MONEY_10000000 GranularityMoney = 10000000
)

var GranularityMoney_name = map[int32]string{
	0:        "MONEY_0",
	1000:     "MONEY_100",
	5000:     "MONEY_5000",
	10000:    "MONEY_10000",
	15000:    "MONEY_15000",
	30000:    "MONEY_30000",
	60000:    "MONEY_60000",
	100000:   "MONEY_100000",
	150000:   "MONEY_150000",
	200000:   "MONEY_200000",
	250000:   "MONEY_250000",
	300000:   "MONEY_300000",
	400000:   "MONEY_400000",
	500000:   "MONEY_500000",
	1000000:  "MONEY_1000000",
	1500000:  "MONEY_1500000",
	2000000:  "MONEY_2000000",
	2500000:  "MONEY_2500000",
	3000000:  "MONEY_3000000",
	3500000:  "MONEY_3500000",
	4000000:  "MONEY_4000000",
	4500000:  "MONEY_4500000",
	5000000:  "MONEY_5000000",
	10000000: "MONEY_10000000",
}
var GranularityMoney_value = map[string]int32{
	"MONEY_0":        0,
	"MONEY_100":      1000,
	"MONEY_5000":     5000,
	"MONEY_10000":    10000,
	"MONEY_15000":    15000,
	"MONEY_30000":    30000,
	"MONEY_60000":    60000,
	"MONEY_100000":   100000,
	"MONEY_150000":   150000,
	"MONEY_200000":   200000,
	"MONEY_250000":   250000,
	"MONEY_300000":   300000,
	"MONEY_400000":   400000,
	"MONEY_500000":   500000,
	"MONEY_1000000":  1000000,
	"MONEY_1500000":  1500000,
	"MONEY_2000000":  2000000,
	"MONEY_2500000":  2500000,
	"MONEY_3000000":  3000000,
	"MONEY_3500000":  3500000,
	"MONEY_4000000":  4000000,
	"MONEY_4500000":  4500000,
	"MONEY_5000000":  5000000,
	"MONEY_10000000": 10000000,
}

func (x GranularityMoney) String() string {
	return proto.EnumName(GranularityMoney_name, int32(x))
}
func (GranularityMoney) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_enum_066c4166dc13255d, []int{19}
}

type CandleGroupBy int32

const (
	CandleGroupBy_TIME   CandleGroupBy = 0
	CandleGroupBy_TICK   CandleGroupBy = 1
	CandleGroupBy_VOLUME CandleGroupBy = 2
	CandleGroupBy_MONEY  CandleGroupBy = 3
)

var CandleGroupBy_name = map[int32]string{
	0: "TIME",
	1: "TICK",
	2: "VOLUME",
	3: "MONEY",
}
var CandleGroupBy_value = map[string]int32{
	"TIME":   0,
	"TICK":   1,
	"VOLUME": 2,
	"MONEY":  3,
}

func (x CandleGroupBy) String() string {
	return proto.EnumName(CandleGroupBy_name, int32(x))
}
func (CandleGroupBy) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_enum_066c4166dc13255d, []int{20}
}

type BacktestingCode int32

const (
	BacktestingCode_START    BacktestingCode = 0
	BacktestingCode_NEXT     BacktestingCode = 1
	BacktestingCode_FINISHED BacktestingCode = 2
)

var BacktestingCode_name = map[int32]string{
	0: "START",
	1: "NEXT",
	2: "FINISHED",
}
var BacktestingCode_value = map[string]int32{
	"START":    0,
	"NEXT":     1,
	"FINISHED": 2,
}

func (x BacktestingCode) String() string {
	return proto.EnumName(BacktestingCode_name, int32(x))
}
func (BacktestingCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_enum_066c4166dc13255d, []int{21}
}

func init() {
	proto.RegisterEnum("api.Venue", Venue_name, Venue_value)
	proto.RegisterEnum("api.SystemMode", SystemMode_name, SystemMode_value)
	proto.RegisterEnum("api.AccountType", AccountType_name, AccountType_value)
	proto.RegisterEnum("api.VenueType", VenueType_name, VenueType_value)
	proto.RegisterEnum("api.Currency", Currency_name, Currency_value)
	proto.RegisterEnum("api.Product", Product_name, Product_value)
	proto.RegisterEnum("api.OrderState", OrderState_name, OrderState_value)
	proto.RegisterEnum("api.OrderTypeFilling", OrderTypeFilling_name, OrderTypeFilling_value)
	proto.RegisterEnum("api.Reason", Reason_name, Reason_value)
	proto.RegisterEnum("api.OrderTypeTime", OrderTypeTime_name, OrderTypeTime_value)
	proto.RegisterEnum("api.OrderEntryType", OrderEntryType_name, OrderEntryType_value)
	proto.RegisterEnum("api.Side", Side_name, Side_value)
	proto.RegisterEnum("api.OrderType", OrderType_name, OrderType_value)
	proto.RegisterEnum("api.DealType", DealType_name, DealType_value)
	proto.RegisterEnum("api.TradeAction", TradeAction_name, TradeAction_value)
	proto.RegisterEnum("api.Retcode", Retcode_name, Retcode_value)
	proto.RegisterEnum("api.GranularityTime", GranularityTime_name, GranularityTime_value)
	proto.RegisterEnum("api.GranularityTick", GranularityTick_name, GranularityTick_value)
	proto.RegisterEnum("api.GranularityVolume", GranularityVolume_name, GranularityVolume_value)
	proto.RegisterEnum("api.GranularityMoney", GranularityMoney_name, GranularityMoney_value)
	proto.RegisterEnum("api.CandleGroupBy", CandleGroupBy_name, CandleGroupBy_value)
	proto.RegisterEnum("api.BacktestingCode", BacktestingCode_name, BacktestingCode_value)
}

func init() { proto.RegisterFile("enum.proto", fileDescriptor_enum_066c4166dc13255d) }

var fileDescriptor_enum_066c4166dc13255d = []byte{
	// 2082 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x98, 0x5d, 0x88, 0x24, 0x57,
	0x15, 0xc7, 0xb7, 0xbf, 0xbb, 0x6f, 0xf7, 0x74, 0x9f, 0xa9, 0xcd, 0x7e, 0x25, 0x9b, 0xdd, 0x24,
	0x7e, 0x44, 0xeb, 0x41, 0x6a, 0x3e, 0x7a, 0xb3, 0x11, 0x7d, 0xa8, 0xae, 0xba, 0xd3, 0x75, 0x9d,
	0xaa, 0xba, 0x9d, 0xaa, 0xdb, 0x93, 0x99, 0xf5, 0xa1, 0x18, 0x67, 0x9a, 0x30, 0x64, 0xb6, 0x7b,
	0xe9, 0xed, 0x01, 0xc7, 0xa7, 0x15, 0xf2, 0x10, 0xd1, 0xc0, 0x12, 0x21, 0x44, 0xf1, 0x61, 0x45,
	0x41, 0x05, 0x85, 0x15, 0x0c, 0xe6, 0xc1, 0x87, 0x25, 0x88, 0x08, 0x3e, 0x18, 0x21, 0xa2, 0x88,
	0xc8, 0xe8, 0x53, 0x10, 0x85, 0x7d, 0xc8, 0x93, 0x20, 0xc8, 0xb9, 0x1f, 0x55, 0x1d, 0xdf, 0xce,
	0xef, 0xdc, 0xff, 0x3d, 0xf7, 0xdc, 0x73, 0xef, 0x3d, 0x5d, 0x33, 0x84, 0x4c, 0xa6, 0x27, 0xb7,
	0x3f, 0x77, 0x67, 0x3e, 0x5b, 0xcc, 0xac, 0xca, 0xfe, 0x9d, 0x23, 0xfb, 0x9b, 0x25, 0x52, 0xdb,
	0x99, 0x4c, 0x4f, 0x26, 0x56, 0x87, 0x34, 0x7d, 0x37, 0xd9, 0x1e, 0x71, 0x1e, 0xc2, 0x39, 0xab,
	0x47, 0xda, 0x1e, 0x67, 0xf1, 0xc0, 0x4d, 0xe9, 0x28, 0xe1, 0x50, 0xb2, 0x08, 0xa9, 0x0f, 0x98,
	0x88, 0xe8, 0x2e, 0x94, 0x51, 0x3a, 0x60, 0x62, 0x8b, 0xc5, 0x74, 0x17, 0x2a, 0x56, 0x9b, 0x34,
	0x06, 0x2c, 0x76, 0x63, 0x8f, 0x42, 0x15, 0x65, 0x43, 0x1a, 0xb1, 0x98, 0x41, 0x0d, 0xed, 0xed,
	0xc4, 0xdd, 0xa6, 0x31, 0xd4, 0xad, 0x26, 0xa9, 0xf2, 0x6d, 0xba, 0x0b, 0x0d, 0x3d, 0x39, 0x15,
	0x6e, 0x34, 0x82, 0x26, 0x52, 0x30, 0xe6, 0x03, 0x86, 0x8b, 0xb4, 0xec, 0x35, 0x42, 0xd2, 0xd3,
	0xbb, 0x8b, 0xc9, 0xed, 0x68, 0x76, 0x38, 0xc1, 0x39, 0x3e, 0x8d, 0x38, 0x9c, 0x43, 0x2b, 0x64,
	0x3b, 0x14, 0x4a, 0x98, 0xd7, 0xc0, 0xf5, 0xb6, 0x05, 0x4d, 0x05, 0x8b, 0x87, 0x50, 0xb6, 0x9f,
	0x25, 0x6d, 0xf7, 0xe0, 0x60, 0x76, 0x32, 0x5d, 0x88, 0xd3, 0x3b, 0x13, 0xab, 0x41, 0x2a, 0x31,
	0x15, 0x70, 0xce, 0x6a, 0x91, 0x5a, 0x40, 0xfd, 0x21, 0x85, 0x92, 0xfd, 0x1c, 0x69, 0xc9, 0x2d,
	0x4a, 0x41, 0x93, 0x54, 0xd3, 0x11, 0x47, 0x45, 0x9b, 0x34, 0xb6, 0xc6, 0x62, 0x9c, 0xd0, 0x14,
	0x4a, 0xf6, 0xd7, 0x4b, 0xa4, 0xe9, 0x9d, 0xcc, 0xe7, 0x93, 0xe9, 0xc1, 0x29, 0x06, 0x19, 0x08,
	0x0f, 0xce, 0xa1, 0x31, 0x4e, 0x7d, 0x28, 0xa1, 0x41, 0x45, 0x00, 0x65, 0x69, 0xf0, 0x14, 0x2a,
	0x68, 0xec, 0x26, 0x23, 0xa8, 0x4a, 0xb1, 0x17, 0x40, 0x0d, 0x8d, 0x50, 0x78, 0x50, 0x97, 0x43,
	0x61, 0x04, 0x0d, 0x34, 0x5c, 0xdf, 0x85, 0x26, 0x1a, 0xb7, 0xa8, 0x07, 0x2d, 0x5c, 0xfd, 0x25,
	0x31, 0x8e, 0x80, 0xa0, 0x15, 0xbb, 0x31, 0x87, 0xb6, 0x8a, 0xed, 0x41, 0xc7, 0xfe, 0x55, 0x85,
	0x34, 0x46, 0xf3, 0xd9, 0xe1, 0xc9, 0xc1, 0x42, 0x16, 0x55, 0x78, 0x19, 0xae, 0x2e, 0x33, 0xa5,
	0x22, 0xc8, 0x30, 0xa7, 0x92, 0x01, 0x1c, 0x29, 0x4b, 0xe0, 0xa9, 0x84, 0x8a, 0x01, 0x94, 0x55,
	0x0d, 0x60, 0xd6, 0x35, 0x84, 0xdd, 0x64, 0x24, 0x65, 0x75, 0x03, 0x28, 0x6b, 0x18, 0x40, 0x59,
	0x53, 0x2e, 0xea, 0xa9, 0xd0, 0x2d, 0x03, 0x28, 0x23, 0x06, 0x50, 0xd6, 0x46, 0x08, 0x75, 0x6e,
	0x1d, 0x03, 0x28, 0x5b, 0x31, 0x80, 0xb2, 0xae, 0x0c, 0x1d, 0x46, 0x52, 0xd6, 0x33, 0x80, 0x32,
	0x30, 0x80, 0xb2, 0x55, 0x04, 0xd7, 0x77, 0xa5, 0xcc, 0x32, 0x80, 0xb2, 0xf3, 0x06, 0x50, 0xf6,
	0x04, 0xc2, 0x2d, 0xaa, 0x16, 0xbd, 0x60, 0x00, 0x65, 0x17, 0x0d, 0xa0, 0xec, 0x12, 0xde, 0x27,
	0x2c, 0xb0, 0xd4, 0x5d, 0xce, 0x09, 0x85, 0x57, 0x72, 0x42, 0xe5, 0x93, 0x48, 0x78, 0x00, 0x52,
	0xf9, 0x54, 0x4e, 0xa8, 0xbc, 0x9a, 0x13, 0x2a, 0x9f, 0x56, 0x15, 0x57, 0x4b, 0x5f, 0x33, 0x80,
	0xba, 0xeb, 0x06, 0x50, 0xf6, 0x8c, 0xfd, 0xa0, 0x44, 0x08, 0x9f, 0x1f, 0x4e, 0xe6, 0xe9, 0x62,
	0x7f, 0x31, 0xc1, 0xb1, 0x54, 0xb8, 0x89, 0xa0, 0x78, 0x82, 0x84, 0xd4, 0x47, 0xa1, 0xeb, 0x51,
	0xbc, 0x4b, 0x1d, 0xd2, 0xf4, 0xf0, 0xb5, 0x84, 0x54, 0x9f, 0xe0, 0xc8, 0x4d, 0x04, 0x73, 0x43,
	0xa8, 0xa0, 0x6c, 0x8b, 0x85, 0x38, 0x50, 0x45, 0x59, 0x42, 0xbf, 0x44, 0x3d, 0x0c, 0x20, 0x4f,
	0x90, 0xee, 0x8e, 0x58, 0x42, 0xf1, 0x04, 0x7b, 0xa4, 0x9d, 0xd0, 0x97, 0xc6, 0x34, 0x15, 0x99,
	0xeb, 0xfb, 0xd0, 0xb0, 0x2c, 0xd2, 0x35, 0x8e, 0x88, 0xfb, 0x6c, 0x6b, 0x0f, 0x9a, 0xcb, 0x3e,
	0xb5, 0x1c, 0xb4, 0x6c, 0x87, 0x80, 0xcc, 0x10, 0x5f, 0xc2, 0xd6, 0xd1, 0xf1, 0xf1, 0xd1, 0xf4,
	0x15, 0xbc, 0x7e, 0x5b, 0x7c, 0x5b, 0x5d, 0x76, 0xc6, 0x3d, 0xf5, 0xd4, 0x13, 0x2a, 0xc6, 0x49,
	0x0c, 0x65, 0xfb, 0x94, 0xd4, 0x93, 0xc9, 0xfe, 0xdd, 0xd9, 0xd4, 0x02, 0xd2, 0xe1, 0x89, 0x4f,
	0x93, 0xcc, 0x0b, 0x19, 0x8d, 0xf1, 0x01, 0xe5, 0x9e, 0x88, 0x0f, 0x58, 0x88, 0xaf, 0x73, 0x85,
	0xb4, 0x94, 0xe7, 0x65, 0x3a, 0x80, 0x32, 0xa6, 0xa0, 0x30, 0x15, 0x89, 0x2b, 0xe8, 0x70, 0x0f,
	0x2a, 0xb8, 0x2d, 0xed, 0x0b, 0xd5, 0x26, 0x15, 0x89, 0x11, 0xd4, 0x96, 0xc6, 0x38, 0xd4, 0x6d,
	0x8f, 0xac, 0xe4, 0xc9, 0x8a, 0xa3, 0xdb, 0xf2, 0x6d, 0x0f, 0xcd, 0xb3, 0xf4, 0xdd, 0x3d, 0xb5,
	0x5e, 0x3a, 0xa2, 0x1e, 0xdb, 0x62, 0xb2, 0x96, 0xab, 0x64, 0x25, 0xc7, 0x0c, 0x15, 0x15, 0xfb,
	0x26, 0xe9, 0xca, 0x20, 0x74, 0xba, 0x98, 0x9f, 0xca, 0x06, 0x50, 0x27, 0x65, 0x16, 0xab, 0x20,
	0x7c, 0x2c, 0xa0, 0x84, 0x9d, 0x82, 0xc5, 0x68, 0x96, 0x71, 0xe7, 0x7c, 0x2c, 0xb2, 0x01, 0xce,
	0xbc, 0x42, 0xaa, 0xe9, 0xd1, 0xa1, 0x5c, 0x75, 0x30, 0xde, 0x53, 0x4d, 0x28, 0xa5, 0x61, 0x08,
	0x25, 0x3b, 0x24, 0xad, 0x3c, 0x33, 0x9c, 0x13, 0xb9, 0xc9, 0xb6, 0x69, 0x3a, 0x21, 0x8b, 0x18,
	0x46, 0x45, 0xb5, 0xe0, 0x23, 0x28, 0x5b, 0x5d, 0x42, 0xd0, 0xca, 0xd4, 0x48, 0x05, 0xd9, 0x0b,
	0x79, 0xca, 0xe2, 0x21, 0x2e, 0x54, 0xb5, 0x7f, 0x52, 0x22, 0x4d, 0x7f, 0xb2, 0x7f, 0x2c, 0xa3,
	0x75, 0x48, 0x73, 0xc4, 0x53, 0x26, 0x18, 0x8f, 0xd5, 0xc3, 0x1f, 0xb8, 0xa1, 0x6c, 0xad, 0xf2,
	0x58, 0xbc, 0x84, 0xfa, 0x4c, 0x27, 0xea, 0x05, 0x6e, 0x32, 0xa4, 0x3a, 0x1e, 0x4f, 0x12, 0xea,
	0xc9, 0x49, 0x55, 0x4c, 0x62, 0xc0, 0xe3, 0x71, 0x0a, 0x35, 0x35, 0x14, 0x45, 0x2c, 0x4d, 0x71,
	0xa8, 0x8e, 0xd1, 0x59, 0x2c, 0x68, 0x42, 0x53, 0x01, 0x0d, 0x3c, 0xbf, 0xc1, 0x78, 0x2f, 0xcb,
	0x2f, 0x63, 0x53, 0x16, 0x90, 0x86, 0x61, 0xe1, 0x6a, 0xc9, 0x9f, 0x05, 0xb6, 0xc3, 0x7c, 0x1a,
	0xfb, 0x40, 0x6c, 0x41, 0xda, 0x62, 0xbe, 0x7f, 0x38, 0x71, 0x0f, 0x16, 0x47, 0xb3, 0xa9, 0xea,
	0xd0, 0x6e, 0xa8, 0x32, 0x1d, 0xd1, 0xd8, 0xc7, 0x9e, 0xac, 0xf6, 0x1e, 0x8a, 0x91, 0xca, 0x53,
	0x5f, 0xc8, 0x8a, 0xba, 0x56, 0x11, 0xdf, 0xa1, 0xea, 0xdc, 0xb1, 0x06, 0x14, 0x2b, 0x50, 0xb3,
	0xff, 0x52, 0x23, 0x8d, 0x64, 0xb2, 0x38, 0xc0, 0xa6, 0xdf, 0x26, 0x0d, 0x75, 0xed, 0x77, 0xd5,
	0xb3, 0x51, 0xa0, 0xb7, 0xac, 0xee, 0x71, 0x05, 0x33, 0x57, 0xcf, 0x29, 0x13, 0x89, 0xeb, 0x63,
	0x40, 0xcc, 0x84, 0xc7, 0x14, 0x6a, 0x38, 0x86, 0x56, 0x66, 0x5e, 0x55, 0x1d, 0x0b, 0x42, 0x93,
	0x84, 0x27, 0xaa, 0xdd, 0x09, 0x16, 0x51, 0x3c, 0x6d, 0xd9, 0xee, 0x58, 0xbc, 0xe3, 0x86, 0x0c,
	0xf7, 0x69, 0x91, 0xae, 0x86, 0x6c, 0x87, 0x87, 0xe3, 0x88, 0x02, 0xc1, 0x72, 0x18, 0xdf, 0x28,
	0x61, 0x1e, 0x85, 0xf6, 0xb2, 0x0b, 0x0f, 0x35, 0x85, 0x0e, 0xce, 0x94, 0x59, 0x64, 0x3e, 0x4b,
	0xdd, 0x01, 0x56, 0x6d, 0x05, 0x65, 0xea, 0x52, 0x64, 0x72, 0x9b, 0x3e, 0x74, 0x65, 0x4f, 0xe1,
	0x59, 0xc4, 0x63, 0xba, 0x07, 0x3d, 0x14, 0xc8, 0x90, 0x99, 0x17, 0xb8, 0xf1, 0x90, 0xfa, 0x00,
	0x78, 0x99, 0x95, 0x8b, 0x6f, 0x6d, 0xc1, 0xaa, 0x75, 0x91, 0x58, 0x66, 0x25, 0xf9, 0xf2, 0x5d,
	0x79, 0xbc, 0x16, 0xce, 0xd4, 0xef, 0x50, 0xcf, 0x3c, 0x6f, 0x5d, 0x20, 0xab, 0x82, 0xf3, 0x2c,
	0x72, 0xe3, 0xbd, 0x4c, 0xbf, 0xf9, 0x14, 0x2e, 0xe0, 0xe9, 0xc7, 0x5c, 0xcb, 0x52, 0xb8, 0x88,
	0x11, 0x53, 0x9a, 0xec, 0xd0, 0xc4, 0x64, 0x9a, 0x66, 0xae, 0x80, 0x4b, 0xe8, 0x57, 0x6f, 0xfa,
	0x63, 0xfe, 0xcb, 0x58, 0xf1, 0x90, 0x7b, 0xdb, 0xd4, 0x87, 0x2b, 0xb2, 0x33, 0x25, 0xfc, 0x16,
	0x8d, 0xe1, 0x49, 0xac, 0xb0, 0xc9, 0x0c, 0xbb, 0x15, 0x3c, 0xa5, 0xee, 0x59, 0x1c, 0xeb, 0x2b,
	0x78, 0x55, 0xf6, 0x81, 0x38, 0xc4, 0x64, 0xdc, 0x10, 0x9e, 0xc6, 0x09, 0xf2, 0xf2, 0x67, 0x32,
	0xf1, 0x14, 0xae, 0x15, 0x1e, 0x5d, 0xeb, 0xeb, 0xcb, 0x85, 0x95, 0x2a, 0x78, 0xc6, 0x3a, 0x4f,
	0x7a, 0xe6, 0x2d, 0x98, 0x32, 0x3e, 0x8b, 0x7b, 0x55, 0x37, 0x47, 0x15, 0x81, 0xee, 0xb2, 0x54,
	0xc0, 0x73, 0xa8, 0x55, 0x01, 0xcd, 0x8c, 0x14, 0x3e, 0x81, 0x31, 0xd5, 0xf5, 0x31, 0x1d, 0xf0,
	0x93, 0x98, 0x59, 0xc8, 0xe3, 0x61, 0x86, 0xe9, 0xc1, 0xa7, 0xe4, 0xdb, 0x0c, 0x78, 0x22, 0x14,
	0x7f, 0xda, 0xbc, 0x4d, 0xaa, 0xf8, 0x79, 0xeb, 0x0a, 0xb9, 0x60, 0x9a, 0xe8, 0xcb, 0x4c, 0x04,
	0x59, 0xcc, 0x33, 0xc1, 0xf1, 0x8b, 0xe6, 0x33, 0xcb, 0x09, 0x2b, 0xd7, 0x67, 0x31, 0x09, 0xe3,
	0xd2, 0xb3, 0xc0, 0xb6, 0xff, 0x55, 0x21, 0xbd, 0xe1, 0x7c, 0x7f, 0x7a, 0x72, 0xbc, 0x3f, 0x3f,
	0x5a, 0x9c, 0xca, 0x4e, 0x46, 0x48, 0x1d, 0xaf, 0x61, 0xe6, 0xa8, 0x97, 0x23, 0xed, 0x7e, 0xaa,
	0x3a, 0xa0, 0x84, 0x35, 0x27, 0x05, 0x52, 0x50, 0x3f, 0x85, 0x5e, 0x4e, 0x1b, 0x4e, 0xaa, 0x7e,
	0x87, 0xd4, 0x58, 0x04, 0x5f, 0xc8, 0x61, 0x3d, 0x82, 0xaf, 0x5a, 0x1d, 0x0d, 0x1b, 0x11, 0xfc,
	0xa2, 0x94, 0xd3, 0x66, 0x04, 0x8f, 0x0b, 0xea, 0x47, 0xf0, 0xd3, 0x72, 0x4e, 0x37, 0x22, 0xf8,
	0xb0, 0xa0, 0x17, 0x22, 0xf8, 0x61, 0x25, 0xa7, 0x9b, 0x11, 0x9c, 0x15, 0xf4, 0x62, 0x04, 0xdf,
	0xab, 0x5a, 0x2b, 0x79, 0x96, 0x11, 0xfc, 0x79, 0x09, 0xfb, 0x11, 0xbc, 0xd6, 0xc8, 0x71, 0xdd,
	0x89, 0xe0, 0x61, 0x2b, 0xc7, 0x0d, 0x27, 0x82, 0xd7, 0xbb, 0x39, 0x6e, 0x3a, 0x11, 0x9c, 0x59,
	0x39, 0xf6, 0x9d, 0x08, 0xde, 0xbd, 0x94, 0xaf, 0xb3, 0x16, 0xc0, 0xfd, 0xab, 0x39, 0xad, 0x07,
	0xf0, 0xe0, 0x66, 0xb1, 0xaf, 0x00, 0x1e, 0x8a, 0x62, 0x5f, 0x01, 0x3c, 0xba, 0x63, 0xad, 0x98,
	0x7d, 0x05, 0xf0, 0xfe, 0xb7, 0x4a, 0x39, 0xde, 0x08, 0xe0, 0xec, 0xc7, 0x05, 0xbe, 0x10, 0xc0,
	0xe3, 0x5f, 0x17, 0x78, 0x33, 0x80, 0x7b, 0x7f, 0x2f, 0xf0, 0xc5, 0x00, 0xee, 0xff, 0xb7, 0x64,
	0x75, 0xf3, 0xcd, 0x05, 0xf0, 0xe0, 0x3b, 0xe5, 0x82, 0xd7, 0x02, 0x78, 0xf8, 0xce, 0x12, 0xaf,
	0x07, 0xf0, 0xe8, 0x0f, 0xe5, 0x7c, 0xfa, 0x9a, 0x0f, 0xf7, 0x7e, 0x50, 0xb3, 0xff, 0x5d, 0xfe,
	0xbf, 0xe3, 0x3e, 0x78, 0x55, 0x1d, 0xb7, 0xb7, 0x2d, 0x8f, 0xdb, 0xd8, 0x6b, 0xaa, 0xa3, 0x4b,
	0xbb, 0xaf, 0x7e, 0xe0, 0x95, 0xdf, 0x51, 0x9f, 0x5b, 0x0a, 0xfa, 0xea, 0xd3, 0x49, 0xc2, 0xba,
	0xa3, 0x3e, 0x83, 0x24, 0x6c, 0x38, 0xe6, 0x0e, 0xe0, 0x7c, 0x07, 0xd6, 0xd5, 0xf5, 0x90, 0x01,
	0x1c, 0x38, 0x54, 0x75, 0x95, 0x11, 0x1c, 0x78, 0xab, 0x94, 0xe3, 0xba, 0xe3, 0xc0, 0x6f, 0x97,
	0xb0, 0xef, 0xc0, 0x7f, 0x0a, 0xdc, 0x70, 0x1c, 0xbc, 0x16, 0x39, 0xf6, 0x1d, 0xf8, 0x5b, 0x81,
	0x9b, 0x8e, 0x03, 0xf7, 0x2b, 0x05, 0xf6, 0x1d, 0x78, 0xaf, 0xc0, 0xbe, 0xe3, 0xc0, 0x47, 0xf8,
	0x63, 0xd4, 0x32, 0x59, 0x38, 0xf0, 0x61, 0xa3, 0x60, 0x1c, 0xff, 0x6b, 0x3b, 0xe7, 0x75, 0x1c,
	0x7f, 0xbf, 0x97, 0xf3, 0x06, 0xf2, 0xbb, 0x97, 0x72, 0xde, 0x44, 0x7e, 0x70, 0x3d, 0xe7, 0x3e,
	0xf2, 0xeb, 0xcf, 0x5b, 0x3d, 0x42, 0xf2, 0xf8, 0x0e, 0xdc, 0x8f, 0xed, 0x3f, 0x95, 0xc9, 0xea,
	0x52, 0xbd, 0x77, 0x66, 0xc7, 0x27, 0xb7, 0x27, 0xd8, 0xf2, 0x77, 0x78, 0x28, 0x0b, 0xae, 0xcd,
	0x35, 0xf5, 0x4b, 0x8f, 0x66, 0x5f, 0xfd, 0x6d, 0x22, 0xbd, 0x58, 0x6d, 0x63, 0x63, 0xb1, 0xb5,
	0x2d, 0x6b, 0xad, 0x6d, 0x59, 0x6a, 0x6d, 0xcb, 0x4a, 0xb7, 0x49, 0x43, 0xcd, 0xc5, 0x42, 0x77,
	0x34, 0xa8, 0x3a, 0x6b, 0xd2, 0x65, 0x36, 0xa4, 0xaa, 0xac, 0x49, 0x17, 0xd9, 0x90, 0xaa, 0xb1,
	0x26, 0x5d, 0x62, 0x43, 0xaa, 0xc2, 0x9a, 0x74, 0x81, 0x57, 0x48, 0x53, 0x2f, 0x2e, 0xeb, 0x6b,
	0x50, 0x97, 0x57, 0xa3, 0xa9, 0xae, 0x46, 0x53, 0x5c, 0x8d, 0xa6, 0xb6, 0x1a, 0x4d, 0x69, 0xbb,
	0xa4, 0x65, 0x22, 0xcb, 0xca, 0x3e, 0xae, 0x10, 0x58, 0xaa, 0x6c, 0x34, 0x9b, 0x4e, 0x4e, 0x71,
	0xef, 0xf2, 0x27, 0x4c, 0x96, 0xb6, 0x4b, 0x5a, 0x0a, 0xd6, 0x54, 0x32, 0x3d, 0x42, 0x14, 0x9b,
	0x90, 0x40, 0xda, 0xb9, 0x40, 0x06, 0x5d, 0xf2, 0x48, 0xcd, 0xdb, 0x27, 0xd6, 0xaa, 0xf1, 0x6c,
	0x48, 0xcd, 0xc3, 0x7f, 0x96, 0x0a, 0xd7, 0x0d, 0xe9, 0x3a, 0xfb, 0xa0, 0x62, 0x59, 0xa4, 0xb3,
	0x14, 0xc9, 0x81, 0x07, 0x6f, 0xd4, 0x97, 0x7c, 0x7d, 0xe9, 0x7b, 0xfc, 0xed, 0x56, 0xe1, 0x5b,
	0x57, 0xba, 0x47, 0xdf, 0xed, 0x2c, 0xf9, 0x94, 0xee, 0xfe, 0xf7, 0x7b, 0x85, 0x6f, 0x43, 0xe9,
	0xce, 0x7e, 0x64, 0x15, 0xbe, 0x4d, 0xe5, 0xbb, 0xf7, 0xce, 0xe5, 0xc2, 0xd7, 0xd7, 0xeb, 0xbe,
	0x77, 0xcd, 0x3a, 0x4f, 0x56, 0x96, 0x73, 0x71, 0xe0, 0xd1, 0x6b, 0x5f, 0x5c, 0x72, 0x6a, 0xe5,
	0xd9, 0x6f, 0xbe, 0x5c, 0x38, 0xd7, 0xb5, 0xf2, 0xde, 0x37, 0xbe, 0x66, 0x3d, 0x91, 0x3b, 0x4d,
	0xcc, 0xdf, 0xbd, 0x5d, 0x2a, 0xbc, 0x1b, 0x26, 0xe8, 0x1b, 0xbf, 0x5c, 0xf6, 0x9a, 0xa8, 0xbf,
	0xff, 0xe3, 0x92, 0x77, 0xd3, 0x84, 0x7d, 0xf3, 0xa3, 0x65, 0xaf, 0x89, 0xfb, 0xc1, 0x9b, 0xe5,
	0xc2, 0xdb, 0x37, 0x71, 0xdf, 0xfa, 0x79, 0xd9, 0xba, 0x40, 0xba, 0x1f, 0xdb, 0x82, 0x03, 0xf7,
	0x7e, 0xf6, 0x8f, 0xaa, 0xfd, 0x79, 0xb2, 0xe2, 0xed, 0x4f, 0x0f, 0x8f, 0x27, 0xc3, 0xf9, 0xec,
	0xe4, 0xce, 0xe0, 0x14, 0x3f, 0xab, 0xb0, 0xb9, 0xa9, 0xaf, 0x5f, 0x7c, 0x78, 0xaa, 0x6b, 0xe9,
	0x5f, 0xed, 0x32, 0xbe, 0x28, 0xf5, 0x45, 0x53, 0xb1, 0x37, 0x49, 0x6f, 0xb0, 0x7f, 0xf0, 0xea,
	0x62, 0x72, 0x77, 0x71, 0x34, 0x7d, 0xc5, 0xc3, 0x6f, 0xb9, 0x16, 0xa9, 0xc9, 0x3f, 0x81, 0xd4,
	0xf4, 0x98, 0xee, 0x0a, 0xf5, 0xe7, 0xcf, 0x16, 0x8b, 0x59, 0x1a, 0xe0, 0x27, 0xfb, 0x57, 0xea,
	0xf2, 0x7f, 0x11, 0x1b, 0xff, 0x0b, 0x00, 0x00, 0xff, 0xff, 0x6d, 0xad, 0x0b, 0x25, 0x99, 0x10,
	0x00, 0x00,
}
