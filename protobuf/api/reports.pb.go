// Code generated by protoc-gen-go. DO NOT EDIT.
// source: reports.proto

package api

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type HistoricalTradesRequest struct {
	Venue                Venue    `protobuf:"varint,1,opt,name=venue,proto3,enum=api.Venue" json:"venue,omitempty"`
	Product              string   `protobuf:"bytes,2,opt,name=product,proto3" json:"product,omitempty"`
	Begin                int64    `protobuf:"varint,3,opt,name=begin,proto3" json:"begin,omitempty"`
	End                  int64    `protobuf:"varint,4,opt,name=end,proto3" json:"end,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HistoricalTradesRequest) Reset()         { *m = HistoricalTradesRequest{} }
func (m *HistoricalTradesRequest) String() string { return proto.CompactTextString(m) }
func (*HistoricalTradesRequest) ProtoMessage()    {}
func (*HistoricalTradesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_66b94ab03de429a8, []int{0}
}
func (m *HistoricalTradesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HistoricalTradesRequest.Unmarshal(m, b)
}
func (m *HistoricalTradesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HistoricalTradesRequest.Marshal(b, m, deterministic)
}
func (dst *HistoricalTradesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HistoricalTradesRequest.Merge(dst, src)
}
func (m *HistoricalTradesRequest) XXX_Size() int {
	return xxx_messageInfo_HistoricalTradesRequest.Size(m)
}
func (m *HistoricalTradesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_HistoricalTradesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_HistoricalTradesRequest proto.InternalMessageInfo

func (m *HistoricalTradesRequest) GetVenue() Venue {
	if m != nil {
		return m.Venue
	}
	return Venue_DARKPOOL
}

func (m *HistoricalTradesRequest) GetProduct() string {
	if m != nil {
		return m.Product
	}
	return ""
}

func (m *HistoricalTradesRequest) GetBegin() int64 {
	if m != nil {
		return m.Begin
	}
	return 0
}

func (m *HistoricalTradesRequest) GetEnd() int64 {
	if m != nil {
		return m.End
	}
	return 0
}

type HistoricalTradesResult struct {
	Retcode              Retcode  `protobuf:"varint,1,opt,name=retcode,proto3,enum=api.Retcode" json:"retcode,omitempty"`
	Trades               *Trade   `protobuf:"bytes,2,opt,name=trades,proto3" json:"trades,omitempty"`
	Comment              string   `protobuf:"bytes,3,opt,name=comment,proto3" json:"comment,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HistoricalTradesResult) Reset()         { *m = HistoricalTradesResult{} }
func (m *HistoricalTradesResult) String() string { return proto.CompactTextString(m) }
func (*HistoricalTradesResult) ProtoMessage()    {}
func (*HistoricalTradesResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_66b94ab03de429a8, []int{1}
}
func (m *HistoricalTradesResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HistoricalTradesResult.Unmarshal(m, b)
}
func (m *HistoricalTradesResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HistoricalTradesResult.Marshal(b, m, deterministic)
}
func (dst *HistoricalTradesResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HistoricalTradesResult.Merge(dst, src)
}
func (m *HistoricalTradesResult) XXX_Size() int {
	return xxx_messageInfo_HistoricalTradesResult.Size(m)
}
func (m *HistoricalTradesResult) XXX_DiscardUnknown() {
	xxx_messageInfo_HistoricalTradesResult.DiscardUnknown(m)
}

var xxx_messageInfo_HistoricalTradesResult proto.InternalMessageInfo

func (m *HistoricalTradesResult) GetRetcode() Retcode {
	if m != nil {
		return m.Retcode
	}
	return Retcode_REJECTX
}

func (m *HistoricalTradesResult) GetTrades() *Trade {
	if m != nil {
		return m.Trades
	}
	return nil
}

func (m *HistoricalTradesResult) GetComment() string {
	if m != nil {
		return m.Comment
	}
	return ""
}

type BacktestingReport struct {
	Initialization       *ClientInitilization   `protobuf:"bytes,1,opt,name=initialization,proto3" json:"initialization,omitempty"`
	Statistics           map[string]*Statistics `protobuf:"bytes,2,rep,name=statistics,proto3" json:"statistics,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Ticks                map[string]int32       `protobuf:"bytes,3,rep,name=ticks,proto3" json:"ticks,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Positions            map[string]*Position   `protobuf:"bytes,4,rep,name=positions,proto3" json:"positions,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Comment              string                 `protobuf:"bytes,5,opt,name=comment,proto3" json:"comment,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *BacktestingReport) Reset()         { *m = BacktestingReport{} }
func (m *BacktestingReport) String() string { return proto.CompactTextString(m) }
func (*BacktestingReport) ProtoMessage()    {}
func (*BacktestingReport) Descriptor() ([]byte, []int) {
	return fileDescriptor_66b94ab03de429a8, []int{2}
}
func (m *BacktestingReport) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BacktestingReport.Unmarshal(m, b)
}
func (m *BacktestingReport) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BacktestingReport.Marshal(b, m, deterministic)
}
func (dst *BacktestingReport) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BacktestingReport.Merge(dst, src)
}
func (m *BacktestingReport) XXX_Size() int {
	return xxx_messageInfo_BacktestingReport.Size(m)
}
func (m *BacktestingReport) XXX_DiscardUnknown() {
	xxx_messageInfo_BacktestingReport.DiscardUnknown(m)
}

var xxx_messageInfo_BacktestingReport proto.InternalMessageInfo

func (m *BacktestingReport) GetInitialization() *ClientInitilization {
	if m != nil {
		return m.Initialization
	}
	return nil
}

func (m *BacktestingReport) GetStatistics() map[string]*Statistics {
	if m != nil {
		return m.Statistics
	}
	return nil
}

func (m *BacktestingReport) GetTicks() map[string]int32 {
	if m != nil {
		return m.Ticks
	}
	return nil
}

func (m *BacktestingReport) GetPositions() map[string]*Position {
	if m != nil {
		return m.Positions
	}
	return nil
}

func (m *BacktestingReport) GetComment() string {
	if m != nil {
		return m.Comment
	}
	return ""
}

type BalanceEvolution struct {
	Balance              []float64 `protobuf:"fixed64,1,rep,packed,name=balance,proto3" json:"balance,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *BalanceEvolution) Reset()         { *m = BalanceEvolution{} }
func (m *BalanceEvolution) String() string { return proto.CompactTextString(m) }
func (*BalanceEvolution) ProtoMessage()    {}
func (*BalanceEvolution) Descriptor() ([]byte, []int) {
	return fileDescriptor_66b94ab03de429a8, []int{3}
}
func (m *BalanceEvolution) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BalanceEvolution.Unmarshal(m, b)
}
func (m *BalanceEvolution) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BalanceEvolution.Marshal(b, m, deterministic)
}
func (dst *BalanceEvolution) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BalanceEvolution.Merge(dst, src)
}
func (m *BalanceEvolution) XXX_Size() int {
	return xxx_messageInfo_BalanceEvolution.Size(m)
}
func (m *BalanceEvolution) XXX_DiscardUnknown() {
	xxx_messageInfo_BalanceEvolution.DiscardUnknown(m)
}

var xxx_messageInfo_BalanceEvolution proto.InternalMessageInfo

func (m *BalanceEvolution) GetBalance() []float64 {
	if m != nil {
		return m.Balance
	}
	return nil
}

type Statistics struct {
	HistoryQuality                  float64                      `protobuf:"fixed64,1,opt,name=history_quality,json=historyQuality,proto3" json:"history_quality,omitempty"`
	GrossProfit                     float64                      `protobuf:"fixed64,4,opt,name=gross_profit,json=grossProfit,proto3" json:"gross_profit,omitempty"`
	GrossLoss                       float64                      `protobuf:"fixed64,6,opt,name=gross_loss,json=grossLoss,proto3" json:"gross_loss,omitempty"`
	TotalNetProfit                  float64                      `protobuf:"fixed64,7,opt,name=total_net_profit,json=totalNetProfit,proto3" json:"total_net_profit,omitempty"`
	BalanceDrawdownAbsolute         float64                      `protobuf:"fixed64,8,opt,name=balance_drawdown_absolute,json=balanceDrawdownAbsolute,proto3" json:"balance_drawdown_absolute,omitempty"`
	BalanceDrawdownMaximal          float64                      `protobuf:"fixed64,9,opt,name=balance_drawdown_maximal,json=balanceDrawdownMaximal,proto3" json:"balance_drawdown_maximal,omitempty"`
	BalanceDrawdownRelative         float64                      `protobuf:"fixed64,10,opt,name=balance_drawdown_relative,json=balanceDrawdownRelative,proto3" json:"balance_drawdown_relative,omitempty"`
	EquityDrawdownAbsolute          float64                      `protobuf:"fixed64,11,opt,name=equity_drawdown_absolute,json=equityDrawdownAbsolute,proto3" json:"equity_drawdown_absolute,omitempty"`
	EquityDrawdownMaximal           float64                      `protobuf:"fixed64,12,opt,name=equity_drawdown_maximal,json=equityDrawdownMaximal,proto3" json:"equity_drawdown_maximal,omitempty"`
	EquityDrawdownRelative          float64                      `protobuf:"fixed64,13,opt,name=equity_drawdown_relative,json=equityDrawdownRelative,proto3" json:"equity_drawdown_relative,omitempty"`
	ProfitFactor                    float64                      `protobuf:"fixed64,14,opt,name=profit_factor,json=profitFactor,proto3" json:"profit_factor,omitempty"`
	RecoveryFactor                  float64                      `protobuf:"fixed64,15,opt,name=recovery_factor,json=recoveryFactor,proto3" json:"recovery_factor,omitempty"`
	Ahpr                            float64                      `protobuf:"fixed64,16,opt,name=ahpr,proto3" json:"ahpr,omitempty"`
	Ghpr                            float64                      `protobuf:"fixed64,17,opt,name=ghpr,proto3" json:"ghpr,omitempty"`
	ExpectedPayoff                  float64                      `protobuf:"fixed64,18,opt,name=expected_payoff,json=expectedPayoff,proto3" json:"expected_payoff,omitempty"`
	SharpeRatio                     float64                      `protobuf:"fixed64,19,opt,name=sharpe_ratio,json=sharpeRatio,proto3" json:"sharpe_ratio,omitempty"`
	ZScore                          float64                      `protobuf:"fixed64,20,opt,name=z_score,json=zScore,proto3" json:"z_score,omitempty"`
	TotalTrades                     float64                      `protobuf:"fixed64,21,opt,name=total_trades,json=totalTrades,proto3" json:"total_trades,omitempty"`
	TotalDeals                      float64                      `protobuf:"fixed64,22,opt,name=total_deals,json=totalDeals,proto3" json:"total_deals,omitempty"`
	ShortTradesWon                  float64                      `protobuf:"fixed64,23,opt,name=short_trades_won,json=shortTradesWon,proto3" json:"short_trades_won,omitempty"`
	LongTradesWon                   float64                      `protobuf:"fixed64,24,opt,name=long_trades_won,json=longTradesWon,proto3" json:"long_trades_won,omitempty"`
	ProfitTradesTotal               float64                      `protobuf:"fixed64,25,opt,name=profit_trades_total,json=profitTradesTotal,proto3" json:"profit_trades_total,omitempty"`
	LossTradesTotal                 float64                      `protobuf:"fixed64,26,opt,name=loss_trades_total,json=lossTradesTotal,proto3" json:"loss_trades_total,omitempty"`
	LargestProfitTrade              float64                      `protobuf:"fixed64,27,opt,name=largest_profit_trade,json=largestProfitTrade,proto3" json:"largest_profit_trade,omitempty"`
	LargestLossTrade                float64                      `protobuf:"fixed64,28,opt,name=largest_loss_trade,json=largestLossTrade,proto3" json:"largest_loss_trade,omitempty"`
	AverageProfitTrade              float64                      `protobuf:"fixed64,29,opt,name=average_profit_trade,json=averageProfitTrade,proto3" json:"average_profit_trade,omitempty"`
	AverageLossTrade                float64                      `protobuf:"fixed64,30,opt,name=average_loss_trade,json=averageLossTrade,proto3" json:"average_loss_trade,omitempty"`
	MaximumConsecutiveWins          float64                      `protobuf:"fixed64,31,opt,name=maximum_consecutive_wins,json=maximumConsecutiveWins,proto3" json:"maximum_consecutive_wins,omitempty"`
	MaximumConsecutiveWinsCount     float64                      `protobuf:"fixed64,32,opt,name=maximum_consecutive_wins_count,json=maximumConsecutiveWinsCount,proto3" json:"maximum_consecutive_wins_count,omitempty"`
	MaximumConsecutiveLosses        float64                      `protobuf:"fixed64,33,opt,name=maximum_consecutive_losses,json=maximumConsecutiveLosses,proto3" json:"maximum_consecutive_losses,omitempty"`
	MaximumConsecutiveLossesCount   float64                      `protobuf:"fixed64,34,opt,name=maximum_consecutive_losses_count,json=maximumConsecutiveLossesCount,proto3" json:"maximum_consecutive_losses_count,omitempty"`
	MaximalConsecutiveProfit        float64                      `protobuf:"fixed64,35,opt,name=maximal_consecutive_profit,json=maximalConsecutiveProfit,proto3" json:"maximal_consecutive_profit,omitempty"`
	MaximalConsecutiveProfitCount   float64                      `protobuf:"fixed64,36,opt,name=maximal_consecutive_profit_count,json=maximalConsecutiveProfitCount,proto3" json:"maximal_consecutive_profit_count,omitempty"`
	MaximalConsecutiveLoss          float64                      `protobuf:"fixed64,37,opt,name=maximal_consecutive_loss,json=maximalConsecutiveLoss,proto3" json:"maximal_consecutive_loss,omitempty"`
	MaximalConsecutiveLossCount     float64                      `protobuf:"fixed64,38,opt,name=maximal_consecutive_loss_count,json=maximalConsecutiveLossCount,proto3" json:"maximal_consecutive_loss_count,omitempty"`
	AverageConsecutiveWins          float64                      `protobuf:"fixed64,39,opt,name=average_consecutive_wins,json=averageConsecutiveWins,proto3" json:"average_consecutive_wins,omitempty"`
	AverageConsecutiveLosses        float64                      `protobuf:"fixed64,40,opt,name=average_consecutive_losses,json=averageConsecutiveLosses,proto3" json:"average_consecutive_losses,omitempty"`
	WinsTotalSeries                 float64                      `protobuf:"fixed64,41,opt,name=wins_total_series,json=winsTotalSeries,proto3" json:"wins_total_series,omitempty"`
	LossTotalSeries                 float64                      `protobuf:"fixed64,42,opt,name=loss_total_series,json=lossTotalSeries,proto3" json:"loss_total_series,omitempty"`
	CorrelationMfe                  float64                      `protobuf:"fixed64,43,opt,name=correlation_mfe,json=correlationMfe,proto3" json:"correlation_mfe,omitempty"`
	CorrelationMae                  float64                      `protobuf:"fixed64,44,opt,name=correlation_mae,json=correlationMae,proto3" json:"correlation_mae,omitempty"`
	MinimalPositionHoldingTime      int64                        `protobuf:"varint,45,opt,name=minimal_position_holding_time,json=minimalPositionHoldingTime,proto3" json:"minimal_position_holding_time,omitempty"`
	MaximalPositionHoldingTime      int64                        `protobuf:"varint,46,opt,name=maximal_position_holding_time,json=maximalPositionHoldingTime,proto3" json:"maximal_position_holding_time,omitempty"`
	AveragePositionHoldingTime      int64                        `protobuf:"varint,47,opt,name=average_position_holding_time,json=averagePositionHoldingTime,proto3" json:"average_position_holding_time,omitempty"`
	BalanceEvolution                map[string]*BalanceEvolution `protobuf:"bytes,48,rep,name=balance_evolution,json=balanceEvolution,proto3" json:"balance_evolution,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	LrSlopeBalance                  float64                      `protobuf:"fixed64,49,opt,name=lr_slope_balance,json=lrSlopeBalance,proto3" json:"lr_slope_balance,omitempty"`
	LrInterceptBalance              float64                      `protobuf:"fixed64,50,opt,name=lr_intercept_balance,json=lrInterceptBalance,proto3" json:"lr_intercept_balance,omitempty"`
	LrRSquaredBalance               float64                      `protobuf:"fixed64,51,opt,name=lr_r_squared_balance,json=lrRSquaredBalance,proto3" json:"lr_r_squared_balance,omitempty"`
	LrSlopeStandardErrorBalance     float64                      `protobuf:"fixed64,52,opt,name=lr_slope_standard_error_balance,json=lrSlopeStandardErrorBalance,proto3" json:"lr_slope_standard_error_balance,omitempty"`
	LrInterceptStandardErrorBalance float64                      `protobuf:"fixed64,53,opt,name=lr_intercept_standard_error_balance,json=lrInterceptStandardErrorBalance,proto3" json:"lr_intercept_standard_error_balance,omitempty"`
	XXX_NoUnkeyedLiteral            struct{}                     `json:"-"`
	XXX_unrecognized                []byte                       `json:"-"`
	XXX_sizecache                   int32                        `json:"-"`
}

func (m *Statistics) Reset()         { *m = Statistics{} }
func (m *Statistics) String() string { return proto.CompactTextString(m) }
func (*Statistics) ProtoMessage()    {}
func (*Statistics) Descriptor() ([]byte, []int) {
	return fileDescriptor_66b94ab03de429a8, []int{4}
}
func (m *Statistics) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Statistics.Unmarshal(m, b)
}
func (m *Statistics) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Statistics.Marshal(b, m, deterministic)
}
func (dst *Statistics) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Statistics.Merge(dst, src)
}
func (m *Statistics) XXX_Size() int {
	return xxx_messageInfo_Statistics.Size(m)
}
func (m *Statistics) XXX_DiscardUnknown() {
	xxx_messageInfo_Statistics.DiscardUnknown(m)
}

var xxx_messageInfo_Statistics proto.InternalMessageInfo

func (m *Statistics) GetHistoryQuality() float64 {
	if m != nil {
		return m.HistoryQuality
	}
	return 0
}

func (m *Statistics) GetGrossProfit() float64 {
	if m != nil {
		return m.GrossProfit
	}
	return 0
}

func (m *Statistics) GetGrossLoss() float64 {
	if m != nil {
		return m.GrossLoss
	}
	return 0
}

func (m *Statistics) GetTotalNetProfit() float64 {
	if m != nil {
		return m.TotalNetProfit
	}
	return 0
}

func (m *Statistics) GetBalanceDrawdownAbsolute() float64 {
	if m != nil {
		return m.BalanceDrawdownAbsolute
	}
	return 0
}

func (m *Statistics) GetBalanceDrawdownMaximal() float64 {
	if m != nil {
		return m.BalanceDrawdownMaximal
	}
	return 0
}

func (m *Statistics) GetBalanceDrawdownRelative() float64 {
	if m != nil {
		return m.BalanceDrawdownRelative
	}
	return 0
}

func (m *Statistics) GetEquityDrawdownAbsolute() float64 {
	if m != nil {
		return m.EquityDrawdownAbsolute
	}
	return 0
}

func (m *Statistics) GetEquityDrawdownMaximal() float64 {
	if m != nil {
		return m.EquityDrawdownMaximal
	}
	return 0
}

func (m *Statistics) GetEquityDrawdownRelative() float64 {
	if m != nil {
		return m.EquityDrawdownRelative
	}
	return 0
}

func (m *Statistics) GetProfitFactor() float64 {
	if m != nil {
		return m.ProfitFactor
	}
	return 0
}

func (m *Statistics) GetRecoveryFactor() float64 {
	if m != nil {
		return m.RecoveryFactor
	}
	return 0
}

func (m *Statistics) GetAhpr() float64 {
	if m != nil {
		return m.Ahpr
	}
	return 0
}

func (m *Statistics) GetGhpr() float64 {
	if m != nil {
		return m.Ghpr
	}
	return 0
}

func (m *Statistics) GetExpectedPayoff() float64 {
	if m != nil {
		return m.ExpectedPayoff
	}
	return 0
}

func (m *Statistics) GetSharpeRatio() float64 {
	if m != nil {
		return m.SharpeRatio
	}
	return 0
}

func (m *Statistics) GetZScore() float64 {
	if m != nil {
		return m.ZScore
	}
	return 0
}

func (m *Statistics) GetTotalTrades() float64 {
	if m != nil {
		return m.TotalTrades
	}
	return 0
}

func (m *Statistics) GetTotalDeals() float64 {
	if m != nil {
		return m.TotalDeals
	}
	return 0
}

func (m *Statistics) GetShortTradesWon() float64 {
	if m != nil {
		return m.ShortTradesWon
	}
	return 0
}

func (m *Statistics) GetLongTradesWon() float64 {
	if m != nil {
		return m.LongTradesWon
	}
	return 0
}

func (m *Statistics) GetProfitTradesTotal() float64 {
	if m != nil {
		return m.ProfitTradesTotal
	}
	return 0
}

func (m *Statistics) GetLossTradesTotal() float64 {
	if m != nil {
		return m.LossTradesTotal
	}
	return 0
}

func (m *Statistics) GetLargestProfitTrade() float64 {
	if m != nil {
		return m.LargestProfitTrade
	}
	return 0
}

func (m *Statistics) GetLargestLossTrade() float64 {
	if m != nil {
		return m.LargestLossTrade
	}
	return 0
}

func (m *Statistics) GetAverageProfitTrade() float64 {
	if m != nil {
		return m.AverageProfitTrade
	}
	return 0
}

func (m *Statistics) GetAverageLossTrade() float64 {
	if m != nil {
		return m.AverageLossTrade
	}
	return 0
}

func (m *Statistics) GetMaximumConsecutiveWins() float64 {
	if m != nil {
		return m.MaximumConsecutiveWins
	}
	return 0
}

func (m *Statistics) GetMaximumConsecutiveWinsCount() float64 {
	if m != nil {
		return m.MaximumConsecutiveWinsCount
	}
	return 0
}

func (m *Statistics) GetMaximumConsecutiveLosses() float64 {
	if m != nil {
		return m.MaximumConsecutiveLosses
	}
	return 0
}

func (m *Statistics) GetMaximumConsecutiveLossesCount() float64 {
	if m != nil {
		return m.MaximumConsecutiveLossesCount
	}
	return 0
}

func (m *Statistics) GetMaximalConsecutiveProfit() float64 {
	if m != nil {
		return m.MaximalConsecutiveProfit
	}
	return 0
}

func (m *Statistics) GetMaximalConsecutiveProfitCount() float64 {
	if m != nil {
		return m.MaximalConsecutiveProfitCount
	}
	return 0
}

func (m *Statistics) GetMaximalConsecutiveLoss() float64 {
	if m != nil {
		return m.MaximalConsecutiveLoss
	}
	return 0
}

func (m *Statistics) GetMaximalConsecutiveLossCount() float64 {
	if m != nil {
		return m.MaximalConsecutiveLossCount
	}
	return 0
}

func (m *Statistics) GetAverageConsecutiveWins() float64 {
	if m != nil {
		return m.AverageConsecutiveWins
	}
	return 0
}

func (m *Statistics) GetAverageConsecutiveLosses() float64 {
	if m != nil {
		return m.AverageConsecutiveLosses
	}
	return 0
}

func (m *Statistics) GetWinsTotalSeries() float64 {
	if m != nil {
		return m.WinsTotalSeries
	}
	return 0
}

func (m *Statistics) GetLossTotalSeries() float64 {
	if m != nil {
		return m.LossTotalSeries
	}
	return 0
}

func (m *Statistics) GetCorrelationMfe() float64 {
	if m != nil {
		return m.CorrelationMfe
	}
	return 0
}

func (m *Statistics) GetCorrelationMae() float64 {
	if m != nil {
		return m.CorrelationMae
	}
	return 0
}

func (m *Statistics) GetMinimalPositionHoldingTime() int64 {
	if m != nil {
		return m.MinimalPositionHoldingTime
	}
	return 0
}

func (m *Statistics) GetMaximalPositionHoldingTime() int64 {
	if m != nil {
		return m.MaximalPositionHoldingTime
	}
	return 0
}

func (m *Statistics) GetAveragePositionHoldingTime() int64 {
	if m != nil {
		return m.AveragePositionHoldingTime
	}
	return 0
}

func (m *Statistics) GetBalanceEvolution() map[string]*BalanceEvolution {
	if m != nil {
		return m.BalanceEvolution
	}
	return nil
}

func (m *Statistics) GetLrSlopeBalance() float64 {
	if m != nil {
		return m.LrSlopeBalance
	}
	return 0
}

func (m *Statistics) GetLrInterceptBalance() float64 {
	if m != nil {
		return m.LrInterceptBalance
	}
	return 0
}

func (m *Statistics) GetLrRSquaredBalance() float64 {
	if m != nil {
		return m.LrRSquaredBalance
	}
	return 0
}

func (m *Statistics) GetLrSlopeStandardErrorBalance() float64 {
	if m != nil {
		return m.LrSlopeStandardErrorBalance
	}
	return 0
}

func (m *Statistics) GetLrInterceptStandardErrorBalance() float64 {
	if m != nil {
		return m.LrInterceptStandardErrorBalance
	}
	return 0
}

func init() {
	proto.RegisterType((*HistoricalTradesRequest)(nil), "api.HistoricalTradesRequest")
	proto.RegisterType((*HistoricalTradesResult)(nil), "api.HistoricalTradesResult")
	proto.RegisterType((*BacktestingReport)(nil), "api.BacktestingReport")
	proto.RegisterMapType((map[string]*Position)(nil), "api.BacktestingReport.PositionsEntry")
	proto.RegisterMapType((map[string]*Statistics)(nil), "api.BacktestingReport.StatisticsEntry")
	proto.RegisterMapType((map[string]int32)(nil), "api.BacktestingReport.TicksEntry")
	proto.RegisterType((*BalanceEvolution)(nil), "api.BalanceEvolution")
	proto.RegisterType((*Statistics)(nil), "api.Statistics")
	proto.RegisterMapType((map[string]*BalanceEvolution)(nil), "api.Statistics.BalanceEvolutionEntry")
}

func init() { proto.RegisterFile("reports.proto", fileDescriptor_66b94ab03de429a8) }

var fileDescriptor_66b94ab03de429a8 = []byte{
	// 1351 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x57, 0x6b, 0x73, 0x13, 0x39,
	0x16, 0x2d, 0x93, 0xd7, 0xe6, 0xe6, 0x61, 0x5b, 0x24, 0x44, 0x98, 0x0d, 0x31, 0xce, 0x12, 0xbc,
	0xc0, 0x1a, 0x36, 0xcc, 0x23, 0x45, 0xf1, 0x61, 0x20, 0xc0, 0x40, 0x4d, 0xa0, 0x32, 0x9d, 0xd4,
	0x50, 0x35, 0x5f, 0xba, 0x94, 0xb6, 0xe2, 0xa8, 0xd2, 0x6e, 0x39, 0x92, 0xec, 0x10, 0xaa, 0x66,
	0x7e, 0xc1, 0xfc, 0xbc, 0xf9, 0x41, 0x53, 0xba, 0x92, 0xec, 0xb6, 0xdd, 0xfe, 0xd6, 0x7d, 0xee,
	0x39, 0xe7, 0x9e, 0xd6, 0xcb, 0x32, 0xac, 0x29, 0xde, 0x93, 0xca, 0xe8, 0x56, 0x4f, 0x49, 0x23,
	0xc9, 0x1c, 0xeb, 0x89, 0x1a, 0xf0, 0xac, 0xdf, 0x75, 0x40, 0xad, 0xd2, 0x65, 0xea, 0x92, 0x9b,
	0x36, 0x33, 0xcc, 0x23, 0x65, 0xfe, 0x95, 0x27, 0x7d, 0x23, 0x64, 0xe6, 0x81, 0xea, 0x19, 0x4b,
	0x2e, 0x0d, 0xd7, 0x46, 0x64, 0x1d, 0x0f, 0xad, 0x9f, 0xb1, 0x94, 0x65, 0x09, 0xf7, 0xb6, 0x8d,
	0x3f, 0x60, 0xeb, 0x83, 0xd0, 0x46, 0x2a, 0x91, 0xb0, 0xf4, 0x54, 0xb1, 0x36, 0xd7, 0x11, 0xbf,
	0xea, 0x73, 0x6d, 0x48, 0x1d, 0x16, 0x06, 0x3c, 0xeb, 0x73, 0x5a, 0xaa, 0x97, 0x9a, 0xeb, 0xfb,
	0xd0, 0x62, 0x3d, 0xd1, 0xfa, 0xcd, 0x22, 0x91, 0x2b, 0x10, 0x0a, 0x4b, 0x3d, 0x25, 0xdb, 0xfd,
	0xc4, 0xd0, 0x5b, 0xf5, 0x52, 0x73, 0x39, 0x0a, 0xaf, 0x64, 0x03, 0x16, 0xce, 0x78, 0x47, 0x64,
	0x74, 0xae, 0x5e, 0x6a, 0xce, 0x45, 0xee, 0x85, 0x54, 0x60, 0x8e, 0x67, 0x6d, 0x3a, 0x8f, 0x98,
	0x7d, 0x6c, 0xfc, 0x09, 0x77, 0xa6, 0xdb, 0xeb, 0x7e, 0x6a, 0xc8, 0x1e, 0x2c, 0x29, 0x6e, 0x12,
	0xd9, 0x0e, 0xfd, 0x57, 0xb1, 0x7f, 0xe4, 0xb0, 0x28, 0x14, 0x49, 0x03, 0x16, 0x0d, 0xea, 0x30,
	0xc2, 0x8a, 0x8f, 0x89, 0x56, 0x91, 0xaf, 0xd8, 0x9c, 0x89, 0xec, 0x76, 0x79, 0x66, 0x30, 0xcf,
	0x72, 0x14, 0x5e, 0x1b, 0x7f, 0xcd, 0x43, 0xf5, 0xcd, 0x68, 0x90, 0x22, 0x1c, 0x72, 0xf2, 0x13,
	0xac, 0x8b, 0x4c, 0x18, 0xc1, 0x52, 0xf1, 0x8d, 0xd9, 0xf1, 0xc4, 0x08, 0x2b, 0xfb, 0x14, 0xbd,
	0x0f, 0x53, 0xc1, 0x33, 0xf3, 0xd1, 0x12, 0x42, 0x3d, 0x9a, 0xe0, 0x93, 0xf7, 0x00, 0xda, 0x30,
	0x23, 0xb4, 0x11, 0x89, 0x4d, 0x36, 0xd7, 0x5c, 0xd9, 0xdf, 0x43, 0xf5, 0x54, 0xb7, 0xd6, 0xc9,
	0x90, 0xf8, 0x2e, 0x33, 0xea, 0x26, 0xca, 0x29, 0xc9, 0x8f, 0xb0, 0x60, 0x44, 0x72, 0xa9, 0xe9,
	0x1c, 0x5a, 0x3c, 0x98, 0x61, 0x71, 0x6a, 0x39, 0x4e, 0xed, 0xf8, 0xe4, 0x10, 0x96, 0x7b, 0x52,
	0x0b, 0x1b, 0x46, 0xd3, 0x79, 0x14, 0x3f, 0x9c, 0x21, 0x3e, 0x0e, 0x3c, 0x67, 0x30, 0xd2, 0xe5,
	0xc7, 0x6d, 0x61, 0x6c, 0xdc, 0x6a, 0x9f, 0xa1, 0x3c, 0x11, 0xdb, 0x4e, 0xee, 0x25, 0xbf, 0xc1,
	0x91, 0x5a, 0x8e, 0xec, 0x23, 0x79, 0x08, 0x0b, 0x03, 0x96, 0xf6, 0xb9, 0x9f, 0x99, 0x32, 0xf6,
	0x1f, 0xc9, 0x22, 0x57, 0x7d, 0x79, 0xeb, 0xa0, 0x54, 0x3b, 0x00, 0x18, 0x7d, 0x43, 0x81, 0xd5,
	0x46, 0xde, 0x6a, 0x21, 0xaf, 0xfc, 0x05, 0xd6, 0xc7, 0x3f, 0xa0, 0x40, 0xbd, 0x3b, 0x1e, 0x64,
	0x0d, 0x83, 0x04, 0x55, 0xce, 0xac, 0xf1, 0x14, 0x2a, 0x6f, 0xdc, 0xfe, 0x78, 0x37, 0x90, 0x29,
	0x6e, 0x25, 0x3b, 0x08, 0x7e, 0xcf, 0xd0, 0x52, 0x7d, 0xae, 0x59, 0x8a, 0xc2, 0x6b, 0xe3, 0xef,
	0x0d, 0x80, 0xd1, 0xe7, 0x90, 0x47, 0x50, 0xbe, 0xc0, 0xb5, 0x7c, 0x13, 0x5f, 0xf5, 0x59, 0x2a,
	0x8c, 0xcb, 0x50, 0x8a, 0xd6, 0x3d, 0xfc, 0xab, 0x43, 0xc9, 0x03, 0x58, 0xed, 0x28, 0xa9, 0x75,
	0xdc, 0x53, 0xf2, 0x5c, 0x18, 0xdc, 0x0f, 0xa5, 0x68, 0x05, 0xb1, 0x63, 0x84, 0xc8, 0x36, 0x80,
	0xa3, 0xa4, 0x52, 0x6b, 0xba, 0x88, 0x84, 0x65, 0x44, 0x8e, 0xa4, 0xd6, 0xa4, 0x09, 0x15, 0x23,
	0x0d, 0x4b, 0xe3, 0x8c, 0x9b, 0xe0, 0xb2, 0xe4, 0x7a, 0x21, 0xfe, 0x99, 0x1b, 0x6f, 0xf4, 0x12,
	0xee, 0xfa, 0xb8, 0x71, 0x5b, 0xb1, 0xeb, 0xb6, 0xbc, 0xce, 0x62, 0x76, 0xa6, 0xed, 0xc7, 0x71,
	0xfa, 0x2f, 0x94, 0x6c, 0x79, 0xc2, 0x5b, 0x5f, 0x7f, 0xed, 0xcb, 0xe4, 0x00, 0xe8, 0x94, 0xb6,
	0xcb, 0xbe, 0x8a, 0x2e, 0x4b, 0xe9, 0x32, 0x4a, 0xef, 0x4c, 0x48, 0x3f, 0xb9, 0x6a, 0x61, 0x57,
	0xc5, 0x53, 0x66, 0xc4, 0x80, 0x53, 0x28, 0xec, 0x1a, 0xf9, 0xb2, 0xed, 0xca, 0xaf, 0xfa, 0xc2,
	0xdc, 0x14, 0x04, 0x5e, 0x71, 0x5d, 0x5d, 0x7d, 0x2a, 0xef, 0x0f, 0xb0, 0x35, 0xa9, 0x0c, 0x71,
	0x57, 0x51, 0xb8, 0x39, 0x2e, 0x0c, 0x69, 0x0b, 0x3a, 0x0e, 0xc3, 0xae, 0x15, 0x75, 0x1c, 0x66,
	0xdd, 0x85, 0x35, 0x37, 0xfa, 0xf1, 0x39, 0x4b, 0x8c, 0x54, 0x74, 0x1d, 0xe9, 0xab, 0x0e, 0x7c,
	0x8f, 0x98, 0x5d, 0x17, 0x8a, 0x27, 0x72, 0xc0, 0xd5, 0x4d, 0xa0, 0x95, 0xdd, 0x5c, 0x05, 0xd8,
	0x13, 0x09, 0xcc, 0xb3, 0x8b, 0x9e, 0xa2, 0x15, 0xac, 0xe2, 0xb3, 0xc5, 0x3a, 0x16, 0xab, 0x3a,
	0xcc, 0x3e, 0x5b, 0x43, 0xfe, 0xb5, 0xc7, 0x13, 0xc3, 0xdb, 0x71, 0x8f, 0xdd, 0xc8, 0xf3, 0x73,
	0x4a, 0x9c, 0x61, 0x80, 0x8f, 0x11, 0xb5, 0x0b, 0x4d, 0x5f, 0x30, 0xd5, 0xe3, 0xb1, 0xb2, 0xc7,
	0x12, 0xbd, 0xed, 0x16, 0x9a, 0xc3, 0x22, 0x0b, 0x91, 0x2d, 0x58, 0xfa, 0x16, 0xeb, 0x44, 0x2a,
	0x4e, 0x37, 0xb0, 0xba, 0xf8, 0xed, 0xc4, 0xbe, 0x59, 0xad, 0x5b, 0x62, 0xfe, 0x74, 0xdd, 0x74,
	0x5a, 0xc4, 0xdc, 0x41, 0x4d, 0x76, 0xc0, 0xbd, 0xc6, 0x6d, 0xce, 0x52, 0x4d, 0xef, 0x20, 0x03,
	0x10, 0x7a, 0x6b, 0x11, 0xbb, 0x4c, 0xf5, 0x85, 0x54, 0xc6, 0x7b, 0xc4, 0xd7, 0x32, 0xa3, 0x5b,
	0x2e, 0x29, 0xe2, 0xce, 0xe7, 0x8b, 0xcc, 0xc8, 0x1e, 0x94, 0x53, 0x99, 0x75, 0xf2, 0x44, 0x8a,
	0xc4, 0x35, 0x0b, 0x8f, 0x78, 0x2d, 0xb8, 0xed, 0x07, 0xdc, 0x33, 0xb1, 0x1b, 0xbd, 0x8b, 0xdc,
	0xaa, 0x2b, 0x39, 0xf6, 0xa9, 0x2d, 0x90, 0xc7, 0x50, 0xb5, 0x3b, 0x68, 0x9c, 0x5d, 0x43, 0x76,
	0xd9, 0x16, 0xf2, 0xdc, 0xe7, 0xb0, 0x91, 0x32, 0xd5, 0xe1, 0x3a, 0x6c, 0x29, 0xa7, 0xa2, 0xf7,
	0x90, 0x4e, 0x7c, 0xed, 0x78, 0xd4, 0x83, 0x3c, 0x85, 0x80, 0xc6, 0xa3, 0x2e, 0xf4, 0xdf, 0xc8,
	0xaf, 0xf8, 0xca, 0x51, 0xe8, 0x62, 0xfd, 0xd9, 0x80, 0x2b, 0xd6, 0xe1, 0xe3, 0xfe, 0xdb, 0xce,
	0xdf, 0xd7, 0x26, 0xfc, 0x83, 0x22, 0xe7, 0x7f, 0xdf, 0xf9, 0xfb, 0xca, 0xc8, 0xff, 0x00, 0x28,
	0x2e, 0xf7, 0x7e, 0x37, 0x4e, 0x64, 0xa6, 0xf1, 0x2a, 0x30, 0xe0, 0xf1, 0xb5, 0xc8, 0x34, 0xdd,
	0x71, 0xcb, 0xd8, 0xd7, 0x0f, 0x47, 0xe5, 0x2f, 0x22, 0xb3, 0x3f, 0x16, 0xf7, 0x67, 0x29, 0xe3,
	0x44, 0xf6, 0x33, 0x43, 0xeb, 0xa8, 0xbf, 0x57, 0xac, 0x3f, 0xb4, 0x14, 0xf2, 0x0a, 0x6a, 0x45,
	0x26, 0x36, 0x38, 0xd7, 0xf4, 0x01, 0x1a, 0xd0, 0x69, 0x83, 0x23, 0xac, 0x93, 0x9f, 0xa1, 0x3e,
	0x5b, 0xed, 0x43, 0x34, 0xd0, 0x63, 0x7b, 0x96, 0xc7, 0x78, 0x0c, 0x96, 0x8e, 0x19, 0xf9, 0x43,
	0x72, 0x37, 0x17, 0x83, 0xa5, 0x39, 0x0b, 0x7f, 0x5c, 0x86, 0x18, 0x85, 0x6a, 0x1f, 0xe3, 0x3f,
	0xb9, 0x18, 0x05, 0x1e, 0x2e, 0x46, 0x98, 0x8c, 0x09, 0x23, 0x3c, 0xce, 0x1f, 0xe6, 0x26, 0x63,
	0xcc, 0x00, 0xcf, 0xf6, 0x30, 0x19, 0x05, 0x4a, 0x1f, 0x60, 0x2f, 0x37, 0x19, 0x53, 0xfa, 0x61,
	0xfb, 0xb0, 0x72, 0xa6, 0xd6, 0xc2, 0x23, 0xd7, 0xde, 0xd7, 0x27, 0xd7, 0xc2, 0x2b, 0xa8, 0x15,
	0x29, 0xfd, 0x34, 0x36, 0xdd, 0xf8, 0x4d, 0x6b, 0xfd, 0x34, 0x3e, 0x86, 0x2a, 0xae, 0x1a, 0x77,
	0x2e, 0x68, 0xae, 0x04, 0xd7, 0xf4, 0xbf, 0x6e, 0xbf, 0xd9, 0x02, 0xee, 0xb4, 0x13, 0x84, 0x47,
	0x7b, 0x33, 0xcf, 0x7d, 0x9c, 0xdb, 0x9b, 0x39, 0xee, 0x23, 0x28, 0x27, 0x52, 0xb9, 0x53, 0x59,
	0x66, 0x71, 0xf7, 0x9c, 0xd3, 0x27, 0xee, 0x20, 0xc9, 0xc1, 0x9f, 0xce, 0xf9, 0x14, 0x91, 0x71,
	0xfa, 0x74, 0x9a, 0xc8, 0x38, 0x79, 0x0d, 0xdb, 0x5d, 0x91, 0xe1, 0x30, 0x87, 0x0b, 0x4f, 0x7c,
	0x21, 0xd3, 0xb6, 0xb0, 0xa7, 0x90, 0xe8, 0x72, 0xfa, 0x3f, 0xbc, 0xa5, 0xd6, 0x3c, 0x29, 0xdc,
	0x16, 0x3e, 0x38, 0xca, 0xa9, 0xe8, 0x3a, 0x0b, 0x3f, 0x53, 0xc5, 0x16, 0x2d, 0x6f, 0xe1, 0x48,
	0x33, 0x2c, 0x86, 0x67, 0x42, 0xa1, 0xc5, 0x33, 0x67, 0x11, 0x0e, 0x87, 0x02, 0x8b, 0x08, 0xaa,
	0xe1, 0xb7, 0x96, 0x87, 0x4b, 0x0b, 0x7d, 0x9e, 0xbb, 0xf1, 0x8d, 0xae, 0x28, 0xad, 0xc9, 0xcb,
	0x8d, 0xbb, 0xf1, 0x55, 0xce, 0x26, 0xef, 0x3c, 0x4d, 0xa8, 0xa4, 0x2a, 0xd6, 0xa9, 0xec, 0xf1,
	0x38, 0x5c, 0x7e, 0xfe, 0xef, 0x86, 0x31, 0x55, 0x27, 0x16, 0xf6, 0x4e, 0x78, 0x68, 0xaa, 0x58,
	0x64, 0x86, 0xab, 0x84, 0xf7, 0xcc, 0x90, 0xbd, 0xef, 0x0f, 0x4d, 0xf5, 0x31, 0x94, 0x82, 0xe2,
	0x19, 0x2a, 0x54, 0xac, 0xaf, 0xfa, 0x4c, 0xf1, 0xf6, 0x50, 0xf1, 0xc2, 0x9d, 0xe1, 0xa9, 0x8a,
	0x4e, 0x5c, 0x25, 0x08, 0xde, 0xc2, 0xce, 0x30, 0x8c, 0x36, 0x2c, 0x6b, 0x33, 0xd5, 0x8e, 0xb9,
	0x52, 0x52, 0x0d, 0xb5, 0xdf, 0xb9, 0x1d, 0xe1, 0xb3, 0x9d, 0x78, 0xd2, 0x3b, 0xcb, 0x09, 0x2e,
	0x47, 0xb0, 0x3b, 0x16, 0x74, 0x86, 0xd3, 0xf7, 0xe8, 0xb4, 0x93, 0xcb, 0x5d, 0xe4, 0x56, 0xfb,
	0x1d, 0x36, 0x0b, 0xc7, 0xb2, 0xe0, 0xf2, 0xf9, 0x64, 0xfc, 0xf2, 0xb9, 0xe9, 0x6f, 0xe1, 0xe3,
	0xe2, 0xdc, 0x25, 0xf4, 0x6c, 0x11, 0xff, 0x99, 0xbd, 0xf8, 0x27, 0x00, 0x00, 0xff, 0xff, 0x7f,
	0x76, 0x19, 0x05, 0x01, 0x0e, 0x00, 0x00,
}
