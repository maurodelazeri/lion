syntax = "proto3";
package api;
import "enum.proto";


// https://www.mql5.com/en/docs/standardlibrary/tradeclasses/ctrade/ctradepositionclose

// The API service definition.
service API {   
  // Get all Order for a user with filter - A server-to-client streaming RPC.
 // rpc GetOrders(OrderFilter) returns (stream Order) {}
  // Order request - A simple RPC 
  rpc OrderSend(OrderRequest) returns (OrderResult) {}
  rpc GetPositions(PositionRequest) returns (PositionsResult) {}
  rpc GetAccount(AccountRequest) returns (AccountResult) {}
  rpc GetProductDetails(ProductRequest) returns (ProductResult) {}
  rpc GetHistoticalTrades(HistoricalTradesRequest) returns (stream HistoricalTradesResult) {}
  rpc GetBacktestingToken(BacktestingTokenRequest) returns (BacktestingTokenResponse) {}
  rpc Backtesting(stream BacktestingRequest) returns (stream BacktestingResponse) {}
} 

  message Orders { 
    Venue                         venue                    = 1;  
    OrderType                     type                     = 2;
    Side                          side                     = 3;    
    OrderState                    state                    = 4;  
    int64                         time_expiration          = 5;  
    int64                         time_setup               = 6;  
    OrderTypeFilling              type_filling             = 7;  
    OrderTypeTime                 type_time                = 8;  
    Reason                        reason                   = 9;   
    Product                       product                  = 10;  
    string                        venue_execution_id       = 11;  
    double                        volume                   = 12;  
    double                        price                    = 13;  
    double                        fee                      = 14; 
    double                        left_volume              = 15;
    OrderEntryType                entry_type               = 16;   
    string                        comment                  = 17;  
   }

 message OrderRequest { 
   TradeAction                   action               = 1;  // Trade operation type 
   Venue                         venue                = 2;  // Venue where the order is being send
   Product                       product              = 3;  // Trade product
   double                        volume               = 4;  // Requested volume for a deal in lots 
   double                        price                = 5;  // Price 
   double                        stoplimit            = 6;  // StopLimit level of the order 
   double                        sl                   = 7;  // Stop Loss level of the order 
   double                        tp                   = 8;  // Take Profit level of the order 
   double                        trailling_percent    = 9; // Once hit, follows to profit based on this percentage  
   double                        deviation            = 10; // Maximal possible deviation from the requested price 
   OrderType                     order_type           = 11; // Order type
   Side                          order_side           = 12; // Order side  
   OrderTypeFilling              order_type_filling   = 13; // Order execution type 
   OrderTypeTime                 order_type_time      = 14; // Order expiration type 
   Reason                        order_reason         = 15; // Order reason
   int64                         expiration           = 16; // Order expiration time (for the orders of ORDER_TIME_SPECIFIED type) 
   string                        comment              = 17; // Order comment 
   string                        position             = 18; // Position ticket 
  }

message OrderResult { 
   Retcode                      retcode                   = 1; // Operation return code    
   double                       price                     = 2; // Deal price, confirmed by broker
   double                       volume                    = 3; // Deal volume, confirmed by broker    
   double                       fee                       = 4; // Trade fee
   OrderState                   state                     = 5; // Order state
   string                       position_id               = 6; // position id placed 
   string                       broker_execution_id       = 7; // Return code of an external trading system 
   string                       comment                   = 8; // Broker comment to operation (by default it is filled by description of trade server return code)    
  }

message Position {
  string                        position_id              = 1;
	string                        account_id               = 2;
	Venue                         venue                    = 3; 
	Product                       product                  = 4;
	double                        price_open               = 5;
	double                        weighted_price           = 6;
	double                        volume                   = 7;
  int64                         position_time            = 8;
	int64                         closing_time             = 9;
	Side                          position_side            = 10; 
	Reason                        position_reason          = 11;
	double                        sl                       = 12;
	double                        tp                       = 13;  
	double                        swap                     = 14;
	double                        trailling_percent        = 15;  
	string                        comment                  = 16;
	double                        profit_liquid            = 17;
	double                        cumulative_fees          = 18;
  repeated  Orders              Orders                   = 19;
  }

message PositionRequest { 
  Venue                        venue                  = 1;
  Product                      product                = 2;
}

message PositionsResult { 
   Retcode                      retcode                   = 1;
   repeated Position            positions                 = 2;  
   string                       comment                   = 3; 
}

message AccountRequest { 
  Venue                         venue                = 1; 
}

message AccountResult { 
   Retcode                      retcode                   = 1;  
   Account                      account                   = 2;  
   string                       comment                   = 3;
}

message ProductRequest { 
  Venue                           venue                = 1;
  Product                         product              = 2;
}

message ProductResult { 
   Retcode                      retcode                   = 1; 
   VenueProduct                 venue_products            = 2;
   string                       comment                   = 3;
}

message VenueProduct {
  bool                    enabled                   = 1;
  bool                    individual_connection     = 2;
  double                  minimum_orders_size       = 3;
  double                  step_size                 = 4;
  double                  maker_fee                 = 5;
  double                  taker_fee                 = 6;
}

message HistoricalTradesRequest { 
  Venue                          venue                = 1;
  Product                        product              = 2;
  int64                          begin                = 3;
  int64                          end                  = 4;
}

message HistoricalTradesResult { 
   Retcode                      retcode                   = 1; 
   Trade                        trades                    = 2;
   string                       comment                   = 3;
}

message User {
  string           id       = 1;
  repeated Account accounts = 2;
}

message Account {
  string                     account_id   = 1;
  AccountType                account_type = 2;
  bool                       active       = 3;
  repeated Balance           balances     = 4;
}

message Balance  {
  Venue      venue           = 1; 
  Currency   currency        = 2;
  double     available       = 3; 
  int64      Timestamp       = 4;
  string     position        = 5;
  string     order           = 6;
}

// Backtesting
message BacktestingTokenRequest {
  ClientInitilization     initialization     = 1;
}

message BacktestingTokenResponse { 
   Retcode                      retcode                   = 1; 
   string                       token                     = 2;
   string                       comment                   = 3;
}

message BacktestingRequest {
  string                          account              = 1; 
  Subscription                    subscription         = 2;
  int64                           start_date           = 3;
  int64                           end_date             = 4;
  BacktestingCode                 code                 = 5; 
}

message BacktestingResponse { 
   Retcode                      retcode                = 1; 
   BacktestingCode              code                   = 2; 
   Trade                        trade                  = 3;
   Orderbook                    orderbook              = 4;
   string                       comment                = 5;
}

message ClientInitilization {
  SystemMode                        system_mode            = 1; 
  Subscription                      subscription           = 2;
  repeated Balance                  balances               = 3; 
  int64                             start_date             = 4;
  int64                             end_date               = 5;  
  string                            candle_granularity     = 6;
  CandleGroupBy                     candle_group_by        = 7;
  bool                              verbose                = 8; 
}

// Reports
message BacktestingReport {
  ClientInitilization               initialization                   = 1;
  map<string, Statistics>           statistics                       = 2;
  map<string, int32>                ticks                            = 3; 
  map<string, Position>             positions                        = 4; 
  map<string, Balance>              balances                         = 5; 
  map<string, Product>              assets                           = 6; 
  string                            comment                          = 7;
}

message Statistics {
  double                          total_net_profit                  = 1;
  double                          gross_profit                      = 2;
  double                          gross_loss                        = 3;  
  int32                           total_trades                      = 4;
  int32                           total_deals                       = 5;  
  double                          balance_drawdown_abs              = 6;   
  double                          balance_drawdown_max              = 7;   
  double                          balance_drawdown_rel              = 8;   
  double                          equity_drawdown_abs               = 9;   
  double                          equity_drawdown_max               = 10;   
  double                          equity_drawdown_rel               = 11;   
  int32                           max_consecutive_wins              = 12;   
  double                          max_consecutive_wins_total        = 13;   
  int32                           max_consecutive_profit            = 14;   
  double                          max_consecutive_profit_total      = 15;   
  int32                           max_consecutive_losess            = 16;   
  double                          max_consecutive_losess_total      = 17;   
  int32                           max_consecutive_loss              = 18;   
  double                          max_consecutive_loss_total        = 19;  
  int32                           long_trades_won                   = 20;   
  int32                           loss_trades_total                 = 21;   
  double                          largest_loss_trade                = 22;   
  double                          largest_profit_trade              = 23;   
  int32                           profit_trades_total               = 24;   
  int32                           short_trades_won                  = 25;   
  double                          average_profit_trade              = 26;   
  double                          average_consecutive_wins          = 27;   
  double                          average_loss_trade                = 28;   
  double                          average_consecutive_losses        = 29;
  int64                           minimal_position_holding_time     = 30; 
  int64                           max_position_holding_time         = 31; 
  int64                           average_position_holding_time     = 32; 
  int32                           loss_total_series                 = 33; 
  int32                           wins_total_series                 = 34; 
  double                          profict_factor                    = 35;
  double                          recovery_factor                   = 36;
  double                          ahpr                              = 37; 
  double                          ghpr                              = 38;
  double                          expected_payoff                   = 39;   
  double                          sharp_ratio                       = 40;   
  double                          lr_correlation                    = 41;   
  double                          lr_standart_err                   = 42;   
  double                          margin_level                      = 43;   
  double                          z_score                           = 44;   
} 

// Market Data
message Item {
  double volume = 1;
  double price  = 2;
};

message Subscription {
  repeated SubscriptionItems  subscribe  = 1;
}

message SubscriptionItems {
  Venue            venue         = 1;
  Product          product       = 2;
  bool             orderbook     = 3;
}

message Orderbook {
  Product           product     = 1;
  Venue             venue       = 2;
  int64             timestamp   = 3;
  int32             levels      = 4;
  repeated Item     asks        = 5;
  repeated Item     bids        = 6;
  VenueType         venue_type  = 7;
};

message Trade {
  Product         product       = 1;
  Venue           venue         = 2;
  int64           timestamp     = 3;
  double          price         = 4;
  double          volume        = 5;
  Side            order_side    = 6;
  VenueType       venue_type    = 7;
  repeated Item   asks          = 8; 
  repeated Item   bids          = 9;  
};

message Ticker {
  Product     product       = 1;
  Venue       venue         = 2;
  int64       timestamp     = 3;
  double      price         = 4;
  Side        order_side    = 5;
  double      best_bid      = 6;
  double      best_ask      = 7;
  VenueType   venue_type    = 8;
};

message Candle {
  Venue         venue        = 1;
  Product       product      = 2;
  int32         granularity  = 3;
  int64         point        = 4;
  double        open         = 5;
  double        close        = 6;
  double        high         = 7;
  double        low          = 8;
  double        volume       = 9;
  double        total        = 10;
  int32         total_trades = 11;
  int32         buy_total    = 12;
  int32         sell_total   = 13;   
};

// Events
message Event {
  string       id         = 1;
  string       event      = 2;
  string       user       = 3; 
  string       account    = 4;
  string       container  = 5;
  string       strategy   = 6;
  int64        timestamp  = 7;
  string       command    = 8;
  string       message    = 9;
  bool         error      = 10;
  string       payload    = 11;      
}
