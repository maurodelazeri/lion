syntax = "proto3";

package api;

// The API service definition.
service API {   
  // Get all Order for a user with filter - A server-to-client streaming RPC.
 // rpc GetOrders(OrderFilter) returns (stream Order) {}
  // Order request - A simple RPC 
  rpc OrderSend(TradeRequest) returns (TradeResult) {}
} 

enum Venue{
  DARKPOOL    =  0;
  COINBASEPRO =  1;
  BITMEX      =  2;
  BITFINEX    =  3;
  BINANCE     =  4;
  GEMINI      =  5;
 }

 enum Symbol{
   BTC   = 0;
   ETH   = 1;
   USD   = 2;
   LTC   = 3;
   BCH   = 4;
   ETC   = 5;
 }
 
 enum Product{
   BTC_USD = 0;
   ETH_BTC = 1;
   ETH_USD = 2;
   LTC_USD = 3;
   LTC_BTC = 4;   
   LTC_ETH = 5;
   BCH_USD = 6;
   BCH_BTC = 7;
   BCH_ETH = 8;
   ETC_USD = 9;
   ETC_BTC = 10;
   ETC_ETH = 11;
 }
 
 enum AccountType{
   LIVE     = 0;
   HEDGE    = 1;
   DEMO     = 2;
 };

 enum VenueType{
  SPOT       = 0;
  FUTURES    = 1;
};

 enum OrderType {
  BUY                = 0;
  SELL               = 1; 
  BUY_LIMIT          = 2;  
  SELL_LIMIT         = 3;
  BUY_STOP           = 4;
  SELL_STOP          = 5;
  BUY_STOP_LIMIT     = 6;
  SELL_STOP_LIMIT    = 7;
  CLOSING_BY         = 8;
 }

 enum OrderState {
  STARTED           = 0;
  PLACED            = 1;
  CANCELED          = 2;
  PARTIAL           = 3;
  FILLED            = 4;
  REJECTED          = 5;
  EXPIRED           = 6;
  REQUEST_ADD       = 7;
  REQUEST_MODIFY    = 8;  
  REQUEST_CANCEL    = 9;
 }

 enum OrderTypeFilling {
  FOK           = 0;
  IOC           = 1;
  RETURN        = 2;
 }

 enum OrderReason {
  ORDER_CLIENT        = 0;
  ORDER_MOBILE        = 1;
  ORDER_WEB           = 2;
  ORDER_STRATEGY      = 3;
  ORDER_SL            = 4;
  ORDER_TP            = 5;
  ORDER_SO            = 6;
 } 

 enum OrderTypeTime {
  GTC              = 0;
  DAY              = 1;
  SPECIFIED        = 2;
  SPECIFIED_DAY    = 3;
 } 

 enum PositionReason {
  POSITION_CLIENT        = 0;
  POSITION_MOBILE        = 1;
  POSITION_WEB           = 2;
  POSITION_STRATEGY      = 3;
 } 

 enum PositioType {
  POSITION_BUY                = 0;
  POSITION_SELL               = 1; 
 } 
  
 enum TradeAction {
  DEAL        = 0;
  PENDING     = 1;
  SLTP        = 2;
  MODIFY      = 3;
  REMOVE      = 4;
  CLOSE_BY    = 5;
 }

 enum TradeRetcode {
  REJECTX                        = 0;
  REJECT                         = 2;
  CANCEL                         = 3;
  PLACED_TRADE                   = 4;
  DONE                           = 5;
  DONE_PARTIAL                   = 6;
  ERROR                          = 7;
  TIMEOUT                        = 8;
  INVALID                        = 9;
  INVALID_VOLUME                 = 10;
  INVALID_PRICE                  = 11;
  INVALID_STOPS                  = 12;
  TRADE_DISABLED                 = 13;
  MARKET_CLOSED                  = 14;
  NO_MONEY                       = 15;
  PRICE_CHANGED                  = 16;
  PRICE_OFF                      = 17;
  INVALID_EXPIRATION             = 18;
  ORDER_CHANGED                  = 19;
  TOO_MANY_REQUESTS              = 21;
  NO_CHANGES                     = 22;
  SERVER_DISABLES_AT             = 23;
  CLIENT_DISABLES_AT             = 24;
  LOCKED                         = 25;
  FROZEN                         = 26;
  INVALID_FILL                   = 27;
  CONNECTION                     = 28;
  ONLY_REAL                      = 29;
  LIMIT_ORDERS                   = 30;
  LIMIT_VOLUME                   = 31;
  INVALID_ORDER                  = 32;
  POSITION_CLOSED                = 33;
  CLOSE_ORDER_EXIST              = 34;
  LIMIT_POSITIONS                = 35;
  REJECT_CANCEL                  = 36;
  LONG_ONLY                      = 37;
  SHORT_ONLY                     = 38;
  CLOSE_ONLY                     = 39;
  REQUEST_WITH_NO_TOKEN          = 40;
  INVALID_TOKEN                  = 41;
  INVALID_REQUEST_CONTEXT        = 42;  
  INVALID_REQUEST                = 43;  
 }

  // position — position ticket. Fill it when changing and closing a position for its clear identification. It usually matches the ticket of an order used to open the position.
  // position_by — opposite position ticket. It is used when closing a position by an opposite one (opened at the same symbol but in the opposite direction).

 message TradeRequest { 
   TradeAction                   action         = 1;  // Trade operation type 
   Venue                         venue          = 2;  // Venue where the order is being send
   Product                       product        = 3;  // Trade product
   uint64                        magic          = 4;  // Expert Advisor ID (magic number) 
   uint64                        order          = 5;  // Order ticket 
   double                        volume         = 6;  // Requested volume for a deal in lots 
   double                        price          = 7;  // Price 
   double                        stoplimit      = 8;  // StopLimit level of the order 
   double                        sl             = 9;  // Stop Loss level of the order 
   double                        tp             = 10; // Take Profit level of the order 
   uint64                        deviation      = 11; // Maximal possible deviation from the requested price 
   OrderType                     type           = 12; // Order type 
   OrderTypeFilling              type_filling   = 13; // Order execution type 
   OrderTypeTime                 type_time      = 14; // Order expiration type 
   uint64                        expiration     = 15; // Order expiration time (for the orders of ORDER_TIME_SPECIFIED type) 
   string                        comment        = 16; // Order comment 
   uint64                        position       = 17; // Position ticket 
   uint64                        position_by    = 18; // The ticket of an opposite position
   bool                          async          = 19; // Do not wait the result response, designed to high frequency
  }

message TradeResult { 
   TradeRetcode                 retcode                   = 1;  // Operation return code 
   uint64                       deal                      = 2;  // Deal ticket, if it is performed 
   Venue                        venue                     = 3;  // Venue where the order was sent
   Product                      product                   = 4;  // Product of the trade
   uint64                       order                     = 5;  // Order ticket, if it is placed 
   double                       volume                    = 6;  // Deal volume, confirmed by broker 
   double                       price                     = 7;  // Deal price, confirmed by broker
   string                       comment                   = 8;  // Broker comment to operation (by default it is filled by description of trade server return code) 
   string                       request_id                = 9;  // Request ID set by the terminal during the dispatch  
   string                       broker_execution_id       = 10; // Return code of an external trading system 
  }
  
message User {
  string           id       = 1;
  repeated Account accounts = 2;
}

message Account {
  string                id           = 1;
  string                user         = 2;
  Venue                 venue        = 3;
  AccountType           account_type = 4;
  map<string, Balance>  balances     = 5;
  bool                  active       = 6;
}

message Balance {
  double  id         = 1;
  double  available  = 2;
  double  hold       = 3;
}
