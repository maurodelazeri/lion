syntax = "proto3";
package api;
import "enum.proto";


// https://www.mql5.com/en/docs/standardlibrary/tradeclasses/ctrade/ctradepositionclose

// The API service definition.
service API {   
  // Get all Order for a user with filter - A server-to-client streaming RPC.
 // rpc GetOrders(OrderFilter) returns (stream Order) {}
  // Order request - A simple RPC 
  rpc OrderSend(TradeRequest) returns (TradeResult) {}
  rpc GetPositions(PositionRequest) returns (PositionsResult) {}
  rpc GetAccount(AccountRequest) returns (AccountResult) {}
} 

  // position — position ticket. Fill it when changing and closing a position for its clear identification. It usually matches the ticket of an order used to open the position.
  // position_by — opposite position ticket. It is used when closing a position by an opposite one (opened at the same symbol but in the opposite direction).

 message TradeRequest { 
  TradeAction                   action               = 1;  // Trade operation type 
   Venue                         venue                = 2;  // Venue where the order is being send
   Product                       product              = 3;  // Trade product
   uint64                        order                = 4;  // Order ticket 
   double                        volume               = 5;  // Requested volume for a deal in lots 
   double                        price                = 6;  // Price 
   double                        stoplimit            = 7;  // StopLimit level of the order 
   double                        sl                   = 8;  // Stop Loss level of the order 
   double                        tp                   = 9;  // Take Profit level of the order 
   double                        trailling_percent    = 10; // Once hit, follows to profit based on this percentage  
   uint64                        deviation            = 11; // Maximal possible deviation from the requested price 
   OrderType                     order_type           = 12; // Order type 
   OrderTypeFilling              order_type_filling   = 13; // Order execution type 
   OrderTypeTime                 order_type_time      = 14; // Order expiration type 
   uint64                        expiration           = 15; // Order expiration time (for the orders of ORDER_TIME_SPECIFIED type) 
   string                        comment              = 16; // Order comment 
   uint64                        position             = 17; // Position ticket 
   uint64                        position_by          = 18; // The ticket of an opposite position
   bool                          async                = 19; // Do not wait the result response, designed to high frequency
  }

message TradeResult { 
   Retcode                      retcode                   = 1;  // Operation return code 
   Venue                        venue                     = 2;  // Venue where the order was sent
   Product                      product                   = 3;  // Product of the trade
   OrderType                    order_type                = 4;  // Order type 
   uint64                       order                     = 5;  // Order ticket, if it is placed 
   double                       volume                    = 6;  // Deal volume, confirmed by broker 
   double                       price                     = 7;  // Deal price, confirmed by broker
   string                       comment                   = 8;  // Broker comment to operation (by default it is filled by description of trade server return code) 
   string                       request_id                = 9;  // Request ID set by the terminal during the dispatch  
   string                       broker_execution_id       = 10; // Return code of an external trading system 
   double                       fee                       = 11; // Trade fee
  }

message Position {
   uint64                       position_id            = 1;
   uint64                       orders_id              = 2;
   Venue                        venue                  = 3;
   uint64                       account                = 4;
   uint64                       position_time          = 5;
   PositionType                 position_type          = 6;
   PositionReason               position_reason        = 7;
   double                       volume                 = 8;
   double                       price                  = 9;
   double                       tp                     = 10;
   double                       sl                     = 11;
   double                       swap                   = 12;
   Product                      product                = 13;
   string                       comment                = 14;
}

message PositionRequest { 
   uint64                        position             = 1; // Position id
}

message PositionsResult { 
  Retcode                      retcode                   = 1;  // Operation return code
   repeated Position            positions                 = 2;  // Current open positions
   string                       comment                   = 3; 
}

message AccountRequest { 
  Venue                         venue                = 1; // Venue where the order was sent
}

message AccountResult { 
  Retcode                      retcode                   = 1;  // Operation return code
   Account                      account                   = 2;  // All account for given a user
   string                       comment                   = 3;
}

message User {
  string           id       = 1;
  repeated Account accounts = 2;
}

message Account {
  uint32                account_id   = 1;
  uint32                user_id      = 2;
  Venue                 venue        = 3;
  AccountType           account_type = 4;
  AccountMode           account_mode = 5;
  map<string, Balance>  balances     = 6;
  bool                  active       = 7;
}

message Balance {
  double  balance_id = 1;
  double  available  = 2;
  double  hold       = 3;
}

// Market Data
message Item {
  double amount = 1;
  double price  = 2;
};


message Subscription {
  repeated SubscriptionItems  subscribe          = 1;
  CandleGroupBy               candle_group_by    = 2;
}

message SubscriptionItems {
  Venue            venue         = 1;
  Product          product       = 2;
  bool             orderbook     = 3;
}

message Orderbook {
  Product           product     = 1;
  Venue             venue       = 2;
  uint64            timestamp   = 3;
  uint32            levels      = 4;
  repeated Item     asks        = 5;
  repeated Item     bids        = 6;
  VenueType         venue_type  = 7;
};

message Trade {
  Product     product       = 1;
  Venue       venue         = 2;
  uint64      timestamp     = 3;
  double      price         = 4;
  double      size          = 5;
  OrderType   order_side    = 6;
  VenueType   venue_type    = 7;
};

message Ticker {
  Product     product       = 1;
  Venue       venue         = 2;
  uint64      timestamp     = 3;
  double      price         = 4;
  OrderType   order_side    = 5;
  double      best_bid      = 6;
  double      best_ask      = 7;
  VenueType   venue_type    = 8;
};

message Candle {
  Venue         venue        = 1;
  Product       product      = 2;
  int32         granularity  = 3;
  int32         point        = 4;
  double        open         = 5;
  double        close        = 6;
  double        high         = 7;
  double        low          = 8;
  double        last         = 9; 
  double        volume       = 10;
  double        total        = 11;
  int32         total_trades = 12;
  int32         buy_total    = 13;
  int32         sell_total   = 14;   
};

// Events
message Event {
  string       id         = 1;
  string       event      = 2;
  string       user       = 3; 
  string       account    = 4;
  string       container  = 5;
  string       strategy   = 6;
  int64        timestamp  = 7;
  string       command    = 8;
  string       message    = 9;
  bool         error      = 10;
  string       payload    = 11;      
}
